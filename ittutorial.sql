-- phpMyAdmin SQL Dump
-- version 4.2.7.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Mar 13, 2016 at 10:33 AM
-- Server version: 5.6.20
-- PHP Version: 5.5.15

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `ittutorial`
--

-- --------------------------------------------------------

--
-- Table structure for table `wp_commentmeta`
--

CREATE TABLE IF NOT EXISTS `wp_commentmeta` (
`meta_id` bigint(20) unsigned NOT NULL,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `wp_comments`
--

CREATE TABLE IF NOT EXISTS `wp_comments` (
`comment_ID` bigint(20) unsigned NOT NULL,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0'
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `wp_comments`
--

INSERT INTO `wp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`) VALUES
(1, 1, 'Mr WordPress', '', 'https://wordpress.org/', '', '2015-02-26 08:57:05', '2015-02-26 08:57:05', 'Hi, this is a comment.\nTo delete a comment, just log in and view the post&#039;s comments. There you will have the option to edit or delete them.', 0, '1', '', '', 0, 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_dynamic_widgets`
--

CREATE TABLE IF NOT EXISTS `wp_dynamic_widgets` (
`id` int(11) NOT NULL,
  `widget_id` varchar(60) NOT NULL,
  `maintype` varchar(50) NOT NULL,
  `name` varchar(40) NOT NULL,
  `value` longtext NOT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=264 ;

--
-- Dumping data for table `wp_dynamic_widgets`
--

INSERT INTO `wp_dynamic_widgets` (`id`, `widget_id`, `maintype`, `name`, `value`) VALUES
(40, 'flexipages-4', 'page', 'default', '1'),
(41, 'flexipages-4', 'page', '38', '0'),
(42, 'flexipages-4', 'page', '12', '0'),
(43, 'flexipages-4', 'page', '4', '0'),
(44, 'flexipages-4', 'page', '8', '0'),
(45, 'flexipages-4', 'page', '2', '0'),
(46, 'flexipages-4', 'page', '6', '0'),
(47, 'flexipages-4', 'page', '10', '0'),
(48, 'flexipages-4', 'page-childs', 'default', '1'),
(49, 'flexipages-4', 'page-childs', '38', '0'),
(50, 'flexipages-4', 'page-childs', '12', '0'),
(51, 'flexipages-4', 'page-childs', '4', '0'),
(52, 'flexipages-4', 'page-childs', '8', '0'),
(53, 'flexipages-4', 'page-childs', '2', '0'),
(54, 'flexipages-4', 'page-childs', '6', '0'),
(55, 'flexipages-4', 'page-childs', '10', '0'),
(90, 'flexipages-5', 'page', 'default', '1'),
(91, 'flexipages-5', 'page', '38', '0'),
(92, 'flexipages-5', 'page', '12', '0'),
(93, 'flexipages-5', 'page', '4', '0'),
(94, 'flexipages-5', 'page', '8', '0'),
(95, 'flexipages-5', 'page', '2', '0'),
(96, 'flexipages-5', 'page', '6', '0'),
(97, 'flexipages-5', 'page', '10', '0'),
(98, 'flexipages-5', 'page-childs', 'default', '1'),
(99, 'flexipages-5', 'page-childs', '38', '0'),
(100, 'flexipages-5', 'page-childs', '12', '0'),
(101, 'flexipages-5', 'page-childs', '4', '0'),
(102, 'flexipages-5', 'page-childs', '8', '0'),
(103, 'flexipages-5', 'page-childs', '2', '0'),
(104, 'flexipages-5', 'page-childs', '6', '0'),
(105, 'flexipages-5', 'page-childs', '10', '0'),
(122, 'category-posts-4', 'page', 'default', '1'),
(123, 'category-posts-4', 'page', '38', '0'),
(124, 'category-posts-4', 'page', '12', '0'),
(125, 'category-posts-4', 'page', '4', '0'),
(126, 'category-posts-4', 'page', '8', '0'),
(127, 'category-posts-4', 'page', '2', '0'),
(128, 'category-posts-4', 'page', '6', '0'),
(129, 'category-posts-4', 'page', '10', '0'),
(130, 'category-posts-4', 'page-childs', 'default', '1'),
(131, 'category-posts-4', 'page-childs', '38', '0'),
(132, 'category-posts-4', 'page-childs', '12', '0'),
(133, 'category-posts-4', 'page-childs', '4', '0'),
(134, 'category-posts-4', 'page-childs', '8', '0'),
(135, 'category-posts-4', 'page-childs', '2', '0'),
(136, 'category-posts-4', 'page-childs', '6', '0'),
(137, 'category-posts-4', 'page-childs', '10', '0'),
(138, 'category-posts-2', 'page', 'default', '1'),
(139, 'category-posts-2', 'page', '38', '0'),
(140, 'category-posts-2', 'page', '12', '0'),
(141, 'category-posts-2', 'page', '8', '0'),
(142, 'category-posts-2', 'page', '2', '0'),
(143, 'category-posts-2', 'page', '6', '0'),
(144, 'category-posts-2', 'page', '10', '0'),
(145, 'category-posts-2', 'page', '14', '0'),
(146, 'category-posts-2', 'page-childs', 'default', '1'),
(147, 'category-posts-2', 'page-childs', '38', '0'),
(148, 'category-posts-2', 'page-childs', '12', '0'),
(149, 'category-posts-2', 'page-childs', '8', '0'),
(150, 'category-posts-2', 'page-childs', '2', '0'),
(151, 'category-posts-2', 'page-childs', '6', '0'),
(152, 'category-posts-2', 'page-childs', '10', '0'),
(153, 'category-posts-2', 'page-childs', '14', '0'),
(154, 'category-posts-3', 'page', 'default', '1'),
(155, 'category-posts-3', 'page', '38', '0'),
(156, 'category-posts-3', 'page', '12', '0'),
(157, 'category-posts-3', 'page', '4', '0'),
(158, 'category-posts-3', 'page', '8', '0'),
(159, 'category-posts-3', 'page', '2', '0'),
(160, 'category-posts-3', 'page', '10', '0'),
(161, 'category-posts-3', 'page', '14', '0'),
(162, 'category-posts-3', 'page-childs', 'default', '1'),
(163, 'category-posts-3', 'page-childs', '38', '0'),
(164, 'category-posts-3', 'page-childs', '12', '0'),
(165, 'category-posts-3', 'page-childs', '4', '0'),
(166, 'category-posts-3', 'page-childs', '8', '0'),
(167, 'category-posts-3', 'page-childs', '2', '0'),
(168, 'category-posts-3', 'page-childs', '10', '0'),
(169, 'category-posts-3', 'page-childs', '14', '0'),
(186, 'flexipages-6', 'page', 'default', '1'),
(187, 'flexipages-6', 'page', '38', '0'),
(188, 'flexipages-6', 'page', '12', '0'),
(189, 'flexipages-6', 'page', '4', '0'),
(190, 'flexipages-6', 'page', '8', '0'),
(191, 'flexipages-6', 'page', '2', '0'),
(192, 'flexipages-6', 'page', '6', '0'),
(193, 'flexipages-6', 'page', '14', '0'),
(194, 'flexipages-6', 'page-childs', 'default', '1'),
(195, 'flexipages-6', 'page-childs', '38', '0'),
(196, 'flexipages-6', 'page-childs', '12', '0'),
(197, 'flexipages-6', 'page-childs', '4', '0'),
(198, 'flexipages-6', 'page-childs', '8', '0'),
(199, 'flexipages-6', 'page-childs', '2', '0'),
(200, 'flexipages-6', 'page-childs', '6', '0'),
(201, 'flexipages-6', 'page-childs', '14', '0'),
(202, 'flexipages-3', 'page', 'default', '1'),
(203, 'flexipages-3', 'page', '38', '0'),
(204, 'flexipages-3', 'page', '12', '0'),
(205, 'flexipages-3', 'page', '8', '0'),
(206, 'flexipages-3', 'page', '2', '0'),
(207, 'flexipages-3', 'page', '6', '0'),
(208, 'flexipages-3', 'page', '10', '0'),
(209, 'flexipages-3', 'page', '14', '0'),
(210, 'flexipages-3', 'page-childs', 'default', '1'),
(211, 'flexipages-3', 'page-childs', '38', '0'),
(212, 'flexipages-3', 'page-childs', '12', '0'),
(213, 'flexipages-3', 'page-childs', '8', '0'),
(214, 'flexipages-3', 'page-childs', '2', '0'),
(215, 'flexipages-3', 'page-childs', '6', '0'),
(216, 'flexipages-3', 'page-childs', '10', '0'),
(217, 'flexipages-3', 'page-childs', '14', '0'),
(248, 'flexipages-7', 'page', 'default', '1'),
(249, 'flexipages-7', 'page', '38', '0'),
(250, 'flexipages-7', 'page', '12', '0'),
(251, 'flexipages-7', 'page', '8', '0'),
(252, 'flexipages-7', 'page', '2', '0'),
(253, 'flexipages-7', 'page', '6', '0'),
(254, 'flexipages-7', 'page', '10', '0'),
(255, 'flexipages-7', 'page', '14', '0'),
(256, 'flexipages-7', 'page-childs', 'default', '1'),
(257, 'flexipages-7', 'page-childs', '38', '0'),
(258, 'flexipages-7', 'page-childs', '12', '0'),
(259, 'flexipages-7', 'page-childs', '8', '0'),
(260, 'flexipages-7', 'page-childs', '2', '0'),
(261, 'flexipages-7', 'page-childs', '6', '0'),
(262, 'flexipages-7', 'page-childs', '10', '0'),
(263, 'flexipages-7', 'page-childs', '14', '0');

-- --------------------------------------------------------

--
-- Table structure for table `wp_links`
--

CREATE TABLE IF NOT EXISTS `wp_links` (
`link_id` bigint(20) unsigned NOT NULL,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `wp_options`
--

CREATE TABLE IF NOT EXISTS `wp_options` (
`option_id` bigint(20) unsigned NOT NULL,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes'
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=543 ;

--
-- Dumping data for table `wp_options`
--

INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'http://localhost/ittutorial', 'yes'),
(2, 'home', 'http://localhost/ittutorial', 'yes'),
(3, 'blogname', 'ITTutorial', 'yes'),
(4, 'blogdescription', 'Java Learning Center', 'yes'),
(5, 'users_can_register', '0', 'yes'),
(6, 'admin_email', 'dipak25mishra@gmail.com', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'open', 'yes'),
(21, 'default_pingback_flag', '1', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'F j, Y', 'yes'),
(24, 'time_format', 'g:i a', 'yes'),
(25, 'links_updated_date_format', 'F j, Y g:i a', 'yes'),
(26, 'comment_moderation', '0', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%postname%/', 'yes'),
(29, 'gzipcompression', '0', 'yes'),
(30, 'hack_file', '0', 'yes'),
(31, 'blog_charset', 'UTF-8', 'yes'),
(32, 'moderation_keys', '', 'no'),
(33, 'active_plugins', 'a:7:{i:0;s:41:"advanced-post-list/advanced-post-list.php";i:1;s:43:"all-in-one-seo-pack/all_in_one_seo_pack.php";i:2;s:28:"category-posts/cat-posts.php";i:3;s:35:"display-widgets/display-widgets.php";i:4;s:35:"dynamic-widgets/dynamic-widgets.php";i:5;s:41:"flexi-pages-widget/flexi-pages-widget.php";i:6;s:84:"wordpress-plugin-for-simple-google-adsense-insertion/WP-Simple-Adsense-Insertion.php";}', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(36, 'advanced_edit', '0', 'yes'),
(37, 'comment_max_links', '2', 'yes'),
(38, 'gmt_offset', '0', 'yes'),
(39, 'default_email_category', '1', 'yes'),
(40, 'recently_edited', 'a:5:{i:0;s:69:"C:\\xampp\\htdocs\\ittutorial/wp-content/themes/writing-board/footer.php";i:1;s:68:"C:\\xampp\\htdocs\\ittutorial/wp-content/themes/writing-board/style.css";i:2;s:114:"C:\\Personal\\wamp\\www\\ittutorial/wp-content/plugins/advanced-featured-page-widget/advanced-featured-page-widget.php";i:3;s:92:"C:\\Personal\\wamp\\www\\ittutorial/wp-content/plugins/advanced-post-list/advanced-post-list.php";i:4;s:94:"C:\\Personal\\wamp\\www\\ittutorial/wp-content/plugins/all-in-one-seo-pack/all_in_one_seo_pack.php";}', 'no'),
(41, 'template', 'writing-board', 'yes'),
(42, 'stylesheet', 'writing-board', 'yes'),
(43, 'comment_whitelist', '1', 'yes'),
(44, 'blacklist_keys', '', 'no'),
(45, 'comment_registration', '0', 'yes'),
(46, 'html_type', 'text/html', 'yes'),
(47, 'use_trackback', '0', 'yes'),
(48, 'default_role', 'subscriber', 'yes'),
(49, 'db_version', '30135', 'yes'),
(50, 'uploads_use_yearmonth_folders', '1', 'yes'),
(51, 'upload_path', '', 'yes'),
(52, 'blog_public', '1', 'yes'),
(53, 'default_link_category', '2', 'yes'),
(54, 'show_on_front', 'page', 'yes'),
(55, 'tag_base', '', 'yes'),
(56, 'show_avatars', '1', 'yes'),
(57, 'avatar_rating', 'G', 'yes'),
(58, 'upload_url_path', '', 'yes'),
(59, 'thumbnail_size_w', '150', 'yes'),
(60, 'thumbnail_size_h', '150', 'yes'),
(61, 'thumbnail_crop', '1', 'yes'),
(62, 'medium_size_w', '300', 'yes'),
(63, 'medium_size_h', '300', 'yes'),
(64, 'avatar_default', 'mystery', 'yes'),
(65, 'large_size_w', '1024', 'yes'),
(66, 'large_size_h', '1024', 'yes'),
(67, 'image_default_link_type', 'file', 'yes'),
(68, 'image_default_size', '', 'yes'),
(69, 'image_default_align', '', 'yes'),
(70, 'close_comments_for_old_posts', '0', 'yes'),
(71, 'close_comments_days_old', '14', 'yes'),
(72, 'thread_comments', '1', 'yes'),
(73, 'thread_comments_depth', '5', 'yes'),
(74, 'page_comments', '0', 'yes'),
(75, 'comments_per_page', '50', 'yes'),
(76, 'default_comments_page', 'newest', 'yes'),
(77, 'comment_order', 'asc', 'yes'),
(78, 'sticky_posts', 'a:0:{}', 'yes'),
(79, 'widget_categories', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(80, 'widget_text', 'a:3:{i:2;a:6:{s:5:"title";s:7:"Message";s:4:"text";s:17:"Malay Ranjan Hota";s:6:"filter";b:0;s:10:"dw_include";i:0;s:9:"dw_logged";s:0:"";s:9:"other_ids";s:0:"";}i:3;a:6:{s:5:"title";s:13:"Advertisement";s:4:"text";s:0:"";s:6:"filter";b:0;s:10:"dw_include";i:0;s:9:"dw_logged";s:0:"";s:9:"other_ids";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(81, 'widget_rss', 'a:0:{}', 'yes'),
(82, 'uninstall_plugins', 'a:1:{s:41:"advanced-post-list/advanced-post-list.php";a:2:{i:0;s:7:"APLCore";i:1;s:21:"APL_handler_uninstall";}}', 'no'),
(83, 'timezone_string', '', 'yes'),
(84, 'page_for_posts', '0', 'yes'),
(85, 'page_on_front', '2', 'yes'),
(86, 'default_post_format', '0', 'yes'),
(87, 'link_manager_enabled', '0', 'yes'),
(88, 'initial_db_version', '30133', 'yes'),
(89, 'wp_user_roles', 'a:5:{s:13:"administrator";a:2:{s:4:"name";s:13:"Administrator";s:12:"capabilities";a:63:{s:13:"switch_themes";b:1;s:11:"edit_themes";b:1;s:16:"activate_plugins";b:1;s:12:"edit_plugins";b:1;s:10:"edit_users";b:1;s:10:"edit_files";b:1;s:14:"manage_options";b:1;s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:6:"import";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:8:"level_10";b:1;s:7:"level_9";b:1;s:7:"level_8";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:12:"delete_users";b:1;s:12:"create_users";b:1;s:17:"unfiltered_upload";b:1;s:14:"edit_dashboard";b:1;s:14:"update_plugins";b:1;s:14:"delete_plugins";b:1;s:15:"install_plugins";b:1;s:13:"update_themes";b:1;s:14:"install_themes";b:1;s:11:"update_core";b:1;s:10:"list_users";b:1;s:12:"remove_users";b:1;s:9:"add_users";b:1;s:13:"promote_users";b:1;s:18:"edit_theme_options";b:1;s:13:"delete_themes";b:1;s:6:"export";b:1;s:15:"wpseo_bulk_edit";b:1;}}s:6:"editor";a:2:{s:4:"name";s:6:"Editor";s:12:"capabilities";a:35:{s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:15:"wpseo_bulk_edit";b:1;}}s:6:"author";a:2:{s:4:"name";s:6:"Author";s:12:"capabilities";a:11:{s:12:"upload_files";b:1;s:10:"edit_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:4:"read";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;s:22:"delete_published_posts";b:1;s:15:"wpseo_bulk_edit";b:1;}}s:11:"contributor";a:2:{s:4:"name";s:11:"Contributor";s:12:"capabilities";a:5:{s:10:"edit_posts";b:1;s:4:"read";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;}}s:10:"subscriber";a:2:{s:4:"name";s:10:"Subscriber";s:12:"capabilities";a:2:{s:4:"read";b:1;s:7:"level_0";b:1;}}}', 'yes'),
(90, 'widget_search', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(91, 'widget_recent-posts', 'a:2:{i:2;a:6:{s:5:"title";s:11:"Latest Post";s:6:"number";i:5;s:9:"show_date";b:0;s:10:"dw_include";i:0;s:9:"dw_logged";s:0:"";s:9:"other_ids";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(92, 'widget_recent-comments', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(93, 'widget_archives', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(94, 'widget_meta', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(95, 'sidebars_widgets', 'a:8:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-2";a:2:{i:0;s:14:"recent-posts-2";i:1;s:6:"text-3";}s:9:"sidebar-1";a:8:{i:0;s:12:"flexipages-7";i:1;s:12:"flexipages-4";i:2;s:12:"flexipages-5";i:3;s:12:"flexipages-6";i:4;s:16:"category-posts-4";i:5;s:7:"pages-3";i:6;s:16:"category-posts-2";i:7;s:16:"category-posts-3";}s:9:"sidebar-3";a:1:{i:0;s:10:"calendar-3";}s:9:"sidebar-4";a:1:{i:0;s:10:"calendar-2";}s:9:"sidebar-5";a:1:{i:0;s:11:"tag_cloud-2";}s:9:"sidebar-6";a:1:{i:0;s:6:"text-2";}s:13:"array_version";i:3;}', 'yes'),
(96, '_transient_random_seed', 'f42ffc6281688d7b11cce8d655d3306a', 'yes'),
(97, 'logged_in_key', '$rem/?5dHU)m=E@K9=y@n=EOHuzeLgI?o{y]4h-Q&-bV`qw1E5?/G;^M~nO;#,X0', 'yes'),
(98, 'logged_in_salt', '(%x%k{$dPQTZ`V_a UG>szId#c[lNC=>O=D#9r57C9R^L{/b0[tXT+pJ;5}()ffH', 'yes'),
(99, 'cron', 'a:5:{i:1457859849;a:1:{s:19:"wp_scheduled_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1457894152;a:1:{s:30:"wp_scheduled_auto_draft_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1457900604;a:1:{s:14:"yoast_tracking";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1457902672;a:3:{s:17:"wp_update_plugins";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:16:"wp_update_themes";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:16:"wp_version_check";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}}s:7:"version";i:2;}', 'yes'),
(102, 'auth_key', 'fG&5t;`c?*8O$GW_H^Q4d}GV8FCBRA3,bN;}!j`[z.AkI)R@%v%%bDp&OkjE|0!t', 'yes'),
(103, 'auth_salt', '0O?-?Lr9Ux/@d3;(A]aOD:Q@bSkW-ccO8}[*vX[SPP]>y_!Vk!v{&/y07SC30,,F', 'yes'),
(104, 'nonce_key', '?O1w?:/+E^kYJpb.&p+:?Fk1P1$L:aDQQ7g0yhi]4GtqZAuq_.Uio+*8qcTE3Jw&', 'yes'),
(105, 'nonce_salt', '*y=rW]YpiSLs4m7L6V3M8%,DvMcj]6jd?=FQ97CXf*%lQ4p0 .o(l@f&9m=Oeti_', 'yes'),
(117, 'theme_mods_twentyfifteen', 'a:1:{s:16:"sidebars_widgets";a:2:{s:4:"time";i:1424941499;s:4:"data";a:2:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}}}}', 'yes'),
(118, 'current_theme', 'ITTutorial', 'yes'),
(119, 'theme_mods_writing-board', 'a:3:{i:0;b:0;s:18:"nav_menu_locations";a:1:{s:9:"main-menu";i:2;}s:16:"background_color";s:6:"bbe8ff";}', 'yes'),
(120, 'theme_switched', '', 'yes'),
(124, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:"auto_add";a:0:{}}', 'yes'),
(125, 'widget_pages', 'a:2:{i:3;a:11:{s:5:"title";s:4:"JAVA";s:6:"sortby";s:10:"post_title";s:7:"exclude";s:0:"";s:10:"dw_include";i:1;s:9:"dw_logged";s:0:"";s:9:"other_ids";s:0:"";s:6:"page-4";i:1;s:7:"page-24";i:1;s:7:"page-28";i:1;s:7:"page-22";i:1;s:7:"page-26";i:1;}s:12:"_multiwidget";i:1;}', 'yes'),
(126, 'widget_calendar', 'a:3:{i:2;a:1:{s:5:"title";s:8:"Calender";}i:3;a:1:{s:5:"title";s:8:"Calender";}s:12:"_multiwidget";i:1;}', 'yes'),
(127, 'widget_tag_cloud', 'a:2:{i:2;a:2:{s:5:"title";s:3:"TAG";s:8:"taxonomy";s:8:"post_tag";}s:12:"_multiwidget";i:1;}', 'yes'),
(132, 'recently_activated', 'a:0:{}', 'yes'),
(184, 'mkrdip_cat_post_thumb_sizes', 'a:3:{s:16:"category-posts-2";a:2:{i:0;s:0:"";i:1;s:0:"";}s:16:"category-posts-3";a:2:{i:0;s:0:"";i:1;s:0:"";}s:16:"category-posts-4";a:2:{i:0;s:0:"";i:1;s:0:"";}}', 'yes'),
(185, 'widget_category-posts', 'a:4:{i:2;a:10:{s:5:"title";s:12:"Java Program";s:3:"cat";s:1:"3";s:3:"num";s:2:"10";s:7:"sort_by";s:4:"date";s:14:"excerpt_length";s:0:"";s:7:"thumb_w";s:0:"";s:7:"thumb_h";s:0:"";s:9:"dw_logged";s:0:"";s:10:"dw_include";i:0;s:9:"other_ids";s:0:"";}i:3;a:10:{s:5:"title";s:15:"Servlet Program";s:3:"cat";s:1:"4";s:3:"num";s:2:"10";s:7:"sort_by";s:4:"date";s:14:"excerpt_length";s:0:"";s:7:"thumb_w";s:0:"";s:7:"thumb_h";s:0:"";s:9:"dw_logged";s:0:"";s:10:"dw_include";i:0;s:9:"other_ids";s:0:"";}i:4;a:10:{s:5:"title";s:15:"RestFul Program";s:3:"cat";s:1:"6";s:3:"num";s:1:"0";s:7:"sort_by";s:4:"date";s:14:"excerpt_length";s:0:"";s:7:"thumb_w";s:0:"";s:7:"thumb_h";s:0:"";s:9:"dw_logged";s:0:"";s:10:"dw_include";i:0;s:9:"other_ids";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(217, 'page_widget_version', '2.6', 'yes'),
(218, 'widget_advanced-featured-page-widget', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(219, 'flexipages_widget', 'a:4:{i:4;a:14:{s:5:"title";s:12:"Web Services";s:11:"sort_column";s:10:"menu_order";s:10:"sort_order";s:3:"ASC";s:9:"exinclude";s:7:"include";s:16:"exinclude_values";s:11:"50,45,47,54";s:19:"show_subpages_check";s:0:"";s:13:"show_subpages";s:1:"0";s:9:"hierarchy";s:0:"";s:5:"depth";s:1:"0";s:15:"show_home_check";s:0:"";s:9:"show_home";s:4:"Home";s:9:"show_date";s:0:"";s:11:"date_format";s:0:"";s:8:"dropdown";s:0:"";}i:5;a:14:{s:5:"title";s:19:"RESTFUL WEB SERVICE";s:11:"sort_column";s:10:"menu_order";s:10:"sort_order";s:3:"ASC";s:9:"exinclude";s:7:"include";s:16:"exinclude_values";s:17:"82,71,66,78,63,80";s:19:"show_subpages_check";s:0:"";s:13:"show_subpages";s:1:"0";s:9:"hierarchy";s:0:"";s:5:"depth";s:1:"0";s:15:"show_home_check";s:0:"";s:9:"show_home";s:4:"Home";s:9:"show_date";s:0:"";s:11:"date_format";s:0:"";s:8:"dropdown";s:0:"";}i:6;a:14:{s:5:"title";s:11:"Spring Core";s:11:"sort_column";s:10:"menu_order";s:10:"sort_order";s:3:"ASC";s:9:"exinclude";s:7:"include";s:16:"exinclude_values";s:2:"10";s:19:"show_subpages_check";s:2:"on";s:13:"show_subpages";s:2:"-3";s:9:"hierarchy";s:2:"on";s:5:"depth";s:1:"0";s:15:"show_home_check";s:0:"";s:9:"show_home";s:4:"Home";s:9:"show_date";s:0:"";s:11:"date_format";s:0:"";s:8:"dropdown";s:0:"";}i:7;a:14:{s:5:"title";s:9:"Core Java";s:11:"sort_column";s:10:"menu_order";s:10:"sort_order";s:3:"ASC";s:9:"exinclude";s:7:"include";s:16:"exinclude_values";s:15:"4,24,28,22,26,8";s:19:"show_subpages_check";s:0:"";s:13:"show_subpages";s:1:"0";s:9:"hierarchy";s:0:"";s:5:"depth";s:1:"0";s:15:"show_home_check";s:0:"";s:9:"show_home";s:4:"Home";s:9:"show_date";s:0:"";s:11:"date_format";s:0:"";s:8:"dropdown";s:0:"";}}', 'yes'),
(235, 'wpseo', 'a:18:{s:14:"blocking_files";a:0:{}s:26:"ignore_blog_public_warning";b:0;s:31:"ignore_meta_description_warning";b:0;s:20:"ignore_page_comments";b:0;s:16:"ignore_permalink";b:0;s:11:"ignore_tour";b:0;s:15:"ms_defaults_set";b:0;s:23:"theme_description_found";s:0:"";s:21:"theme_has_description";b:0;s:19:"tracking_popup_done";b:1;s:7:"version";s:7:"1.7.3.3";s:11:"alexaverify";s:0:"";s:20:"disableadvanced_meta";b:1;s:12:"googleverify";s:0:"";s:8:"msverify";s:0:"";s:15:"pinterestverify";s:0:"";s:12:"yandexverify";s:0:"";s:14:"yoast_tracking";b:1;}', 'yes'),
(236, 'wpseo_permalinks', 'a:10:{s:15:"cleanpermalinks";b:0;s:24:"cleanpermalink-extravars";s:0:"";s:29:"cleanpermalink-googlecampaign";b:0;s:31:"cleanpermalink-googlesitesearch";b:0;s:15:"cleanreplytocom";b:0;s:10:"cleanslugs";b:1;s:15:"force_transport";s:7:"default";s:18:"redirectattachment";b:0;s:17:"stripcategorybase";b:0;s:13:"trailingslash";b:0;}', 'yes'),
(237, 'wpseo_titles', 'a:58:{s:10:"title_test";i:0;s:17:"forcerewritetitle";b:0;s:9:"separator";s:7:"sc-dash";s:14:"hide-feedlinks";b:0;s:12:"hide-rsdlink";b:0;s:14:"hide-shortlink";b:0;s:16:"hide-wlwmanifest";b:0;s:5:"noodp";b:0;s:6:"noydir";b:0;s:15:"usemetakeywords";b:0;s:16:"title-home-wpseo";s:42:"%%sitename%% %%page%% %%sep%% %%sitedesc%%";s:18:"title-author-wpseo";s:41:"%%name%%, Author at %%sitename%% %%page%%";s:19:"title-archive-wpseo";s:38:"%%date%% %%page%% %%sep%% %%sitename%%";s:18:"title-search-wpseo";s:63:"You searched for %%searchphrase%% %%page%% %%sep%% %%sitename%%";s:15:"title-404-wpseo";s:35:"Page not found %%sep%% %%sitename%%";s:19:"metadesc-home-wpseo";s:0:"";s:21:"metadesc-author-wpseo";s:0:"";s:22:"metadesc-archive-wpseo";s:0:"";s:18:"metakey-home-wpseo";s:0:"";s:20:"metakey-author-wpseo";s:0:"";s:22:"noindex-subpages-wpseo";b:0;s:20:"noindex-author-wpseo";b:0;s:21:"noindex-archive-wpseo";b:1;s:14:"disable-author";b:0;s:12:"disable-date";b:0;s:10:"title-post";s:39:"%%title%% %%page%% %%sep%% %%sitename%%";s:13:"metadesc-post";s:0:"";s:12:"metakey-post";s:0:"";s:12:"noindex-post";b:0;s:13:"showdate-post";b:0;s:16:"hideeditbox-post";b:0;s:10:"title-page";s:39:"%%title%% %%page%% %%sep%% %%sitename%%";s:13:"metadesc-page";s:0:"";s:12:"metakey-page";s:0:"";s:12:"noindex-page";b:0;s:13:"showdate-page";b:0;s:16:"hideeditbox-page";b:0;s:16:"title-attachment";s:39:"%%title%% %%page%% %%sep%% %%sitename%%";s:19:"metadesc-attachment";s:0:"";s:18:"metakey-attachment";s:0:"";s:18:"noindex-attachment";b:0;s:19:"showdate-attachment";b:0;s:22:"hideeditbox-attachment";b:0;s:18:"title-tax-category";s:53:"%%term_title%% Archives %%page%% %%sep%% %%sitename%%";s:21:"metadesc-tax-category";s:0:"";s:20:"metakey-tax-category";s:0:"";s:24:"hideeditbox-tax-category";b:0;s:20:"noindex-tax-category";b:0;s:18:"title-tax-post_tag";s:53:"%%term_title%% Archives %%page%% %%sep%% %%sitename%%";s:21:"metadesc-tax-post_tag";s:0:"";s:20:"metakey-tax-post_tag";s:0:"";s:24:"hideeditbox-tax-post_tag";b:0;s:20:"noindex-tax-post_tag";b:0;s:21:"title-tax-post_format";s:53:"%%term_title%% Archives %%page%% %%sep%% %%sitename%%";s:24:"metadesc-tax-post_format";s:0:"";s:23:"metakey-tax-post_format";s:0:"";s:27:"hideeditbox-tax-post_format";b:0;s:23:"noindex-tax-post_format";b:1;}', 'yes'),
(238, 'wpseo_social', 'a:15:{s:9:"fb_admins";a:0:{}s:6:"fbapps";a:0:{}s:12:"fbconnectkey";s:32:"791acfaf541db262c5f758f5ee0cb0f4";s:13:"facebook_site";s:0:"";s:16:"og_default_image";s:0:"";s:18:"og_frontpage_title";s:0:"";s:17:"og_frontpage_desc";s:0:"";s:18:"og_frontpage_image";s:0:"";s:9:"opengraph";b:1;s:10:"googleplus";b:0;s:14:"plus-publisher";s:0:"";s:7:"twitter";b:0;s:12:"twitter_site";s:0:"";s:17:"twitter_card_type";s:7:"summary";s:10:"fbadminapp";i:0;}', 'yes'),
(239, 'wpseo_rss', 'a:2:{s:9:"rssbefore";s:0:"";s:8:"rssafter";s:53:"The post %%POSTLINK%% appeared first on %%BLOGLINK%%.";}', 'yes'),
(240, 'wpseo_internallinks', 'a:10:{s:20:"breadcrumbs-404crumb";s:25:"Error 404: Page not found";s:23:"breadcrumbs-blog-remove";b:0;s:20:"breadcrumbs-boldlast";b:0;s:25:"breadcrumbs-archiveprefix";s:12:"Archives for";s:18:"breadcrumbs-enable";b:0;s:16:"breadcrumbs-home";s:4:"Home";s:18:"breadcrumbs-prefix";s:0:"";s:24:"breadcrumbs-searchprefix";s:16:"You searched for";s:15:"breadcrumbs-sep";s:7:"&raquo;";s:23:"post_types-post-maintax";i:0;}', 'yes'),
(241, 'wpseo_xml', 'a:17:{s:22:"disable_author_sitemap";b:1;s:22:"disable_author_noposts";b:1;s:16:"enablexmlsitemap";b:1;s:16:"entries-per-page";i:1000;s:14:"xml_ping_yahoo";b:0;s:12:"xml_ping_ask";b:0;s:38:"user_role-administrator-not_in_sitemap";b:0;s:31:"user_role-editor-not_in_sitemap";b:0;s:31:"user_role-author-not_in_sitemap";b:0;s:36:"user_role-contributor-not_in_sitemap";b:0;s:35:"user_role-subscriber-not_in_sitemap";b:0;s:30:"post_types-post-not_in_sitemap";b:0;s:30:"post_types-page-not_in_sitemap";b:0;s:36:"post_types-attachment-not_in_sitemap";b:1;s:34:"taxonomies-category-not_in_sitemap";b:0;s:34:"taxonomies-post_tag-not_in_sitemap";b:0;s:37:"taxonomies-post_format-not_in_sitemap";b:0;}', 'yes'),
(243, 'aioseop_options', 'a:87:{s:12:"aiosp_donate";N;s:16:"aiosp_home_title";N;s:22:"aiosp_home_description";s:0:"";s:20:"aiosp_togglekeywords";i:0;s:19:"aiosp_home_keywords";N;s:9:"aiosp_can";i:1;s:30:"aiosp_no_paged_canonical_links";i:0;s:31:"aiosp_customize_canonical_links";i:0;s:22:"aiosp_can_set_protocol";s:4:"auto";s:20:"aiosp_rewrite_titles";i:1;s:20:"aiosp_force_rewrites";i:1;s:24:"aiosp_use_original_title";i:0;s:16:"aiosp_cap_titles";i:1;s:14:"aiosp_cap_cats";i:1;s:23:"aiosp_page_title_format";s:27:"%page_title% | %blog_title%";s:23:"aiosp_post_title_format";s:27:"%post_title% | %blog_title%";s:27:"aiosp_category_title_format";s:31:"%category_title% | %blog_title%";s:26:"aiosp_archive_title_format";s:30:"%archive_title% | %blog_title%";s:23:"aiosp_date_title_format";s:21:"%date% | %blog_title%";s:25:"aiosp_author_title_format";s:23:"%author% | %blog_title%";s:22:"aiosp_tag_title_format";s:20:"%tag% | %blog_title%";s:25:"aiosp_search_title_format";s:23:"%search% | %blog_title%";s:24:"aiosp_description_format";s:13:"%description%";s:22:"aiosp_404_title_format";s:33:"Nothing found for %request_words%";s:18:"aiosp_paged_format";s:14:" - Part %page%";s:17:"aiosp_enablecpost";s:2:"on";s:19:"aiosp_cpostadvanced";i:0;s:17:"aiosp_cpostactive";a:2:{i:0;s:4:"post";i:1;s:4:"page";}s:18:"aiosp_cpostnoindex";a:0:{}s:19:"aiosp_cpostnofollow";a:0:{}s:16:"aiosp_cpostnoodp";a:0:{}s:17:"aiosp_cpostnoydir";a:0:{}s:17:"aiosp_cposttitles";i:0;s:21:"aiosp_posttypecolumns";a:2:{i:0;s:4:"post";i:1;s:4:"page";}s:15:"aiosp_admin_bar";s:2:"on";s:23:"aiosp_custom_menu_order";s:2:"on";s:19:"aiosp_google_verify";s:0:"";s:17:"aiosp_bing_verify";s:0:"";s:22:"aiosp_pinterest_verify";s:0:"";s:22:"aiosp_google_publisher";s:0:"";s:28:"aiosp_google_disable_profile";i:0;s:29:"aiosp_google_sitelinks_search";N;s:28:"aiosp_google_author_advanced";i:0;s:28:"aiosp_google_author_location";a:1:{i:0;s:3:"all";}s:29:"aiosp_google_enable_publisher";s:2:"on";s:30:"aiosp_google_specify_publisher";N;s:20:"aiosp_google_connect";N;s:25:"aiosp_google_analytics_id";N;s:32:"aiosp_ga_use_universal_analytics";i:0;s:25:"aiosp_ga_advanced_options";s:2:"on";s:15:"aiosp_ga_domain";N;s:21:"aiosp_ga_multi_domain";i:0;s:21:"aiosp_ga_addl_domains";N;s:21:"aiosp_ga_anonymize_ip";N;s:28:"aiosp_ga_display_advertising";N;s:22:"aiosp_ga_exclude_users";N;s:29:"aiosp_ga_track_outbound_links";i:0;s:25:"aiosp_ga_link_attribution";i:0;s:27:"aiosp_ga_enhanced_ecommerce";i:0;s:20:"aiosp_use_categories";i:0;s:26:"aiosp_use_tags_as_keywords";i:1;s:32:"aiosp_dynamic_postspage_keywords";i:1;s:22:"aiosp_category_noindex";i:1;s:26:"aiosp_archive_date_noindex";i:1;s:28:"aiosp_archive_author_noindex";i:1;s:18:"aiosp_tags_noindex";i:0;s:20:"aiosp_search_noindex";i:0;s:17:"aiosp_404_noindex";i:0;s:23:"aiosp_paginated_noindex";i:0;s:24:"aiosp_paginated_nofollow";i:0;s:11:"aiosp_noodp";i:0;s:12:"aiosp_noydir";i:0;s:18:"aiosp_skip_excerpt";i:0;s:27:"aiosp_generate_descriptions";i:1;s:20:"aiosp_run_shortcodes";i:0;s:33:"aiosp_hide_paginated_descriptions";i:0;s:32:"aiosp_dont_truncate_descriptions";i:0;s:19:"aiosp_schema_markup";i:1;s:20:"aiosp_unprotect_meta";i:0;s:14:"aiosp_ex_pages";s:0:"";s:20:"aiosp_post_meta_tags";s:0:"";s:20:"aiosp_page_meta_tags";s:0:"";s:21:"aiosp_front_meta_tags";s:0:"";s:20:"aiosp_home_meta_tags";s:0:"";s:12:"aiosp_do_log";N;s:11:"aiosp_token";s:45:"4/gC8WMg__sSuHS3WBUou6SkSq8AqFjvbsgX-AW0TC-hs";s:12:"aiosp_secret";s:24:"d_5Tse3OPWFqHB6v-5PFypR2";}', 'yes'),
(255, 'theme_mods_nuvioliquid-green', 'a:3:{i:0;b:0;s:18:"nav_menu_locations";a:1:{s:7:"primary";i:2;}s:16:"sidebars_widgets";a:2:{s:4:"time";i:1425392381;s:4:"data";a:7:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:3:{i:0;s:7:"pages-2";i:1;s:14:"recent-posts-2";i:2;s:6:"text-3";}s:18:"orphaned_widgets_1";a:4:{i:0;s:12:"flexipages-3";i:1;s:7:"pages-3";i:2;s:16:"category-posts-2";i:3;s:16:"category-posts-3";}s:18:"orphaned_widgets_2";a:1:{i:0;s:10:"calendar-3";}s:18:"orphaned_widgets_3";a:1:{i:0;s:10:"calendar-2";}s:18:"orphaned_widgets_4";a:1:{i:0;s:11:"tag_cloud-2";}s:18:"orphaned_widgets_5";a:1:{i:0;s:6:"text-2";}}}}', 'yes'),
(258, 'theme_mods_kavya', 'a:6:{i:0;b:0;s:18:"nav_menu_locations";a:1:{s:7:"primary";i:2;}s:16:"background_color";s:6:"81d742";s:16:"header_textcolor";s:6:"ffffff";s:12:"header_image";s:13:"remove-header";s:16:"sidebars_widgets";a:2:{s:4:"time";i:1457729313;s:4:"data";a:7:{s:19:"wp_inactive_widgets";a:4:{i:0;s:12:"flexipages-4";i:1;s:12:"flexipages-5";i:2;s:7:"pages-4";i:3;s:6:"text-4";}s:9:"sidebar-1";a:3:{i:0;s:7:"pages-2";i:1;s:14:"recent-posts-2";i:2;s:6:"text-3";}s:18:"orphaned_widgets_1";a:4:{i:0;s:12:"flexipages-3";i:1;s:7:"pages-3";i:2;s:16:"category-posts-2";i:3;s:16:"category-posts-3";}s:18:"orphaned_widgets_2";a:1:{i:0;s:10:"calendar-3";}s:18:"orphaned_widgets_3";a:1:{i:0;s:10:"calendar-2";}s:18:"orphaned_widgets_4";a:1:{i:0;s:11:"tag_cloud-2";}s:18:"orphaned_widgets_5";a:1:{i:0;s:6:"text-2";}}}}', 'yes'),
(259, 'optionsframework', 'a:1:{s:2:"id";s:5:"kavya";}', 'yes'),
(281, 'APL_Options', 'a:5:{s:7:"version";s:6:"0.3.b8";s:15:"preset_db_names";a:1:{i:0;s:7:"default";}s:14:"delete_core_db";b:0;s:15:"jquery_ui_theme";s:8:"overcast";s:5:"error";s:0:"";}', 'yes'),
(282, 'APL_preset_db-default', 'O:14:"APLPresetDbObj":3:{s:15:"_preset_db_name";s:21:"APL_preset_db-default";s:10:"_preset_db";O:8:"stdClass":11:{s:20:"pageContentDivided_5";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:5;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:8:"<p><hr/>";s:8:"_content";s:98:"<a href="[post_permalink]">[post_title]</a> by [post_author] - [post_date]<br/>[post_content]<hr/>";s:6:"_after";s:4:"</p>";}s:20:"postExcerptDivided_5";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:5;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:8:"<p><hr/>";s:8:"_content";s:98:"<a href="[post_permalink]">[post_title]</a> by [post_author] - [post_date]<br/>[post_excerpt]<hr/>";s:6:"_after";s:4:"</p>";}s:23:"simpleAttachmentList_10";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:10;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:4:"<ul>";s:8:"_content";s:52:"<li><a href="[post_permalink]">[post_title]</a></li>";s:6:"_after";s:5:"</ul>";}s:8:"images_5";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:5;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:6:"<hr />";s:8:"_content";s:58:"<p><a href="[post_permalink]"><img src="[guid]" /></a></p>";s:6:"_after";s:6:"<hr />";}s:16:"pageDropdown_100";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:100;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:73:"<p><select id="postList_dropdown" style="width:200px; margin-right:20px">";s:8:"_content";s:54:"<option value="[post_permalink]">[post_title]</option>";s:6:"_after";s:158:"</ select> <input type="button" id="postList_goBtn" value="GO!" onClick="javascript:window.location=document.getElementById(''postList_dropdown'').value" /></p>";}s:16:"simplePostList_5";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:5;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:3:"<p>";s:8:"_content";s:56:"<a href="[post_permalink]">[post_title]</a>[final_end], ";s:6:"_after";s:4:"</p>";}s:17:"footerPageList_10";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:10;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:18:"<p align="center">";s:8:"_content";s:57:"<a href="[post_permalink]">[post_title]</a>[final_end] | ";s:6:"_after";s:4:"</p>";}s:22:"everythingNumbered_200";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:200;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:54:"<p>All my pages and posts (roll over for titles):<br/>";s:8:"_content";s:78:"<a href="[post_permalink]" title="[post_title]">[item_number]</a>[final_end], ";s:6:"_after";s:4:"</p>";}s:16:"everythingID_200";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:200;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:54:"<p>All my pages and posts (roll over for titles):<br/>";s:8:"_content";s:69:"<a href="[post_permalink]" title="[post_title]">[ID]</a>[final_end], ";s:6:"_after";s:4:"</p>";}s:8:"CSSTable";O:8:"stdClass":18:{s:12:"_postParents";a:0:{}s:8:"_postTax";O:8:"stdClass":0:{}s:10:"_listCount";i:9;s:12:"_listOrderBy";s:4:"date";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:1:{i:0;s:6:"public";}s:11:"_postStatus";a:1:{i:0;s:7:"publish";}s:9:"_userPerm";s:8:"readable";s:19:"_postAuthorOperator";s:4:"none";s:14:"_postAuthorIDs";a:0:{}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:0:{}s:22:"_listExcludeDuplicates";b:0;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:0:"";s:7:"_before";s:360:"<style>\n.k_ul{width: 320px;text-align:center;list-style-type:none;}\n.k_li{width: 100px; height:65px; float: left; padding:3px;}\n.k_a{border:1px solid #f00;display:block;text-decoration:none;font-weight:bold;width:100%; height:65px}\n.k_a:hover{border:1px solid #00f;background:#00f;color:#fff;}\n.k_a:active{background:#f00;color:#fff;}\n</style><ul class="k_ul">";s:8:"_content";s:77:"<li class="k_li"><a class="k_a" href="[post_permalink]">[post_title]</a></li>";s:6:"_after";s:5:"</ul>";}s:32:"APLPresetDbObj-jsonString_sample";O:8:"stdClass":18:{s:11:"_postParent";a:1:{i:0;s:1:"0";}s:8:"_postTax";O:8:"stdClass":1:{s:4:"post";O:8:"stdClass":1:{s:10:"taxonomies";O:8:"stdClass":2:{s:8:"category";O:8:"stdClass":4:{s:16:"require_taxonomy";b:0;s:13:"require_terms";b:0;s:13:"include_terms";b:0;s:5:"terms";a:1:{i:0;i:1;}}s:8:"post_tag";O:8:"stdClass":4:{s:16:"require_taxonomy";b:0;s:13:"require_terms";b:0;s:13:"include_terms";b:0;s:5:"terms";a:1:{i:0;i:0;}}}}}s:10:"_listCount";i:5;s:12:"_listOrderBy";s:6:"random";s:10:"_listOrder";s:4:"DESC";s:15:"_postVisibility";a:2:{i:0;s:6:"public";i:1;s:7:"private";}s:11:"_postStatus";a:3:{i:0;s:7:"publish";i:1;s:6:"future";i:2;s:7:"pending";}s:9:"_userPerm";s:8:"editable";s:19:"_postAuthorOperator";s:7:"include";s:14:"_postAuthorIDs";a:2:{i:0;i:1;i:1;i:2;}s:17:"_listIgnoreSticky";b:0;s:17:"_listExcludePosts";a:3:{i:0;i:1;i:1;i:2;i:2;i:3;}s:22:"_listExcludeDuplicates";b:1;s:19:"_postExcludeCurrent";b:1;s:5:"_exit";s:26:"<p>Exit Sample Message</p>";s:7:"_before";s:8:"<p><hr/>";s:8:"_content";s:98:"<a href="[post_permalink]">[post_title]</a> by [post_author] - [post_date]<br/>[post_excerpt]<hr/>";s:6:"_after";s:4:"</p>";}}s:7:"_delete";s:4:"true";}', 'yes'),
(324, 'dynwid_version', '1.5.9', 'yes'),
(325, 'dynwid_housekeeping_lastrun', '1457724519', 'yes'),
(477, 'db_upgraded', '', 'yes'),
(484, 'can_compress_scripts', '1', 'yes'),
(488, '_site_transient_timeout_browser_8f41a4e0570afe0b805298d787ea5a74', '1458333877', 'yes'),
(489, '_site_transient_browser_8f41a4e0570afe0b805298d787ea5a74', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:7:"Firefox";s:7:"version";s:4:"43.0";s:10:"update_url";s:23:"http://www.firefox.com/";s:7:"img_src";s:50:"http://s.wordpress.org/images/browsers/firefox.png";s:11:"img_src_ssl";s:49:"https://wordpress.org/images/browsers/firefox.png";s:15:"current_version";s:2:"16";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(495, '_site_transient_update_core', 'O:8:"stdClass":4:{s:7:"updates";a:4:{i:0;O:8:"stdClass":10:{s:8:"response";s:7:"upgrade";s:8:"download";s:59:"https://downloads.wordpress.org/release/wordpress-4.4.2.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:59:"https://downloads.wordpress.org/release/wordpress-4.4.2.zip";s:10:"no_content";s:70:"https://downloads.wordpress.org/release/wordpress-4.4.2-no-content.zip";s:11:"new_bundled";s:71:"https://downloads.wordpress.org/release/wordpress-4.4.2-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:5:"4.4.2";s:7:"version";s:5:"4.4.2";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"4.4";s:15:"partial_version";s:0:"";}i:1;O:8:"stdClass":12:{s:8:"response";s:10:"autoupdate";s:8:"download";s:59:"https://downloads.wordpress.org/release/wordpress-4.4.2.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:59:"https://downloads.wordpress.org/release/wordpress-4.4.2.zip";s:10:"no_content";s:70:"https://downloads.wordpress.org/release/wordpress-4.4.2-no-content.zip";s:11:"new_bundled";s:71:"https://downloads.wordpress.org/release/wordpress-4.4.2-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:5:"4.4.2";s:7:"version";s:5:"4.4.2";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"4.4";s:15:"partial_version";s:0:"";s:13:"support_email";s:26:"updatehelp42@wordpress.org";s:9:"new_files";s:1:"1";}i:2;O:8:"stdClass":12:{s:8:"response";s:10:"autoupdate";s:8:"download";s:59:"https://downloads.wordpress.org/release/wordpress-4.3.3.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:59:"https://downloads.wordpress.org/release/wordpress-4.3.3.zip";s:10:"no_content";s:70:"https://downloads.wordpress.org/release/wordpress-4.3.3-no-content.zip";s:11:"new_bundled";s:71:"https://downloads.wordpress.org/release/wordpress-4.3.3-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:5:"4.3.3";s:7:"version";s:5:"4.3.3";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"4.4";s:15:"partial_version";s:0:"";s:13:"support_email";s:26:"updatehelp42@wordpress.org";s:9:"new_files";s:1:"1";}i:3;O:8:"stdClass":12:{s:8:"response";s:10:"autoupdate";s:8:"download";s:59:"https://downloads.wordpress.org/release/wordpress-4.2.7.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:59:"https://downloads.wordpress.org/release/wordpress-4.2.7.zip";s:10:"no_content";s:70:"https://downloads.wordpress.org/release/wordpress-4.2.7-no-content.zip";s:11:"new_bundled";s:71:"https://downloads.wordpress.org/release/wordpress-4.2.7-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:5:"4.2.7";s:7:"version";s:5:"4.2.7";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"4.4";s:15:"partial_version";s:0:"";s:13:"support_email";s:26:"updatehelp42@wordpress.org";s:9:"new_files";s:1:"1";}}s:12:"last_checked";i:1457859676;s:15:"version_checked";s:6:"4.1.10";s:12:"translations";a:0:{}}', 'yes'),
(498, 'auto_core_update_notified', 'a:4:{s:4:"type";s:7:"success";s:5:"email";s:23:"dipak25mishra@gmail.com";s:7:"version";s:6:"4.1.10";s:9:"timestamp";i:1457729932;}', 'yes'),
(501, '_transient_timeout_aioseop_oauth_current', '1457735012', 'no'),
(502, '_transient_aioseop_oauth_current', '1', 'no'),
(509, '_transient_timeout_dw_details', '1458462400', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(510, '_transient_dw_details', 'a:4:{s:5:"pages";a:24:{i:0;O:7:"WP_Post":24:{s:2:"ID";i:24;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-27 19:13:37";s:13:"post_date_gmt";s:19:"2015-02-27 19:13:37";s:12:"post_content";s:7429:"<span class="Apple-converted-space"> </span>[wp_ad_camp_1]<span class="Apple-converted-space">\r\n</span>\r\n\r\nVariables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.\r\n\r\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.\r\n\r\nThere are two data types available in Java:\r\n<ul class="list">\r\n	<li>Primitive Data Types</li>\r\n	<li>Reference/Object Data Types</li>\r\n</ul>\r\n<h2>Primitive Data Types:</h2>\r\nThere are eight primitive data types supported by Java. Primitive data types are predefined by the language and named by a keyword. Let us now look into detail about the eight primitive data types.\r\n<h2>byte:</h2>\r\n<ul class="list">\r\n	<li>Byte data type is an 8-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -128 (-2^7)</li>\r\n	<li>Maximum value is 127 (inclusive)(2^7 -1)</li>\r\n	<li>Default value is 0</li>\r\n	<li>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.</li>\r\n	<li>Example: byte a = 100 , byte b = -50</li>\r\n</ul>\r\n<h2>short:</h2>\r\n<ul class="list">\r\n	<li>Short data type is a 16-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -32,768 (-2^15)</li>\r\n	<li>Maximum value is 32,767 (inclusive) (2^15 -1)</li>\r\n	<li>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int</li>\r\n	<li>Default value is 0.</li>\r\n	<li>Example: short s = 10000, short r = -20000</li>\r\n</ul>\r\n<h2>int:</h2>\r\n<ul class="list">\r\n	<li>Int data type is a 32-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is - 2,147,483,648.(-2^31)</li>\r\n	<li>Maximum value is 2,147,483,647(inclusive).(2^31 -1)</li>\r\n	<li>Int is generally used as the default data type for integral values unless there is a concern about memory.</li>\r\n	<li>The default value is 0.</li>\r\n	<li>Example: int a = 100000, int b = -200000</li>\r\n</ul>\r\n<h2>long:</h2>\r\n<ul class="list">\r\n	<li>Long data type is a 64-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -9,223,372,036,854,775,808.(-2^63)</li>\r\n	<li>Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)</li>\r\n	<li>This type is used when a wider range than int is needed.</li>\r\n	<li>Default value is 0L.</li>\r\n	<li>Example: long a = 100000L, int b = -200000L</li>\r\n</ul>\r\n<h2>float:</h2>\r\n<ul class="list">\r\n	<li>Float data type is a single-precision 32-bit IEEE 754 floating point.</li>\r\n	<li>Float is mainly used to save memory in large arrays of floating point numbers.</li>\r\n	<li>Default value is 0.0f.</li>\r\n	<li>Float data type is never used for precise values such as currency.</li>\r\n	<li>Example: float f1 = 234.5f</li>\r\n</ul>\r\n<h2>double:</h2>\r\n<ul class="list">\r\n	<li>double data type is a double-precision 64-bit IEEE 754 floating point.</li>\r\n	<li>This data type is generally used as the default data type for decimal values, generally the default choice.</li>\r\n	<li>Double data type should never be used for precise values such as currency.</li>\r\n	<li>Default value is 0.0d.</li>\r\n	<li>Example: double d1 = 123.4</li>\r\n</ul>\r\n<h2>boolean:</h2>\r\n<ul class="list">\r\n	<li>boolean data type represents one bit of information.</li>\r\n	<li>There are only two possible values: true and false.</li>\r\n	<li>This data type is used for simple flags that track true/false conditions.</li>\r\n	<li>Default value is false.</li>\r\n	<li>Example: boolean one = true</li>\r\n</ul>\r\n<h2>char:</h2>\r\n<ul class="list">\r\n	<li>char data type is a single 16-bit Unicode character.</li>\r\n	<li>Minimum value is ''\\u0000'' (or 0).</li>\r\n	<li>Maximum value is ''\\uffff'' (or 65,535 inclusive).</li>\r\n	<li>Char data type is used to store any character.</li>\r\n	<li>Example: char letterA =''A''</li>\r\n</ul>\r\n<h2>Reference Data Types:</h2>\r\n<ul class="list">\r\n	<li>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy etc.</li>\r\n	<li>Class objects, and various type of array variables come under reference data type.</li>\r\n	<li>Default value of any reference variable is null.</li>\r\n	<li>A reference variable can be used to refer to any object of the declared type or any compatible type.</li>\r\n	<li>Example: Animal animal = new Animal("giraffe");</li>\r\n</ul>\r\n<h2>Java Literals:</h2>\r\nA literal is a source code representation of a fixed value. They are represented directly in the code without any computation.\r\n\r\nLiterals can be assigned to any primitive type variable. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">byte</span><span class="pln"> a </span><span class="pun">=</span> <span class="lit">68</span><span class="pun">;</span>\r\n<span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''A''</span></pre>\r\nbyte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.\r\n\r\nPrefix 0 is used to indicate octal and prefix 0x indicates hexadecimal when using these number systems for literals. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">int</span> <span class="kwd">decimal</span> <span class="pun">=</span> <span class="lit">100</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> octal </span><span class="pun">=</span> <span class="lit">0144</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> hexa </span><span class="pun">=</span>  <span class="lit">0x64</span><span class="pun">;</span></pre>\r\nString literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are:\r\n<pre class="prettyprint prettyprinted"><span class="str">"Hello World"</span>\r\n<span class="str">"two\\nlines"</span>\r\n<span class="str">"\\"This is in quotes\\""</span></pre>\r\nString and char types of literals can contain any Unicode characters. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''\\u0001''</span><span class="pun">;</span>\r\n<span class="typ">String</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">"\\u0001"</span><span class="pun">;</span></pre>\r\nJava language supports few special escape sequences for String and char literals as well. They are:\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>Notation</th>\r\n<th>Character represented</th>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>Newline (0x0a)</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>Carriage return (0x0d)</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>Formfeed (0x0c)</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>Backspace (0x08)</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>Space (0x20)</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\"</td>\r\n<td>Double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>Single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\ddd</td>\r\n<td>Octal character (ddd)</td>\r\n</tr>\r\n<tr>\r\n<td>\\uxxxx</td>\r\n<td>Hexadecimal UNICODE character (xxxx)</td>\r\n</tr>\r\n</tbody>\r\n</table>";s:10:"post_title";s:15:"Basic DataTypes";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:15:"basic-datatypes";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-27 20:27:51";s:17:"post_modified_gmt";s:19:"2015-02-27 20:27:51";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:4;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=24";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:1;O:7:"WP_Post":24:{s:2:"ID";i:38;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-18 18:59:55";s:13:"post_date_gmt";s:19:"2015-03-18 18:59:55";s:12:"post_content";s:506:"Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.\r\n\r\nPatterns are about documenting a solution for well know recurring problem in a particular context.It can also be defined as recurring solution to a problem in a context.";s:10:"post_title";s:15:"Design Patterns";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:15:"design-patterns";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-19 14:57:09";s:17:"post_modified_gmt";s:19:"2015-03-19 14:57:09";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=38";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:2;O:7:"WP_Post":24:{s:2:"ID";i:28;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-27 19:18:31";s:13:"post_date_gmt";s:19:"2015-02-27 19:18:31";s:12:"post_content";s:30514:"An exception is a problem that arises during the execution of a program. An exception can occur for many different reasons, including the following:\r\n<ul class="list">\r\n	<li>A user has entered invalid data.</li>\r\n	<li>A file that needs to be opened cannot be found.</li>\r\n	<li>A network connection has been lost in the middle of communications or the JVM has run out of memory.</li>\r\n</ul>\r\nSome of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner.\r\n\r\nTo understand how exception handling works in Java, you need to understand the three categories of exceptions:\r\n<ul class="list">\r\n	<li><b>Checked exceptions:</b><span class="Apple-converted-space"> </span>A checked exception is an exception that is typically a user error or a problem that cannot be foreseen by the programmer. For example, if a file is to be opened, but the file cannot be found, an exception occurs. These exceptions cannot simply be ignored at the time of compilation.</li>\r\n	<li><b>Runtime exceptions:</b><span class="Apple-converted-space"> </span>A runtime exception is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compilation.</li>\r\n	<li><b>Errors:</b><span class="Apple-converted-space"> </span>These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. Errors are typically ignored in your code because you can rarely do anything about an error. For example, if a stack overflow occurs, an error will arise. They are also ignored at the time of compilation.</li>\r\n</ul>\r\n<h2>Exception Hierarchy:</h2>\r\nAll exception classes are subtypes of the java.lang.Exception class. The exception class is a subclass of the Throwable class. Other than the exception class there is another subclass called Error which is derived from the Throwable class.\r\n\r\nErrors are not normally trapped form the Java programs. These conditions normally happen in case of severe failures, which are not handled by the java programs. Errors are generated to indicate errors generated by the runtime environment. Example : JVM is out of Memory. Normally programs cannot recover from errors.\r\n\r\nThe Exception class has two main subclasses: IOException class and RuntimeException Class.\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/exceptions.jpg" alt="Java Exceptions" /></center>Here is a list of most common checked and unchecked<span class="Apple-converted-space"> </span><a href="http://www.tutorialspoint.com/java/java_builtin_exceptions.htm">Java''s Built-in Exceptions</a>.\r\n<h2>Exceptions Methods:</h2>\r\nFollowing is the list of important medthods available in the Throwable class.\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>SN</th>\r\n<th>Methods with Description</th>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td><b>public String getMessage()</b>\r\nReturns a detailed message about the exception that has occurred. This message is initialized in the Throwable constructor.</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td><b>public Throwable getCause()</b>\r\nReturns the cause of the exception as represented by a Throwable object.</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td><b>public String toString()</b>\r\nReturns the name of the class concatenated with the result of getMessage()</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td><b>public void printStackTrace()</b>\r\nPrints the result of toString() along with the stack trace to System.err, the error output stream.</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td><b>public StackTraceElement [] getStackTrace()</b>\r\nReturns an array containing each element on the stack trace. The element at index 0 represents the top of the call stack, and the last element in the array represents the method at the bottom of the call stack.</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td><b>public Throwable fillInStackTrace()</b>\r\nFills the stack trace of this Throwable object with the current stack trace, adding to any previous information in the stack trace.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>Catching Exceptions:</h2>\r\nA method catches an exception using a combination of the<span class="Apple-converted-space"> </span><b>try</b><span class="Apple-converted-space"> </span>and<span class="Apple-converted-space"> </span><b>catch</b><span class="Apple-converted-space"> </span>keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionName</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span></pre>\r\nA catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in protected code, the catch block (or blocks) that follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block much as an argument is passed into a method parameter.\r\n<h2>Example:</h2>\r\nThe following is an array is declared with 2 elements. Then the code tries to access the 3rd element of the array which throws an exception.\r\n<pre class="prettyprint tryit prettyprinted"><span class="com">// File Name : ExcepTest.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">ExcepTest</span><span class="pun">{</span>\r\n\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[]){</span>\r\n      <span class="kwd">try</span><span class="pun">{</span>\r\n         <span class="kwd">int</span><span class="pln"> a</span><span class="pun">[]</span> <span class="pun">=</span> <span class="kwd">new</span> <span class="kwd">int</span><span class="pun">[</span><span class="lit">2</span><span class="pun">];</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Access element three :"</span> <span class="pun">+</span><span class="pln"> a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pln"> e</span><span class="pun">){</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Exception thrown  :"</span> <span class="pun">+</span><span class="pln"> e</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n      <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Out of the block"</span><span class="pun">);</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThis would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Exception</span><span class="pln"> thrown  </span><span class="pun">:</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pun">:</span> <span class="lit">3</span>\r\n<span class="typ">Out</span><span class="pln"> of the block</span></pre>\r\n<h2>Multiple catch Blocks:</h2>\r\nA try block can be followed by multiple catch blocks. The syntax for multiple catch blocks looks like the following:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType1</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType2</span><span class="pln"> e2</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType3</span><span class="pln"> e3</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span></pre>\r\nThe previous statements demonstrate three catch blocks, but you can have any number of them after a single try. If an exception occurs in the protected code, the exception is thrown to the first catch block in the list. If the data type of the exception thrown matches ExceptionType1, it gets caught there. If not, the exception passes down to the second catch statement. This continues until the exception either is caught or falls through all catches, in which case the current method stops execution and the exception is thrown down to the previous method on the call stack.\r\n<h2>Example:</h2>\r\nHere is code segment showing how to use multiple try/catch statements.\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span><span class="pln">\r\n   file </span><span class="pun">=</span> <span class="kwd">new</span> <span class="typ">FileInputStream</span><span class="pun">(</span><span class="pln">fileName</span><span class="pun">);</span><span class="pln">\r\n   x </span><span class="pun">=</span> <span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> file</span><span class="pun">.</span><span class="pln">read</span><span class="pun">();</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">IOException</span><span class="pln"> i</span><span class="pun">)</span>\r\n<span class="pun">{</span><span class="pln">\r\n   i</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n   <span class="kwd">return</span> <span class="pun">-</span><span class="lit">1</span><span class="pun">;</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">FileNotFoundException</span><span class="pln"> f</span><span class="pun">)</span> <span class="com">//Not valid!</span>\r\n<span class="pun">{</span><span class="pln">\r\n   f</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n   <span class="kwd">return</span> <span class="pun">-</span><span class="lit">1</span><span class="pun">;</span>\r\n<span class="pun">}</span></pre>\r\n<h2>The throws/throw Keywords:</h2>\r\nIf a method does not handle a checked exception, the method must declare it using the<span class="Apple-converted-space"> </span><b>throws</b>keyword. The throws keyword appears at the end of a method''s signature.\r\n\r\nYou can throw an exception, either a newly instantiated one or an exception that you just caught, by using the<span class="Apple-converted-space"> </span><b>throw</b><span class="Apple-converted-space"> </span>keyword. Try to understand the different in throws and throw keywords.\r\n\r\nThe following method declares that it throws a RemoteException:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span><span class="pln"> className\r\n</span><span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> deposit</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span> <span class="typ">RemoteException</span>\r\n   <span class="pun">{</span>\r\n      <span class="com">// Method implementation</span>\r\n      <span class="kwd">throw</span> <span class="kwd">new</span> <span class="typ">RemoteException</span><span class="pun">();</span>\r\n   <span class="pun">}</span>\r\n   <span class="com">//Remainder of class definition</span>\r\n<span class="pun">}</span></pre>\r\nA method can declare that it throws more than one exception, in which case the exceptions are declared in a list separated by commas. For example, the following method declares that it throws a RemoteException and an InsufficientFundsException:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span><span class="pln"> className\r\n</span><span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> withdraw</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span> <span class="typ">RemoteException</span><span class="pun">,</span>\r\n                              <span class="typ">InsufficientFundsException</span>\r\n   <span class="pun">{</span>\r\n       <span class="com">// Method implementation</span>\r\n   <span class="pun">}</span>\r\n   <span class="com">//Remainder of class definition</span>\r\n<span class="pun">}</span></pre>\r\n<h2>The finally Keyword</h2>\r\nThe finally keyword is used to create a block of code that follows a try block. A finally block of code always executes, whether or not an exception has occurred.\r\n\r\nUsing a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.\r\n\r\nA finally block appears at the end of the catch blocks and has the following syntax:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType1</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType2</span><span class="pln"> e2</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType3</span><span class="pln"> e3</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">finally</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//The finally block always executes.</span>\r\n<span class="pun">}</span></pre>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit prettyprinted"><span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">ExcepTest</span><span class="pun">{</span>\r\n\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[]){</span>\r\n      <span class="kwd">int</span><span class="pln"> a</span><span class="pun">[]</span> <span class="pun">=</span> <span class="kwd">new</span> <span class="kwd">int</span><span class="pun">[</span><span class="lit">2</span><span class="pun">];</span>\r\n      <span class="kwd">try</span><span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Access element three :"</span> <span class="pun">+</span><span class="pln"> a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pln"> e</span><span class="pun">){</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Exception thrown  :"</span> <span class="pun">+</span><span class="pln"> e</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n      <span class="kwd">finally</span><span class="pun">{</span><span class="pln">\r\n         a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span> <span class="pun">=</span> <span class="lit">6</span><span class="pun">;</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"First element value: "</span> <span class="pun">+</span><span class="pln">a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"The finally statement is executed"</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThis would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Exception</span><span class="pln"> thrown  </span><span class="pun">:</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pun">:</span> <span class="lit">3</span>\r\n<span class="typ">First</span><span class="pln"> element value</span><span class="pun">:</span> <span class="lit">6</span>\r\n<span class="typ">The</span> <span class="kwd">finally</span><span class="pln"> statement </span><span class="kwd">is</span><span class="pln"> executed</span></pre>\r\nNote the following:\r\n<ul class="list">\r\n	<li>A catch clause cannot exist without a try statement.</li>\r\n	<li>It is not compulsory to have finally clauses when ever a try/catch block is present.</li>\r\n	<li>The try block cannot be present without either catch clause or finally clause.</li>\r\n	<li>Any code cannot be present in between the try, catch, finally blocks.</li>\r\n</ul>\r\n<h2>Declaring you own Exception:</h2>\r\nYou can create your own exceptions in Java. Keep the following points in mind when writing your own exception classes:\r\n<ul class="list">\r\n	<li>All exceptions must be a child of Throwable.</li>\r\n	<li>If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.</li>\r\n	<li>If you want to write a runtime exception, you need to extend the RuntimeException class.</li>\r\n</ul>\r\nWe can define our own Exception class as below:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">class</span> <span class="typ">MyException</span> <span class="kwd">extends</span> <span class="typ">Exception</span><span class="pun">{</span>\r\n<span class="pun">}</span></pre>\r\nYou just need to extend the Exception class to create your own Exception class. These are considered to be checked exceptions. The following InsufficientFundsException class is a user-defined exception that extends the Exception class, making it a checked exception. An exception class is like any other class, containing useful fields and methods.\r\n<h2>Example:</h2>\r\n<pre id="exception" class="prettyprint prettyprinted"><span class="com">// File Name InsufficientFundsException.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">InsufficientFundsException</span> <span class="kwd">extends</span> <span class="typ">Exception</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">private</span> <span class="kwd">double</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="kwd">public</span> <span class="typ">InsufficientFundsException</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">this</span><span class="pun">.</span><span class="pln">amount </span><span class="pun">=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span> \r\n   <span class="kwd">public</span> <span class="kwd">double</span><span class="pln"> getAmount</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nTo demonstrate using our user-defined exception, the following CheckingAccount class contains a withdraw() method that throws an InsufficientFundsException.\r\n<pre id="account" class="prettyprint prettyprinted"><span class="com">// File Name CheckingAccount.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">CheckingAccount</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">private</span> <span class="kwd">double</span><span class="pln"> balance</span><span class="pun">;</span>\r\n   <span class="kwd">private</span> <span class="kwd">int</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="kwd">public</span> <span class="typ">CheckingAccount</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> number</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">this</span><span class="pun">.</span><span class="pln">number </span><span class="pun">=</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> deposit</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span>\r\n   <span class="pun">{</span><span class="pln">\r\n      balance </span><span class="pun">+=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> withdraw</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span>\r\n                              <span class="typ">InsufficientFundsException</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">if</span><span class="pun">(</span><span class="pln">amount </span><span class="pun">&lt;=</span><span class="pln"> balance</span><span class="pun">)</span>\r\n      <span class="pun">{</span><span class="pln">\r\n         balance </span><span class="pun">-=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n      <span class="pun">}</span>\r\n      <span class="kwd">else</span>\r\n      <span class="pun">{</span>\r\n         <span class="kwd">double</span><span class="pln"> needs </span><span class="pun">=</span><span class="pln"> amount </span><span class="pun">-</span><span class="pln"> balance</span><span class="pun">;</span>\r\n         <span class="kwd">throw</span> <span class="kwd">new</span> <span class="typ">InsufficientFundsException</span><span class="pun">(</span><span class="pln">needs</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">double</span><span class="pln"> getBalance</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> balance</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">int</span><span class="pln"> getNumber</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThe following BankDemo program demonstrates invoking the deposit() and withdraw() methods of CheckingAccount.\r\n<pre class="prettyprint tryit prettyprinted" title="account,exception"><span class="com">// File Name BankDemo.java</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">BankDemo</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span> <span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="typ">CheckingAccount</span><span class="pln"> c </span><span class="pun">=</span> <span class="kwd">new</span> <span class="typ">CheckingAccount</span><span class="pun">(</span><span class="lit">101</span><span class="pun">);</span>\r\n      <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Depositing $500..."</span><span class="pun">);</span><span class="pln">\r\n      c</span><span class="pun">.</span><span class="pln">deposit</span><span class="pun">(</span><span class="lit">500.00</span><span class="pun">);</span>\r\n      <span class="kwd">try</span>\r\n      <span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\\nWithdrawing $100..."</span><span class="pun">);</span><span class="pln">\r\n         c</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="lit">100.00</span><span class="pun">);</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\\nWithdrawing $600..."</span><span class="pun">);</span><span class="pln">\r\n         c</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="lit">600.00</span><span class="pun">);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">InsufficientFundsException</span><span class="pln"> e</span><span class="pun">)</span>\r\n      <span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Sorry, but you are short $"</span>\r\n                                  <span class="pun">+</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">getAmount</span><span class="pun">());</span><span class="pln">\r\n         e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n      <span class="pun">}</span>\r\n    <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nCompile all the above three files and run BankDemo, this would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Depositing</span><span class="pln"> $500</span><span class="pun">...</span>\r\n\r\n<span class="typ">Withdrawing</span><span class="pln"> $100</span><span class="pun">...</span>\r\n\r\n<span class="typ">Withdrawing</span><span class="pln"> $600</span><span class="pun">...</span>\r\n<span class="typ">Sorry</span><span class="pun">,</span><span class="pln"> but you are </span><span class="kwd">short</span><span class="pln"> $200</span><span class="pun">.</span><span class="lit">0</span>\r\n<span class="typ">InsufficientFundsException</span><span class="pln">\r\n        at </span><span class="typ">CheckingAccount</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="typ">CheckingAccount</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">25</span><span class="pun">)</span><span class="pln">\r\n        at </span><span class="typ">BankDemo</span><span class="pun">.</span><span class="pln">main</span><span class="pun">(</span><span class="typ">BankDemo</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">13</span><span class="pun">)</span></pre>\r\n<h2>Common Exceptions:</h2>\r\nIn Java, it is possible to define two catergories of Exceptions and Errors.\r\n<ul class="list">\r\n	<li><b>JVM Exceptions:</b><span class="Apple-converted-space"> </span>- These are exceptions/errors that are exclusively or logically thrown by the JVM. Examples : NullPointerException, ArrayIndexOutOfBoundsException, ClassCastException,</li>\r\n	<li><b>Programmatic exceptions:</b><span class="Apple-converted-space"> </span>- These exceptions are thrown explicitly by the application or the API programmers Examples: IllegalArgumentException, IllegalStateException.</li>\r\n</ul>";s:10:"post_title";s:9:"Exception";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:9:"exception";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-27 19:18:31";s:17:"post_modified_gmt";s:19:"2015-02-27 19:18:31";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:4;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=28";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:3;O:7:"WP_Post":24:{s:2:"ID";i:12;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 18:39:24";s:13:"post_date_gmt";s:19:"2015-02-26 18:39:24";s:12:"post_content";s:4029:"This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.Alternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>";s:10:"post_title";s:9:"HIBERNATE";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:9:"hybernate";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-27 19:42:07";s:17:"post_modified_gmt";s:19:"2015-02-27 19:42:07";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=12";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:4;O:7:"WP_Post":24:{s:2:"ID";i:82;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-25 19:35:49";s:13:"post_date_gmt";s:19:"2015-03-25 19:35:49";s:12:"post_content";s:2056:"Below are the most commonly-used HTTP status codes returned from RESTful services or APIs along with a brief summary of their commonly-accepted usage. Other HTTP status codes are used occasionally, but are either specializations or more advanced. Most service suites are well served by supporting only these, or even a sub-set.\r\n\r\n<strong>200 (OK)</strong> – General success status code. Most common code to indicate success.\r\n\r\n<strong>201 (CREATED)</strong> – Successful creation occurred (via either POST or PUT). Set the Location header to contain a link to the newly-created resource. Response body content may or may not be present.\r\n\r\n<strong>204 (NO CONTENT)</strong> – Status when wrapped responses are not used and nothing is in the body (e.g. DELETE).\r\n\r\n<strong>304 (NOT MODIFIED)</strong> – Used in response to conditional GET calls to reduce band-width usage. If used, must set the Date, Content-Location, Etag headers to what they would have been on a regular GET call. There must be no response body.\r\n\r\n<strong>400 (BAD REQUEST)</strong> – General error when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.\r\n\r\n<strong>401 (UNAUTHORIZED)</strong> – Error code for a missing or invalid authentication token.\r\n\r\n<strong>403 (FORBIDDEN)</strong> – Error code for user not authorized to perform the operation, doesn''t have rights to access the resource, or the resource is unavailable for some reason (e.g. time constraints, etc.).\r\n\r\n<strong>404 (NOT FOUND)</strong> – Used when the requested resource is not found, whether it doesn''t exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.\r\n\r\n<strong>409 (CONFLICT)</strong> – Whenever a resource conflict would be caused by fulfilling the request. Duplicate entries, deleting root objects when cascade-delete not supported are a couple of examples.\r\n\r\n<strong>500 (INTERNAL SERVER ERROR)</strong> – The general catch-all error when the server-side throws an exception.";s:10:"post_title";s:17:"HTTP Status Codes";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:17:"http-status-codes";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-25 19:35:49";s:17:"post_modified_gmt";s:19:"2015-03-25 19:35:49";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:61;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=82";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:5;O:7:"WP_Post":24:{s:2:"ID";i:4;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 18:37:31";s:13:"post_date_gmt";s:19:"2015-02-26 18:37:31";s:12:"post_content";s:4037:"This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>";s:10:"post_title";s:4:"JAVA";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:4:"java";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-26 18:37:31";s:17:"post_modified_gmt";s:19:"2015-02-26 18:37:31";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:38:"http://localhost/ittutorial/?page_id=4";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:6;O:7:"WP_Post":24:{s:2:"ID";i:22;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-27 19:02:31";s:13:"post_date_gmt";s:19:"2015-02-27 19:02:31";s:12:"post_content";s:3056:"<div id="content" class="column">\r\n<div class="section">\r\n<div id="content-area">\r\n<div id="node-301" class="node node-type-page clearfix">\r\n<div class="content">\r\n<div class="landingPageArticle">\r\n\r\nf you''re a Windows user, getting a good SMTP server is very important. In fact, if you use a common, non-monitored SMTP email service, email providers''s antispam filters can reject your messages – even if they are legitimate.\r\n\r\nA reliable and <strong>professional SMTP service</strong> like turboSMTP, on the contrary, has a strong reputation among all ISP and will maximize the <strong>deliverability</strong> of your emails.\r\n\r\nSo the main features that an outgoing service for Windows should guarantee are:\r\n<ol>\r\n	<li><strong>It must use only reliable IP</strong>s. And also maintain a constant contact with all major email providers in order to guarantee that all your emails get to the inbox.</li>\r\n	<li><strong>It must provide a quicker email delivery</strong>. A dedicated SMTP doesn''t fall into overload issues and should enhance significantly the velocity of your mailing.</li>\r\n	<li><strong>It must bypass ISP filtering</strong>. A professional outbound server will maximize your delivery rate avoiding all the modern, aggressive antispam filters that can reject also legitimate emails.</li>\r\n	<li><strong>It must be accesible anytime and anywhere</strong>. If you''re on-the-go and using a different internet connection, you shouldn''t need to change your settings each time.</li>\r\n	<li><strong> It must keep track of your messages</strong>. To understand the results of your mailing, a dedicated SMTP service should provide also an accurate email tracking system.</li>\r\n</ol>\r\nturboSMTP fulfills all these requirements, providing also a 24/7 customer support, that will help you to resolve any kind of issue. You can <a title="Try SMTP for free" href="http://www.serversmtp.com/en/tsmtpregistration1.php">register and get a lifetime package of 6.000 free relays per month now</a>, then choose a plan according to your needs.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="region region-sidebar-first column sidebar">\r\n<div class="section">\r\n<div id="block-block-21" class="block block-block region-odd odd region-count-1 count-1">\r\n<div class="content">\r\n<h2>Related Content</h2>\r\n<ul class="lpSideRelated">\r\n	<li><a href="http://www.serversmtp.com/en/smtp-for-windows-7">SMTP for Windows 7</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-configuration">How to configure an SMTP server</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-settings">SMTP settings</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-server-for-mac">SMTP server for Mac</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/windows-mail-smtp-settings">Windows Mail SMTP settings</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/email-delivery-system">Email delivery system</a></li>\r\n</ul>\r\n</div>\r\n</div>\r\n<div id="block-block-19" class="block block-block region-even even region-count-2 count-2"></div>\r\n</div>\r\n</div>";s:10:"post_title";s:10:"Java Basic";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:10:"java-basic";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-27 19:02:32";s:17:"post_modified_gmt";s:19:"2015-02-27 19:02:32";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:4;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=22";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:7;O:7:"WP_Post":24:{s:2:"ID";i:71;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-23 18:07:18";s:13:"post_date_gmt";s:19:"2015-03-23 18:07:18";s:12:"post_content";s:6391:"<table>\r\n<tbody>\r\n<tr>\r\n<td><strong>Annotation</strong></td>\r\n<td><strong>Description</strong></td>\r\n</tr>\r\n<tr>\r\n<td>@Path</td>\r\n<td>The @Path annotation’s value is a relative URI path indicating where the Java class will be hosted: for example, /helloworld. You can also embed variables in the URIs to make a URI path template. For example, you could ask for the name of a user and pass it to the application as a variable in the URI: /helloworld/{username}.</td>\r\n</tr>\r\n<tr>\r\n<td>@GET</td>\r\n<td>The @GET annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP GET requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@POST</td>\r\n<td>The @POST annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP POST requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@PUT</td>\r\n<td>The @PUT annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP PUT requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@DELETE</td>\r\n<td>The @DELETE annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP DELETE requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@HEAD</td>\r\n<td>The @HEAD annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP HEAD requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@PathParam</td>\r\n<td>The @PathParam annotation is a type of parameter that you can extract for use in your resource class. URI path parameters are extracted from the request URI, and the parameter names correspond to the URI path template variable names specified in the@Path class-level annotation.</td>\r\n</tr>\r\n<tr>\r\n<td>@QueryParam</td>\r\n<td>The @QueryParam annotation is a type of parameter that you can extract for use in your resource class. Query parameters are extracted from the request URI query parameters.</td>\r\n</tr>\r\n<tr>\r\n<td>@Consumes</td>\r\n<td>The @Consumes annotation is used to specify the MIME media types of representations a resource can consume that were sent by the client.</td>\r\n</tr>\r\n<tr>\r\n<td>@Produces</td>\r\n<td>The @Produces annotation is used to specify the MIME media types of representations a resource can produce and send back to the client: for example, "text/plain".</td>\r\n</tr>\r\n<tr>\r\n<td>@Provider</td>\r\n<td>The @Provider annotation is used for anything that is of interest to the JAX-RS runtime, such as MessageBodyReader andMessageBodyWriter. For HTTP requests, the MessageBodyReader is used to map an HTTP request entity body to method parameters. On the response side, a return value is mapped to an HTTP response entity body by using a MessageBodyWriter. If the application needs to supply additional metadata, such as HTTP headers or a different status code, a method can return aResponse that wraps the entity and that can be built using Response.ResponseBuilder.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<strong>@GET</strong>\r\nAnnotate your Get request methods with @GET.\r\n\r\n@GET\r\npublic String getHTML() {\r\n...\r\n}\r\n\r\n<strong>@Produces</strong>\r\n@Produces annotation specifies the type of output this method (or web service) will produce.\r\n\r\n@GET\r\n@Produces("application/xml")\r\npublic Contact getXML() {\r\n...\r\n}\r\n@GET\r\n@Produces("application/json")\r\npublic Contact getJSON() {\r\n...\r\n}\r\n\r\n<strong>@Path</strong>\r\n@Path annotation specify the URL path on which this method will be invoked.\r\n\r\n@GET\r\n@Produces("application/xml")\r\n@Path("xml/{firstName}")\r\npublic Contact getXML() {\r\n...\r\n}\r\n\r\n<strong>@PathParam</strong>\r\nWe can bind REST-style URL parameters to method arguments using @PathParam annotation as shown below.\r\n@Path("/users/{username}")\r\npublic class UserResource {\r\n\r\n@GET\r\n@Produces("text/xml")\r\npublic String getUser(@PathParam("username") String userName) {\r\n...\r\n}\r\n}\r\n\r\n<strong>@QueryParam</strong>\r\nRequest parameters in query string can be accessed using @QueryParam annotation as shown below.\r\n\r\n@GET\r\n@Produces("application/json")\r\n@Path("json/companyList")\r\npublic CompanyList getJSON(@QueryParam("start") int start,\r\n@QueryParam("limit") int limit) {\r\nCompanyList list = new CompanyList(companyService.listCompanies(start, limit));\r\nreturn list;\r\n}\r\n\r\n<strong>@POST</strong>\r\nAnnotate POST request methods with @POST.\r\n\r\n@POST\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\npublic RestResponse&lt;Contact&gt; create(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@Consumes</strong>\r\nThe @Consumes annotation is used to specify the MIME media types a REST resource can consume.\r\n\r\n@PUT\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; update(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@FormParam</strong>\r\nThe REST resources will usually consume XML/JSON for the complete Entity Bean. Sometimes, you may want to read parameters sent in POST requests directly and you can do that using @FormParam annotation. GET Request query parameters can be accessed using@QueryParam annotation.\r\n\r\n@POST\r\npublic String save(@FormParam("firstName") String firstName,\r\n@FormParam("lastName") String lastName) {\r\n...\r\n}\r\n\r\n<strong>@PUT</strong>\r\nAnnotate PUT request methods with @PUT.\r\n\r\n@PUT\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; update(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@DELETE</strong>\r\nAnnotate DELETE request methods with @DELETE.\r\n\r\n@DELETE\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; delete(@PathParam("contactId") int contactId) {\r\n...\r\n}";s:10:"post_title";s:18:"JAX-RS Annotations";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:18:"jax-rs-annotations";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-23 18:07:18";s:17:"post_modified_gmt";s:19:"2015-03-23 18:07:18";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:61;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=71";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:8;O:7:"WP_Post":24:{s:2:"ID";i:8;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 18:38:41";s:13:"post_date_gmt";s:19:"2015-02-26 18:38:41";s:12:"post_content";s:4037:"This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>";s:10:"post_title";s:3:"JSP";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:3:"jsp";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-26 18:38:42";s:17:"post_modified_gmt";s:19:"2015-02-26 18:38:42";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:38:"http://localhost/ittutorial/?page_id=8";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:9;O:7:"WP_Post":24:{s:2:"ID";i:30;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-27 19:36:52";s:13:"post_date_gmt";s:19:"2015-02-27 19:36:52";s:12:"post_content";s:3310:"The key to understanding the low-level functionality of JSP is to understand the simple life cycle they follow.\r\n\r\nA JSP life cycle can be defined as the entire process from its creation till the destruction which is similar to a servlet life cycle with an additional step which is required to compile a JSP into servlet.\r\n\r\nThe following are the paths followed by a JSP\r\n<ul class="list">\r\n	<li>Compilation</li>\r\n	<li>Initialization</li>\r\n	<li>Execution</li>\r\n	<li>Cleanup</li>\r\n</ul>\r\nThe four major phases of JSP life cycle are very similar to Servlet Life Cycle and they are as follows:\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/jsp_life_cycle.jpg" alt="JSP Life Cycle" /></center>\r\n<h2>JSP Compilation:</h2>\r\nWhen a browser asks for a JSP, the JSP engine first checks to see whether it needs to compile the page. If the page has never been compiled, or if the JSP has been modified since it was last compiled, the JSP engine compiles the page.\r\n\r\nThe compilation process involves three steps:\r\n<ul class="list">\r\n	<li>Parsing the JSP.</li>\r\n	<li>Turning the JSP into a servlet.</li>\r\n	<li>Compiling the servlet.</li>\r\n</ul>\r\n<h2>JSP Initialization:</h2>\r\nWhen a container loads a JSP it invokes the jspInit() method before servicing any requests. If you need to perform JSP-specific initialization, override the jspInit() method:\r\n<pre class="prettyprint">public void jspInit(){\r\n  // Initialization code...\r\n}\r\n</pre>\r\nTypically initialization is performed only once and as with the servlet init method, you generally initialize database connections, open files, and create lookup tables in the jspInit method.\r\n<h2>JSP Execution:</h2>\r\nThis phase of the JSP life cycle represents all interactions with requests until the JSP is destroyed.\r\n\r\nWhenever a browser requests a JSP and the page has been loaded and initialized, the JSP engine invokes the<span class="Apple-converted-space"> </span><b>_jspService()</b><span class="Apple-converted-space"> </span>method in the JSP.\r\n\r\nThe _jspService() method takes an<span class="Apple-converted-space"> </span><b>HttpServletRequest</b><span class="Apple-converted-space"> </span>and an<span class="Apple-converted-space"> </span><b>HttpServletResponse</b><span class="Apple-converted-space"> </span>as its parameters as follows:\r\n<pre class="prettyprint">void _jspService(HttpServletRequest request, \r\n                 HttpServletResponse response)\r\n{\r\n   // Service handling code...\r\n}\r\n</pre>\r\nThe _jspService() method of a JSP is invoked once per a request and is responsible for generating the response for that request and this method is also responsible for generating responses to all seven of the HTTP methods ie. GET, POST, DELETE etc.\r\n<h2>JSP Cleanup:</h2>\r\nThe destruction phase of the JSP life cycle represents when a JSP is being removed from use by a container.\r\n\r\nThe<span class="Apple-converted-space"> </span><b>jspDestroy()</b><span class="Apple-converted-space"> </span>method is the JSP equivalent of the destroy method for servlets. Override jspDestroy when you need to perform any cleanup, such as releasing database connections or closing open files.\r\n\r\nThe jspDestroy() method has the following form:\r\n<pre class="prettyprint">public void jspDestroy()\r\n{\r\n   // Your cleanup code goes here.\r\n}\r\n</pre>\r\n&nbsp;";s:10:"post_title";s:14:"Jsp Life Cycle";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:14:"jsp-life-cycle";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-27 19:36:52";s:17:"post_modified_gmt";s:19:"2015-02-27 19:36:52";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:8;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=30";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:10;O:7:"WP_Post":24:{s:2:"ID";i:66;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-23 17:07:51";s:13:"post_date_gmt";s:19:"2015-03-23 17:07:51";s:12:"post_content";s:822:"<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg"><img class="alignnone size-full wp-image-67" src="http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg" alt="rest-websrvices" width="585" height="366" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg"><img class="alignnone size-full wp-image-68" src="http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg" alt="restful-product-service" width="899" height="374" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png"><img class="alignnone size-full wp-image-69" src="http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png" alt="mysql-diagram5" width="1197" height="234" /></a>";s:10:"post_title";s:20:"Restful Architecture";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:20:"restful-architecture";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-23 17:07:51";s:17:"post_modified_gmt";s:19:"2015-03-23 17:07:51";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:61;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=66";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:11;O:7:"WP_Post":24:{s:2:"ID";i:78;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-25 18:39:29";s:13:"post_date_gmt";s:19:"2015-03-25 18:39:29";s:12:"post_content";s:1816:"<strong> Maven dependencies for jersey:</strong>\r\n&lt;dependencies&gt;\r\n&lt;!-- core library --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-server&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-core&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!--JAXB Support--&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-json&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!--Core client--&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-client&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;/dependencies&gt;\r\n<strong>Maven Dependencies for resteasy:</strong>\r\n&lt;dependencies&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-jaxrs&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-client&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!-- JAXB support --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-jaxb-provider&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!-- Spring integration --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-spring&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;/dependencies&gt;";s:10:"post_title";s:26:"Restful Maven Dependencies";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:26:"restful-maven-dependencies";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-25 18:39:29";s:17:"post_modified_gmt";s:19:"2015-03-25 18:39:29";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:61;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=78";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:12;O:7:"WP_Post":24:{s:2:"ID";i:61;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-22 16:11:20";s:13:"post_date_gmt";s:19:"2015-03-22 16:11:20";s:12:"post_content";s:1801:"<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>";s:10:"post_title";s:19:"Restful Web Service";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:19:"restful-web-service";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-22 16:11:20";s:17:"post_modified_gmt";s:19:"2015-03-22 16:11:20";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:14;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=61";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:13;O:7:"WP_Post":24:{s:2:"ID";i:63;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-23 16:51:44";s:13:"post_date_gmt";s:19:"2015-03-23 16:51:44";s:12:"post_content";s:2430:"<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>\r\n<h2>Advantages of RESTful Web Services</h2>\r\n<strong>Fast</strong>: RESTful Web Services are fast because there is no strict specification like SOAP. It consumes less bandwidth and resource.\r\n\r\n<strong>Language and Platform independent</strong>: RESTful web services can be written in any programming language and executed in any platform.\r\n\r\n<strong>Permits different data format</strong>: RESTful web service permits different data format such as Plain Text, HTML, XML and JSON.\r\n\r\n<strong> </strong>\r\n\r\nThere are three main implementation of JAX-RS API.\r\n<ol>\r\n	<li>Jersey</li>\r\n	<li>RESTEasy</li>\r\n	<li>Restlet</li>\r\n</ol>";s:10:"post_title";s:32:"Restful Web Service Introduction";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:32:"restful-web-service-introduction";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-23 16:53:28";s:17:"post_modified_gmt";s:19:"2015-03-23 16:53:28";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:61;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=63";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:14;O:7:"WP_Post":24:{s:2:"ID";i:80;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-25 19:17:24";s:13:"post_date_gmt";s:19:"2015-03-25 19:17:24";s:12:"post_content";s:2223:"<em><strong>Web.xml for Resteasy implementation</strong></em>:\r\n&lt;?xml version="1.0"?&gt;\r\n&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n"http://java.sun.com/dtd/web-app_2_3.dtd"&gt;\r\n&lt;web-app&gt;\r\n&lt;display-name&gt;RESTFUL WEB SERVICES&lt;/display-name&gt;\r\n\r\n&lt;!-- Auto scan REST service --&gt;\r\n&lt;context-param&gt;\r\n&lt;param-name&gt;resteasy.scan&lt;/param-name&gt;\r\n&lt;param-value&gt;true&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n\r\n&lt;!-- this need same with resteasy servlet url-pattern --&gt;\r\n&lt;context-param&gt;\r\n&lt;param-name&gt;resteasy.servlet.mapping.prefix&lt;/param-name&gt;\r\n&lt;param-value&gt;/rest&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n\r\n&lt;listener&gt;\r\n&lt;listener-class&gt;\r\norg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap\r\n&lt;/listener-class&gt;\r\n&lt;/listener&gt;\r\n\r\n&lt;servlet&gt;\r\n&lt;servlet-name&gt;resteasy-servlet&lt;/servlet-name&gt;\r\n&lt;servlet-class&gt;\r\norg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher\r\n&lt;/servlet-class&gt;\r\n&lt;/servlet&gt;\r\n&lt;servlet-mapping&gt;\r\n&lt;servlet-name&gt;resteasy-servlet&lt;/servlet-name&gt;\r\n&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;\r\n\r\n&lt;/servlet-mapping&gt;\r\n&lt;/web-app&gt;\r\n<em><strong>Web.xml for jersey Implementation:</strong></em>\r\n&lt;web-app id="WebApp_ID" version="2.4"\r\nxmlns="http://java.sun.com/xml/ns/j2ee"\r\nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\nxsi:schemaLocation="http://java.sun.com/xml/ns/j2ee\r\nhttp://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;\r\n&lt;display-name&gt;Restful Web Application&lt;/display-name&gt;\r\n\r\n&lt;servlet&gt;\r\n&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;\r\n&lt;servlet-class&gt;\r\ncom.sun.jersey.spi.container.servlet.ServletContainer\r\n&lt;/servlet-class&gt;\r\n&lt;init-param&gt;\r\n&lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;\r\n&lt;param-value&gt;com.dkm.rest&lt;/param-value&gt;\r\n&lt;/init-param&gt;\r\n&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\r\n&lt;/servlet&gt;\r\n\r\n&lt;servlet-mapping&gt;\r\n&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;\r\n&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;\r\n&lt;/servlet-mapping&gt;\r\n\r\n&lt;/web-app&gt;";s:10:"post_title";s:30:"Restful web.xml Configurations";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:30:"restful-web-xml-configurations";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-25 19:17:24";s:17:"post_modified_gmt";s:19:"2015-03-25 19:17:24";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:61;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=80";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:15;O:7:"WP_Post":24:{s:2:"ID";i:2;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 08:57:05";s:13:"post_date_gmt";s:19:"2015-02-26 08:57:05";s:12:"post_content";s:961:"This is an example page. It''s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I''m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin'' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href="http://localhost/ittutorial/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!";s:10:"post_title";s:11:"Sample Page";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:11:"sample-page";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-26 08:57:05";s:17:"post_modified_gmt";s:19:"2015-02-26 08:57:05";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:38:"http://localhost/ittutorial/?page_id=2";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:16;O:7:"WP_Post":24:{s:2:"ID";i:6;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 18:38:24";s:13:"post_date_gmt";s:19:"2015-02-26 18:38:24";s:12:"post_content";s:4037:"This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>";s:10:"post_title";s:7:"SERVLET";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:7:"servlet";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-26 18:38:24";s:17:"post_modified_gmt";s:19:"2015-02-26 18:38:24";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:38:"http://localhost/ittutorial/?page_id=6";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:17;O:7:"WP_Post":24:{s:2:"ID";i:10;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 18:39:02";s:13:"post_date_gmt";s:19:"2015-02-26 18:39:02";s:12:"post_content";s:4037:"This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>";s:10:"post_title";s:6:"SPRING";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:6:"spring";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-26 18:39:02";s:17:"post_modified_gmt";s:19:"2015-02-26 18:39:02";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=10";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:18;O:7:"WP_Post":24:{s:2:"ID";i:26;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-27 19:15:13";s:13:"post_date_gmt";s:19:"2015-02-27 19:15:13";s:12:"post_content";s:8683:"A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable''s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.\r\n\r\nYou must declare all variables before they can be used. The basic form of a variable declaration is shown here:\r\n<pre class="prettyprint">data type variable [ = value][, variable [= value] ...] ;\r\n</pre>\r\nHere<span class="Apple-converted-space"> </span><i>data type</i><span class="Apple-converted-space"> </span>is one of Java''s datatypes and<span class="Apple-converted-space"> </span><i>variable</i><span class="Apple-converted-space"> </span>is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.\r\n\r\nFollowing are valid examples of variable declaration and initialization in Java:\r\n<pre class="prettyprint">int a, b, c;         // Declares three ints, a, b, and c.\r\nint a = 10, b = 10;  // Example of initialization\r\nbyte B = 22;         // initializes a byte type variable B.\r\ndouble pi = 3.14159; // declares and assigns a value of PI.\r\nchar a = ''a'';        // the char variable a iis initialized with value ''a''\r\n</pre>\r\nThis chapter will explain various variable types available in Java Language. There are three kinds of variables in Java:\r\n<ul class="list">\r\n	<li>Local variables</li>\r\n	<li>Instance variables</li>\r\n	<li>Class/static variables</li>\r\n</ul>\r\n<h2>Local variables:</h2>\r\n<ul class="list">\r\n	<li>Local variables are declared in methods, constructors, or blocks.</li>\r\n	<li>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor or block.</li>\r\n	<li>Access modifiers cannot be used for local variables.</li>\r\n	<li>Local variables are visible only within the declared method, constructor or block.</li>\r\n	<li>Local variables are implemented at stack level internally.</li>\r\n	<li>There is no default value for local variables so local variables should be declared and an initial value should be assigned before the first use.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\nHere,<span class="Apple-converted-space"> </span><i>age</i><span class="Apple-converted-space"> </span>is a local variable. This is defined inside<span class="Apple-converted-space"> </span><i>pupAge()</i><span class="Apple-converted-space"> </span>method and its scope is limited to this method only.\r\n<pre class="prettyprint tryit">public class Test{ \r\n   public void pupAge(){\r\n      int age = 0;\r\n      age = age + 7;\r\n      System.out.println("Puppy age is : " + age);\r\n   }\r\n   \r\n   public static void main(String args[]){\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">Puppy age is: 7\r\n</pre>\r\n<h2>Example:</h2>\r\nFollowing example uses<span class="Apple-converted-space"> </span><i>age</i><span class="Apple-converted-space"> </span>without initializing it, so it would give an error at the time of compilation.\r\n<pre class="prettyprint tryit">public class Test{ \r\n   public void pupAge(){\r\n      int age;\r\n      age = age + 7;\r\n      System.out.println("Puppy age is : " + age);\r\n   }\r\n   \r\n   public static void main(String args[]){\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following error while compiling it:\r\n<pre class="result">Test.java:4:variable number might not have been initialized\r\nage = age + 7;\r\n         ^\r\n1 error\r\n</pre>\r\n<h2>Instance variables:</h2>\r\n<ul class="list">\r\n	<li>Instance variables are declared in a class, but outside a method, constructor or any block.</li>\r\n	<li>When a space is allocated for an object in the heap, a slot for each instance variable value is created.</li>\r\n	<li>Instance variables are created when an object is created with the use of the keyword ''new'' and destroyed when the object is destroyed.</li>\r\n	<li>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object''s state that must be present throughout the class.</li>\r\n	<li>Instance variables can be declared in class level before or after use.</li>\r\n	<li>Access modifiers can be given for instance variables.</li>\r\n	<li>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However visibility for subclasses can be given for these variables with the use of access modifiers.</li>\r\n	<li>Instance variables have default values. For numbers the default value is 0, for Booleans it is false and for object references it is null. Values can be assigned during the declaration or within the constructor.</li>\r\n	<li>Instance variables can be accessed directly by calling the variable name inside the class. However within static methods and different class ( when instance variables are given accessibility) should be called using the fully qualified name .<span class="Apple-converted-space"> </span><i>ObjectReference.VariableName</i>.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit">import java.io.*;\r\n\r\npublic class Employee{\r\n   // this instance variable is visible for any child class.\r\n   public String name;\r\n   \r\n   // salary  variable is visible in Employee class only.\r\n   private double salary;\r\n   \r\n   // The name variable is assigned in the constructor. \r\n   public Employee (String empName){\r\n      name = empName;\r\n   }\r\n\r\n   // The salary variable is assigned a value.\r\n   public void setSalary(double empSal){\r\n      salary = empSal;\r\n   }\r\n   \r\n   // This method prints the employee details.\r\n   public void printEmp(){\r\n      System.out.println("name  : " + name );\r\n      System.out.println("salary :" + salary);\r\n   }\r\n\r\n   public static void main(String args[]){\r\n      Employee empOne = new Employee("Ransika");\r\n      empOne.setSalary(1000);\r\n      empOne.printEmp();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">name  : Ransika\r\nsalary :1000.0\r\n</pre>\r\n<h2>Class/static variables:</h2>\r\n<ul class="list">\r\n	<li>Class variables also known as static variables are declared with the<span class="Apple-converted-space"> </span><i>static</i><span class="Apple-converted-space"> </span>keyword in a class, but outside a method, constructor or a block.</li>\r\n	<li>There would only be one copy of each class variable per class, regardless of how many objects are created from it.</li>\r\n	<li>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final and static. Constant variables never change from their initial value.</li>\r\n	<li>Static variables are stored in static memory. It is rare to use static variables other than declared final and used as either public or private constants.</li>\r\n	<li>Static variables are created when the program starts and destroyed when the program stops.</li>\r\n	<li>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.</li>\r\n	<li>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally values can be assigned in special static initializer blocks.</li>\r\n	<li>Static variables can be accessed by calling with the class name .<span class="Apple-converted-space"> </span><i>ClassName.VariableName</i>.</li>\r\n	<li>When declaring class variables as public static final, then variables names (constants) are all in upper case. If the static variables are not public and final the naming syntax is the same as instance and local variables.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit">import java.io.*;\r\n\r\npublic class Employee{\r\n   // salary  variable is a private static variable\r\n   private static double salary;\r\n\r\n   // DEPARTMENT is a constant\r\n   public static final String DEPARTMENT = "Development ";\r\n\r\n   public static void main(String args[]){\r\n      salary = 1000;\r\n      System.out.println(DEPARTMENT+"average salary:"+salary);\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">Development average salary:1000\r\n</pre>\r\n<b>Note:</b><span class="Apple-converted-space"> </span>If the variables are access from an outside class the constant should be accessed as Employee.DEPARTMENT";s:10:"post_title";s:14:"Variable Types";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:14:"variable-types";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-02-27 19:15:13";s:17:"post_modified_gmt";s:19:"2015-02-27 19:15:13";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:4;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=26";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:19;O:7:"WP_Post":24:{s:2:"ID";i:14;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-02-26 18:39:55";s:13:"post_date_gmt";s:19:"2015-02-26 18:39:55";s:12:"post_content";s:716:"<ul>\r\n	<li>Web service is a technology that allow us to build interoperable distributed applications.</li>\r\n	<li>Web Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).</li>\r\n	<li>Web Service distributed objects is these are not only platform (OS) independent, These are even language independent.</li>\r\n	<li>We can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network.</li>\r\n	<li>Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.</li>\r\n</ul>";s:10:"post_title";s:11:"WEB SERVICE";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:11:"web-service";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-21 06:56:12";s:17:"post_modified_gmt";s:19:"2015-03-21 06:56:12";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:0;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=14";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:20;O:7:"WP_Post":24:{s:2:"ID";i:50;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-21 15:14:38";s:13:"post_date_gmt";s:19:"2015-03-21 15:14:38";s:12:"post_content";s:944:"<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg"><img class="alignnone size-full wp-image-51" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg" alt="WebServicesArchitecture" width="430" height="340" /></a>\r\n<h3><strong>Service Provider:</strong></h3>\r\nThis is the provider of the web service. The service provider implements the service and makes it available on the Internet.\r\n<h3><strong>Service Requestor:</strong></h3>\r\nThis is any consumer of the web service. The requestor utilizes an existing web service by opening a network connection and sending an XML request.\r\n<h3><strong>Service Registry:</strong></h3>\r\nThis is a logically centralized directory of services. The registry provides a central place where developers can publish new services or find existing ones. It therefore serves as a centralized clearing house for companies and their services.";s:10:"post_title";s:15:"WS Architecture";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:15:"ws-architecture";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-21 15:14:38";s:17:"post_modified_gmt";s:19:"2015-03-21 15:14:38";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:14;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=50";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:21;O:7:"WP_Post":24:{s:2:"ID";i:45;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-21 07:16:39";s:13:"post_date_gmt";s:19:"2015-03-21 07:16:39";s:12:"post_content";s:908:"Web service is a technology that allow us to build interoperable distributed applications.\r\n\r\nWeb Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).\r\n\r\nWeb Service distributed objects is these are not only platform (OS) independent, These are even language independent.\r\n\r\nWe can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network. Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png"><img class="alignnone size-full wp-image-58" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png" alt="WSDiagram" width="688" height="243" /></a>";s:10:"post_title";s:7:"WS Home";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:7:"ws-home";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-22 16:07:40";s:17:"post_modified_gmt";s:19:"2015-03-22 16:07:40";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:14;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=45";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:22;O:7:"WP_Post":24:{s:2:"ID";i:47;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-21 14:21:27";s:13:"post_date_gmt";s:19:"2015-03-21 14:21:27";s:12:"post_content";s:440:"A <strong>Web Service</strong> is can be defined as below:\r\n<ul>\r\n	<li>It is a client server application or application component for communication.</li>\r\n	<li>It method of communication between two devices over network.</li>\r\n	<li>It is a software system for interoperable machine to machine communication.</li>\r\n	<li>It is a collection of standards or protocols for exchanging information between two devices or application.</li>\r\n</ul>";s:10:"post_title";s:15:"WS Introduction";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:15:"ws-introduction";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-21 14:24:55";s:17:"post_modified_gmt";s:19:"2015-03-21 14:24:55";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:14;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=47";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}i:23;O:7:"WP_Post":24:{s:2:"ID";i:54;s:11:"post_author";s:1:"1";s:9:"post_date";s:19:"2015-03-22 11:15:02";s:13:"post_date_gmt";s:19:"2015-03-22 11:15:02";s:12:"post_content";s:1335:"There are mainly two types of web services.\r\n<ol>\r\n	<li>SOAP web services.</li>\r\n	<li>RESTful web services.</li>\r\n</ol>\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png"><img class="alignnone size-full wp-image-55" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png" alt="WebserviceType" width="249" height="126" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg"><img class="alignnone size-full wp-image-74" src="http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg" alt="restful" width="470" height="291" /></a>\r\n<h2><strong>Java Web Services API</strong></h2>\r\nThere are two main API''s defined by Java for developing web service applications since JavaEE 6.\r\n\r\n1) <strong>JAX-WS</strong>: for SOAP web services. The are two ways to write JAX-WS application code: by RPC style and Document style.\r\n\r\n2) <strong>JAX-RS</strong>: for RESTful web services. There are mainly 3 implementation currently in use for creating JAX-RS application: Jersey, Resteasy and Restlet.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png"><img class="alignnone size-full wp-image-56" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png" alt="WSType" width="507" height="266" /></a>\r\n\r\n&nbsp;";s:10:"post_title";s:8:"WS Types";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:8:"ws-types";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2015-03-23 18:58:46";s:17:"post_modified_gmt";s:19:"2015-03-23 18:58:46";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";i:14;s:4:"guid";s:39:"http://localhost/ittutorial/?page_id=54";s:10:"menu_order";i:0;s:9:"post_type";s:4:"page";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:6:"filter";s:3:"raw";}}s:4:"cats";a:5:{i:0;O:8:"stdClass":15:{s:7:"term_id";s:1:"3";s:4:"name";s:9:"Core Java";s:4:"slug";s:9:"core-java";s:10:"term_group";s:1:"0";s:16:"term_taxonomy_id";s:1:"3";s:8:"taxonomy";s:8:"category";s:11:"description";s:0:"";s:6:"parent";s:1:"0";s:5:"count";s:1:"1";s:6:"cat_ID";R:605;s:14:"category_count";R:613;s:20:"category_description";R:611;s:8:"cat_name";R:606;s:17:"category_nicename";R:607;s:15:"category_parent";R:612;}i:1;O:8:"stdClass":15:{s:7:"term_id";s:1:"5";s:4:"name";s:3:"Jsp";s:4:"slug";s:3:"jsp";s:10:"term_group";s:1:"0";s:16:"term_taxonomy_id";s:1:"5";s:8:"taxonomy";s:8:"category";s:11:"description";s:0:"";s:6:"parent";s:1:"0";s:5:"count";s:1:"0";s:6:"cat_ID";R:615;s:14:"category_count";R:623;s:20:"category_description";R:621;s:8:"cat_name";R:616;s:17:"category_nicename";R:617;s:15:"category_parent";R:622;}i:2;O:8:"stdClass":15:{s:7:"term_id";s:1:"6";s:4:"name";s:7:"Restful";s:4:"slug";s:7:"restful";s:10:"term_group";s:1:"0";s:16:"term_taxonomy_id";s:1:"6";s:8:"taxonomy";s:8:"category";s:11:"description";s:27:"Restful Web Service program";s:6:"parent";s:1:"0";s:5:"count";s:1:"0";s:6:"cat_ID";R:625;s:14:"category_count";R:633;s:20:"category_description";R:631;s:8:"cat_name";R:626;s:17:"category_nicename";R:627;s:15:"category_parent";R:632;}i:3;O:8:"stdClass":15:{s:7:"term_id";s:1:"4";s:4:"name";s:7:"Servlet";s:4:"slug";s:7:"servlet";s:10:"term_group";s:1:"0";s:16:"term_taxonomy_id";s:1:"4";s:8:"taxonomy";s:8:"category";s:11:"description";s:0:"";s:6:"parent";s:1:"0";s:5:"count";s:1:"1";s:6:"cat_ID";R:635;s:14:"category_count";R:643;s:20:"category_description";R:641;s:8:"cat_name";R:636;s:17:"category_nicename";R:637;s:15:"category_parent";R:642;}i:4;O:8:"stdClass":15:{s:7:"term_id";s:1:"1";s:4:"name";s:13:"Uncategorized";s:4:"slug";s:13:"uncategorized";s:10:"term_group";s:1:"0";s:16:"term_taxonomy_id";s:1:"1";s:8:"taxonomy";s:8:"category";s:11:"description";s:0:"";s:6:"parent";s:1:"0";s:5:"count";s:1:"1";s:6:"cat_ID";R:645;s:14:"category_count";R:653;s:20:"category_description";R:651;s:8:"cat_name";R:646;s:17:"category_nicename";R:647;s:15:"category_parent";R:652;}}s:6:"cposts";a:0:{}s:5:"taxes";a:0:{}}', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(511, 'category_children', 'a:0:{}', 'yes'),
(520, '_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca', '1457900617', 'no'),
(521, '_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca', '1457900617', 'no'),
(522, '_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca', '1457857417', 'no'),
(523, '_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9', '1457900620', 'no'),
(524, '_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9', '1457900620', 'no'),
(525, '_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9', '1457857420', 'no'),
(526, '_site_transient_timeout_available_translations', '1457868221', 'yes'),
(527, '_site_transient_available_translations', 'a:56:{s:2:"ar";a:8:{s:8:"language";s:2:"ar";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-21 15:46:45";s:12:"english_name";s:6:"Arabic";s:11:"native_name";s:14:"العربية";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/ar.zip";s:3:"iso";a:2:{i:1;s:2:"ar";i:2;s:3:"ara";}s:7:"strings";a:1:{s:8:"continue";s:16:"المتابعة";}}s:2:"az";a:8:{s:8:"language";s:2:"az";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:15:41";s:12:"english_name";s:11:"Azerbaijani";s:11:"native_name";s:16:"Azərbaycan dili";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/az.zip";s:3:"iso";a:2:{i:1;s:2:"az";i:2;s:3:"aze";}s:7:"strings";a:1:{s:8:"continue";s:5:"Davam";}}s:5:"bg_BG";a:8:{s:8:"language";s:5:"bg_BG";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:19:26";s:12:"english_name";s:9:"Bulgarian";s:11:"native_name";s:18:"Български";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/bg_BG.zip";s:3:"iso";a:2:{i:1;s:2:"bg";i:2;s:3:"bul";}s:7:"strings";a:1:{s:8:"continue";s:22:"Продължение";}}s:5:"bs_BA";a:8:{s:8:"language";s:5:"bs_BA";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:22:49";s:12:"english_name";s:7:"Bosnian";s:11:"native_name";s:8:"Bosanski";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/bs_BA.zip";s:3:"iso";a:2:{i:1;s:2:"bs";i:2;s:3:"bos";}s:7:"strings";a:1:{s:8:"continue";s:7:"Nastavi";}}s:2:"ca";a:8:{s:8:"language";s:2:"ca";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-22 06:13:16";s:12:"english_name";s:7:"Catalan";s:11:"native_name";s:7:"Català";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/ca.zip";s:3:"iso";a:2:{i:1;s:2:"ca";i:2;s:3:"cat";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continua";}}s:2:"cy";a:8:{s:8:"language";s:2:"cy";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-08-17 08:13:27";s:12:"english_name";s:5:"Welsh";s:11:"native_name";s:7:"Cymraeg";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/cy.zip";s:3:"iso";a:2:{i:1;s:2:"cy";i:2;s:3:"cym";}s:7:"strings";a:1:{s:8:"continue";s:6:"Parhau";}}s:5:"da_DK";a:8:{s:8:"language";s:5:"da_DK";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:32:23";s:12:"english_name";s:6:"Danish";s:11:"native_name";s:5:"Dansk";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/da_DK.zip";s:3:"iso";a:2:{i:1;s:2:"da";i:2;s:3:"dan";}s:7:"strings";a:1:{s:8:"continue";s:12:"Forts&#230;t";}}s:5:"de_DE";a:8:{s:8:"language";s:5:"de_DE";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2016-02-29 10:48:18";s:12:"english_name";s:6:"German";s:11:"native_name";s:7:"Deutsch";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/de_DE.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:10:"Fortfahren";}}s:12:"de_DE_formal";a:8:{s:8:"language";s:12:"de_DE_formal";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:36:24";s:12:"english_name";s:15:"German (Formal)";s:11:"native_name";s:13:"Deutsch (Sie)";s:7:"package";s:72:"https://downloads.wordpress.org/translation/core/4.1.10/de_DE_formal.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:10:"Fortfahren";}}s:5:"de_CH";a:8:{s:8:"language";s:5:"de_CH";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:38:25";s:12:"english_name";s:20:"German (Switzerland)";s:11:"native_name";s:17:"Deutsch (Schweiz)";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/de_CH.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:10:"Fortfahren";}}s:2:"el";a:8:{s:8:"language";s:2:"el";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-07-24 12:08:43";s:12:"english_name";s:5:"Greek";s:11:"native_name";s:16:"Ελληνικά";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/el.zip";s:3:"iso";a:2:{i:1;s:2:"el";i:2;s:3:"ell";}s:7:"strings";a:1:{s:8:"continue";s:16:"Συνέχεια";}}s:5:"en_GB";a:8:{s:8:"language";s:5:"en_GB";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:46:15";s:12:"english_name";s:12:"English (UK)";s:11:"native_name";s:12:"English (UK)";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/en_GB.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_CA";a:8:{s:8:"language";s:5:"en_CA";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:44:26";s:12:"english_name";s:16:"English (Canada)";s:11:"native_name";s:16:"English (Canada)";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/en_CA.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_AU";a:8:{s:8:"language";s:5:"en_AU";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:42:35";s:12:"english_name";s:19:"English (Australia)";s:11:"native_name";s:19:"English (Australia)";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/en_AU.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:2:"eo";a:8:{s:8:"language";s:2:"eo";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:48:12";s:12:"english_name";s:9:"Esperanto";s:11:"native_name";s:9:"Esperanto";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/eo.zip";s:3:"iso";a:2:{i:1;s:2:"eo";i:2;s:3:"epo";}s:7:"strings";a:1:{s:8:"continue";s:8:"Daŭrigi";}}s:5:"es_ES";a:8:{s:8:"language";s:5:"es_ES";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:50:12";s:12:"english_name";s:15:"Spanish (Spain)";s:11:"native_name";s:8:"Español";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/es_ES.zip";s:3:"iso";a:1:{i:1;s:2:"es";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_MX";a:8:{s:8:"language";s:5:"es_MX";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-24 16:07:13";s:12:"english_name";s:16:"Spanish (Mexico)";s:11:"native_name";s:19:"Español de México";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/es_MX.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_PE";a:8:{s:8:"language";s:5:"es_PE";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 14:56:31";s:12:"english_name";s:14:"Spanish (Peru)";s:11:"native_name";s:17:"Español de Perú";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/es_PE.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_CL";a:8:{s:8:"language";s:5:"es_CL";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-04 19:47:01";s:12:"english_name";s:15:"Spanish (Chile)";s:11:"native_name";s:17:"Español de Chile";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.0/es_CL.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:2:"eu";a:8:{s:8:"language";s:2:"eu";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-27 08:55:29";s:12:"english_name";s:6:"Basque";s:11:"native_name";s:7:"Euskara";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/eu.zip";s:3:"iso";a:2:{i:1;s:2:"eu";i:2;s:3:"eus";}s:7:"strings";a:1:{s:8:"continue";s:8:"Jarraitu";}}s:5:"fa_IR";a:8:{s:8:"language";s:5:"fa_IR";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:03:17";s:12:"english_name";s:7:"Persian";s:11:"native_name";s:10:"فارسی";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/fa_IR.zip";s:3:"iso";a:2:{i:1;s:2:"fa";i:2;s:3:"fas";}s:7:"strings";a:1:{s:8:"continue";s:10:"ادامه";}}s:2:"fi";a:8:{s:8:"language";s:2:"fi";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-12-07 08:23:48";s:12:"english_name";s:7:"Finnish";s:11:"native_name";s:5:"Suomi";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/fi.zip";s:3:"iso";a:2:{i:1;s:2:"fi";i:2;s:3:"fin";}s:7:"strings";a:1:{s:8:"continue";s:5:"Jatka";}}s:5:"fr_FR";a:8:{s:8:"language";s:5:"fr_FR";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2016-03-08 17:33:33";s:12:"english_name";s:15:"French (France)";s:11:"native_name";s:9:"Français";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/fr_FR.zip";s:3:"iso";a:1:{i:1;s:2:"fr";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuer";}}s:2:"gd";a:8:{s:8:"language";s:2:"gd";s:7:"version";s:3:"4.0";s:7:"updated";s:19:"2014-09-05 17:37:43";s:12:"english_name";s:15:"Scottish Gaelic";s:11:"native_name";s:9:"Gàidhlig";s:7:"package";s:59:"https://downloads.wordpress.org/translation/core/4.0/gd.zip";s:3:"iso";a:3:{i:1;s:2:"gd";i:2;s:3:"gla";i:3;s:3:"gla";}s:7:"strings";a:1:{s:8:"continue";s:15:"Lean air adhart";}}s:5:"gl_ES";a:8:{s:8:"language";s:5:"gl_ES";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:14:57";s:12:"english_name";s:8:"Galician";s:11:"native_name";s:6:"Galego";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/gl_ES.zip";s:3:"iso";a:2:{i:1;s:2:"gl";i:2;s:3:"glg";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:3:"haz";a:8:{s:8:"language";s:3:"haz";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:20:27";s:12:"english_name";s:8:"Hazaragi";s:11:"native_name";s:15:"هزاره گی";s:7:"package";s:63:"https://downloads.wordpress.org/translation/core/4.1.10/haz.zip";s:3:"iso";a:1:{i:3;s:3:"haz";}s:7:"strings";a:1:{s:8:"continue";s:10:"ادامه";}}s:5:"he_IL";a:8:{s:8:"language";s:5:"he_IL";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-08 22:28:26";s:12:"english_name";s:6:"Hebrew";s:11:"native_name";s:16:"עִבְרִית";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/he_IL.zip";s:3:"iso";a:1:{i:1;s:2:"he";}s:7:"strings";a:1:{s:8:"continue";s:12:"להמשיך";}}s:2:"hr";a:8:{s:8:"language";s:2:"hr";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:25:25";s:12:"english_name";s:8:"Croatian";s:11:"native_name";s:8:"Hrvatski";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/hr.zip";s:3:"iso";a:2:{i:1;s:2:"hr";i:2;s:3:"hrv";}s:7:"strings";a:1:{s:8:"continue";s:7:"Nastavi";}}s:5:"hu_HU";a:8:{s:8:"language";s:5:"hu_HU";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-09-15 15:59:46";s:12:"english_name";s:9:"Hungarian";s:11:"native_name";s:6:"Magyar";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/hu_HU.zip";s:3:"iso";a:2:{i:1;s:2:"hu";i:2;s:3:"hun";}s:7:"strings";a:1:{s:8:"continue";s:7:"Tovább";}}s:5:"id_ID";a:8:{s:8:"language";s:5:"id_ID";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:29:34";s:12:"english_name";s:10:"Indonesian";s:11:"native_name";s:16:"Bahasa Indonesia";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/id_ID.zip";s:3:"iso";a:2:{i:1;s:2:"id";i:2;s:3:"ind";}s:7:"strings";a:1:{s:8:"continue";s:9:"Lanjutkan";}}s:5:"is_IS";a:8:{s:8:"language";s:5:"is_IS";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-22 13:36:50";s:12:"english_name";s:9:"Icelandic";s:11:"native_name";s:9:"Íslenska";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/is_IS.zip";s:3:"iso";a:2:{i:1;s:2:"is";i:2;s:3:"isl";}s:7:"strings";a:1:{s:8:"continue";s:6:"Áfram";}}s:5:"it_IT";a:8:{s:8:"language";s:5:"it_IT";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:33:39";s:12:"english_name";s:7:"Italian";s:11:"native_name";s:8:"Italiano";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/it_IT.zip";s:3:"iso";a:2:{i:1;s:2:"it";i:2;s:3:"ita";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continua";}}s:2:"ja";a:8:{s:8:"language";s:2:"ja";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:35:42";s:12:"english_name";s:8:"Japanese";s:11:"native_name";s:9:"日本語";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/ja.zip";s:3:"iso";a:1:{i:1;s:2:"ja";}s:7:"strings";a:1:{s:8:"continue";s:9:"続ける";}}s:5:"ko_KR";a:8:{s:8:"language";s:5:"ko_KR";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-20 11:48:55";s:12:"english_name";s:6:"Korean";s:11:"native_name";s:9:"한국어";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/ko_KR.zip";s:3:"iso";a:2:{i:1;s:2:"ko";i:2;s:3:"kor";}s:7:"strings";a:1:{s:8:"continue";s:6:"계속";}}s:5:"lt_LT";a:8:{s:8:"language";s:5:"lt_LT";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:47:56";s:12:"english_name";s:10:"Lithuanian";s:11:"native_name";s:15:"Lietuvių kalba";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/lt_LT.zip";s:3:"iso";a:2:{i:1;s:2:"lt";i:2;s:3:"lit";}s:7:"strings";a:1:{s:8:"continue";s:6:"Tęsti";}}s:5:"my_MM";a:8:{s:8:"language";s:5:"my_MM";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:57:42";s:12:"english_name";s:17:"Myanmar (Burmese)";s:11:"native_name";s:15:"ဗမာစာ";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/my_MM.zip";s:3:"iso";a:2:{i:1;s:2:"my";i:2;s:3:"mya";}s:7:"strings";a:1:{s:8:"continue";s:54:"ဆက်လက်လုပ်ေဆာင်ပါ။";}}s:5:"nb_NO";a:8:{s:8:"language";s:5:"nb_NO";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 15:59:41";s:12:"english_name";s:19:"Norwegian (Bokmål)";s:11:"native_name";s:13:"Norsk bokmål";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/nb_NO.zip";s:3:"iso";a:2:{i:1;s:2:"nb";i:2;s:3:"nob";}s:7:"strings";a:1:{s:8:"continue";s:8:"Fortsett";}}s:5:"nl_NL";a:8:{s:8:"language";s:5:"nl_NL";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:02:30";s:12:"english_name";s:5:"Dutch";s:11:"native_name";s:10:"Nederlands";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/nl_NL.zip";s:3:"iso";a:2:{i:1;s:2:"nl";i:2;s:3:"nld";}s:7:"strings";a:1:{s:8:"continue";s:8:"Doorgaan";}}s:5:"nn_NO";a:8:{s:8:"language";s:5:"nn_NO";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-16 06:38:46";s:12:"english_name";s:19:"Norwegian (Nynorsk)";s:11:"native_name";s:13:"Norsk nynorsk";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/nn_NO.zip";s:3:"iso";a:2:{i:1;s:2:"nn";i:2;s:3:"nno";}s:7:"strings";a:1:{s:8:"continue";s:9:"Hald fram";}}s:5:"pl_PL";a:8:{s:8:"language";s:5:"pl_PL";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:07:08";s:12:"english_name";s:6:"Polish";s:11:"native_name";s:6:"Polski";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/pl_PL.zip";s:3:"iso";a:2:{i:1;s:2:"pl";i:2;s:3:"pol";}s:7:"strings";a:1:{s:8:"continue";s:9:"Kontynuuj";}}s:2:"ps";a:8:{s:8:"language";s:2:"ps";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-29 22:19:48";s:12:"english_name";s:6:"Pashto";s:11:"native_name";s:8:"پښتو";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/ps.zip";s:3:"iso";a:2:{i:1;s:2:"ps";i:2;s:3:"pus";}s:7:"strings";a:1:{s:8:"continue";s:8:"دوام";}}s:5:"pt_PT";a:8:{s:8:"language";s:5:"pt_PT";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:11:07";s:12:"english_name";s:21:"Portuguese (Portugal)";s:11:"native_name";s:10:"Português";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/pt_PT.zip";s:3:"iso";a:1:{i:1;s:2:"pt";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"pt_BR";a:8:{s:8:"language";s:5:"pt_BR";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2016-03-03 17:28:45";s:12:"english_name";s:19:"Portuguese (Brazil)";s:11:"native_name";s:20:"Português do Brasil";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/pt_BR.zip";s:3:"iso";a:2:{i:1;s:2:"pt";i:2;s:3:"por";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"ro_RO";a:8:{s:8:"language";s:5:"ro_RO";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-27 14:48:56";s:12:"english_name";s:8:"Romanian";s:11:"native_name";s:8:"Română";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/ro_RO.zip";s:3:"iso";a:2:{i:1;s:2:"ro";i:2;s:3:"ron";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuă";}}s:5:"ru_RU";a:8:{s:8:"language";s:5:"ru_RU";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:19:48";s:12:"english_name";s:7:"Russian";s:11:"native_name";s:14:"Русский";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/ru_RU.zip";s:3:"iso";a:2:{i:1;s:2:"ru";i:2;s:3:"rus";}s:7:"strings";a:1:{s:8:"continue";s:20:"Продолжить";}}s:5:"sk_SK";a:8:{s:8:"language";s:5:"sk_SK";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:23:44";s:12:"english_name";s:6:"Slovak";s:11:"native_name";s:11:"Slovenčina";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/sk_SK.zip";s:3:"iso";a:2:{i:1;s:2:"sk";i:2;s:3:"slk";}s:7:"strings";a:1:{s:8:"continue";s:12:"Pokračovať";}}s:5:"sl_SI";a:8:{s:8:"language";s:5:"sl_SI";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:25:46";s:12:"english_name";s:9:"Slovenian";s:11:"native_name";s:13:"Slovenščina";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/sl_SI.zip";s:3:"iso";a:2:{i:1;s:2:"sl";i:2;s:3:"slv";}s:7:"strings";a:1:{s:8:"continue";s:10:"Nadaljujte";}}s:2:"sq";a:8:{s:8:"language";s:2:"sq";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-20 08:33:09";s:12:"english_name";s:8:"Albanian";s:11:"native_name";s:5:"Shqip";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/sq.zip";s:3:"iso";a:2:{i:1;s:2:"sq";i:2;s:3:"sqi";}s:7:"strings";a:1:{s:8:"continue";s:6:"Vazhdo";}}s:5:"sr_RS";a:8:{s:8:"language";s:5:"sr_RS";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:30:35";s:12:"english_name";s:7:"Serbian";s:11:"native_name";s:23:"Српски језик";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/sr_RS.zip";s:3:"iso";a:2:{i:1;s:2:"sr";i:2;s:3:"srp";}s:7:"strings";a:1:{s:8:"continue";s:14:"Настави";}}s:5:"sv_SE";a:8:{s:8:"language";s:5:"sv_SE";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-08-25 16:13:32";s:12:"english_name";s:7:"Swedish";s:11:"native_name";s:7:"Svenska";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/sv_SE.zip";s:3:"iso";a:2:{i:1;s:2:"sv";i:2;s:3:"swe";}s:7:"strings";a:1:{s:8:"continue";s:9:"Fortsätt";}}s:2:"th";a:8:{s:8:"language";s:2:"th";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-27 00:00:51";s:12:"english_name";s:4:"Thai";s:11:"native_name";s:9:"ไทย";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/th.zip";s:3:"iso";a:2:{i:1;s:2:"th";i:2;s:3:"tha";}s:7:"strings";a:1:{s:8:"continue";s:15:"ต่อไป";}}s:5:"tr_TR";a:8:{s:8:"language";s:5:"tr_TR";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-07-24 13:30:08";s:12:"english_name";s:7:"Turkish";s:11:"native_name";s:8:"Türkçe";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/tr_TR.zip";s:3:"iso";a:2:{i:1;s:2:"tr";i:2;s:3:"tur";}s:7:"strings";a:1:{s:8:"continue";s:5:"Devam";}}s:5:"ug_CN";a:8:{s:8:"language";s:5:"ug_CN";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-03-26 16:45:38";s:12:"english_name";s:6:"Uighur";s:11:"native_name";s:9:"Uyƣurqə";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/ug_CN.zip";s:3:"iso";a:2:{i:1;s:2:"ug";i:2;s:3:"uig";}s:7:"strings";a:1:{s:8:"continue";s:26:"داۋاملاشتۇرۇش";}}s:2:"uk";a:8:{s:8:"language";s:2:"uk";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-04-10 12:55:55";s:12:"english_name";s:9:"Ukrainian";s:11:"native_name";s:20:"Українська";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.10/uk.zip";s:3:"iso";a:2:{i:1;s:2:"uk";i:2;s:3:"ukr";}s:7:"strings";a:1:{s:8:"continue";s:20:"Продовжити";}}s:5:"zh_TW";a:8:{s:8:"language";s:5:"zh_TW";s:7:"version";s:6:"4.1.10";s:7:"updated";s:19:"2015-08-08 11:59:20";s:12:"english_name";s:16:"Chinese (Taiwan)";s:11:"native_name";s:12:"繁體中文";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.10/zh_TW.zip";s:3:"iso";a:2:{i:1;s:2:"zh";i:2;s:3:"zho";}s:7:"strings";a:1:{s:8:"continue";s:6:"繼續";}}s:5:"zh_CN";a:8:{s:8:"language";s:5:"zh_CN";s:7:"version";s:5:"4.1.4";s:7:"updated";s:19:"2015-04-23 15:23:08";s:12:"english_name";s:15:"Chinese (China)";s:11:"native_name";s:12:"简体中文";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.1.4/zh_CN.zip";s:3:"iso";a:2:{i:1;s:2:"zh";i:2;s:3:"zho";}s:7:"strings";a:1:{s:8:"continue";s:6:"继续";}}}', 'yes'),
(528, '_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109', '1457900622', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(529, '_transient_feed_b9388c83948825c1edaef0d856b7b109', 'a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:3:"\n	\n";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:117:"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:34:"WordPress Plugins » View: Popular";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:45:"https://wordpress.org/plugins/browse/popular/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:34:"WordPress Plugins » View: Popular";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"language";a:1:{i:0;a:5:{s:4:"data";s:5:"en-US";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 13 Mar 2016 08:07:02 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:25:"http://bbpress.org/?v=1.1";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:30:{i:0;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:21:"Regenerate Thumbnails";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:62:"https://wordpress.org/plugins/regenerate-thumbnails/#post-6743";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 23 Aug 2008 14:38:58 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"6743@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:76:"Allows you to regenerate your thumbnails after changing the thumbnail sizes.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:25:"Alex Mills (Viper007Bond)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"Akismet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:46:"https://wordpress.org/plugins/akismet/#post-15";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 09 Mar 2007 22:11:30 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"15@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:98:"Akismet checks your comments against the Akismet Web service to see if they look like spam or not.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"Matt Mullenweg";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"Wordfence Security";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:51:"https://wordpress.org/plugins/wordfence/#post-29832";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 04 Sep 2011 03:13:51 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"29832@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:138:"The Wordfence WordPress security plugin provides free enterprise-class WordPress security, protecting your website from hacks and malware.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:9:"Wordfence";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"TinyMCE Advanced";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:57:"https://wordpress.org/plugins/tinymce-advanced/#post-2082";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 27 Jun 2007 15:00:26 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"2082@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:71:"Enables the advanced features of TinyMCE, the WordPress WYSIWYG editor.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:10:"Andrew Ozz";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"NextGEN Gallery";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:56:"https://wordpress.org/plugins/nextgen-gallery/#post-1169";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 23 Apr 2007 20:08:06 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"1169@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:121:"The most popular WordPress gallery plugin and one of the most popular plugins of all time with over 13 million downloads.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:9:"Alex Rabe";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"Duplicate Post";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:55:"https://wordpress.org/plugins/duplicate-post/#post-2646";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 05 Dec 2007 17:40:03 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"2646@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:22:"Clone posts and pages.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:4:"Lopo";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"WP Super Cache";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:55:"https://wordpress.org/plugins/wp-super-cache/#post-2572";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 05 Nov 2007 11:40:04 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"2572@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:73:"A very fast caching engine for WordPress that produces static html files.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:16:"Donncha O Caoimh";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:9:"Yoast SEO";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:54:"https://wordpress.org/plugins/wordpress-seo/#post-8321";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 01 Jan 2009 20:34:44 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"8321@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:114:"Improve your WordPress SEO: Write better content and have a fully optimized WordPress site using Yoast SEO plugin.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Joost de Valk";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"All in One SEO Pack";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:59:"https://wordpress.org/plugins/all-in-one-seo-pack/#post-753";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 30 Mar 2007 20:08:18 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"753@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:150:"The most downloaded plugin for WordPress (almost 30 million downloads). Use All in One SEO Pack to automatically optimize your site for Search Engines";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:8:"uberdose";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"WP-PageNavi";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:51:"https://wordpress.org/plugins/wp-pagenavi/#post-363";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 09 Mar 2007 23:17:57 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"363@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:49:"Adds a more advanced paging navigation interface.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Lester Chan";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Advanced Custom Fields";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:64:"https://wordpress.org/plugins/advanced-custom-fields/#post-25254";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 17 Mar 2011 04:07:30 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"25254@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:68:"Customise WordPress with powerful, professional and intuitive fields";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:12:"elliotcondon";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:11;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:25:"Google Analytics by Yoast";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:71:"https://wordpress.org/plugins/google-analytics-for-wordpress/#post-2316";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 14 Sep 2007 12:15:27 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"2316@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:124:"Track your WordPress site easily with the latest tracking codes and lots added data for search result pages and error pages.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"Joost de Valk";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:12;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:21:"Really Simple CAPTCHA";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:62:"https://wordpress.org/plugins/really-simple-captcha/#post-9542";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 09 Mar 2009 02:17:35 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"9542@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:138:"Really Simple CAPTCHA is a CAPTCHA module intended to be called from other plugins. It is originally created for my Contact Form 7 plugin.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:16:"Takayuki Miyoshi";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:13;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"WooCommerce";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:53:"https://wordpress.org/plugins/woocommerce/#post-29860";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 05 Sep 2011 08:13:36 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"29860@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:97:"WooCommerce is a powerful, extendable eCommerce plugin that helps you sell anything. Beautifully.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:9:"WooThemes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:14;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"Google XML Sitemaps";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:64:"https://wordpress.org/plugins/google-sitemap-generator/#post-132";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 09 Mar 2007 22:31:32 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"132@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:105:"This plugin will generate a special XML sitemap which will help search engines to better index your blog.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"Arne Brachhold";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:15;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"Hello Dolly";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:52:"https://wordpress.org/plugins/hello-dolly/#post-5790";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 29 May 2008 22:11:34 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"5790@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:150:"This is not just a plugin, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Louis Armstrong.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"Matt Mullenweg";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:16;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"WordPress Importer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:60:"https://wordpress.org/plugins/wordpress-importer/#post-18101";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 20 May 2010 17:42:45 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"18101@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:101:"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"Brian Colinger";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:17;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"W3 Total Cache";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:56:"https://wordpress.org/plugins/w3-total-cache/#post-12073";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 29 Jul 2009 18:46:31 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"12073@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:132:"Easy Web Performance Optimization (WPO) using caching: browser, page, object, database, minify and content delivery network support.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:16:"Frederick Townes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:18;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"Jetpack by WordPress.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:49:"https://wordpress.org/plugins/jetpack/#post-23862";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 20 Jan 2011 02:21:38 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"23862@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:107:"Increase your traffic, view your stats, speed up your site, and protect yourself from hackers with Jetpack.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:9:"Tim Moore";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:19;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"Contact Form 7";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:55:"https://wordpress.org/plugins/contact-form-7/#post-2141";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 02 Aug 2007 12:45:03 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"2141@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:54:"Just another contact form plugin. Simple but flexible.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:16:"Takayuki Miyoshi";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:20;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"Disable Comments";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:58:"https://wordpress.org/plugins/disable-comments/#post-26907";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 27 May 2011 04:42:58 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"26907@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:134:"Allows administrators to globally disable comments on their site. Comments can be disabled according to post type. Multisite friendly.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:10:"Samir Shah";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:21;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:26:"Page Builder by SiteOrigin";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:59:"https://wordpress.org/plugins/siteorigin-panels/#post-51888";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 11 Apr 2013 10:36:42 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"51888@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:111:"Build responsive page layouts using the widgets you know and love using this simple drag and drop page builder.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Greg Priday";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:22;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"WP Multibyte Patch";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:60:"https://wordpress.org/plugins/wp-multibyte-patch/#post-28395";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 14 Jul 2011 12:22:53 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"28395@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:71:"Multibyte functionality enhancement for the WordPress Japanese package.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:13:"plugin-master";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:23;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:27:"Black Studio TinyMCE Widget";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:69:"https://wordpress.org/plugins/black-studio-tinymce-widget/#post-31973";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 10 Nov 2011 15:06:14 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"31973@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:39:"The visual editor widget for Wordpress.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:12:"Marco Chiesi";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:24;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:46:"iThemes Security (formerly Better WP Security)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:60:"https://wordpress.org/plugins/better-wp-security/#post-21738";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Fri, 22 Oct 2010 22:06:05 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"21738@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:150:"Protect your WordPress site by hiding vital areas of your site, protecting access to important files, preventing brute-force login attempts, detecting";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:7:"iThemes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:25;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:33:"Google Analytics Dashboard for WP";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:75:"https://wordpress.org/plugins/google-analytics-dashboard-for-wp/#post-50539";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 10 Mar 2013 17:07:11 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"50539@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:127:"Displays Google Analytics reports in your WordPress Dashboard. Inserts the latest Google Analytics tracking code in your pages.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:10:"Alin Marcu";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:26;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:30:"Clef Two-Factor Authentication";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:48:"https://wordpress.org/plugins/wpclef/#post-47509";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 27 Dec 2012 01:25:57 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"47509@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:138:"Modern two-factor that people love to use: strong authentication without passwords or tokens; single sign on/off; magical user experience.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:9:"Dave Ross";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:27;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:34:"UpdraftPlus Backup and Restoration";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:53:"https://wordpress.org/plugins/updraftplus/#post-38058";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 May 2012 15:14:11 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"38058@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:148:"Backup and restoration made easy. Complete backups; manual or scheduled (backup to S3, Dropbox, Google Drive, Rackspace, FTP, SFTP, email + others).";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:14:"David Anderson";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:28;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:10:"Duplicator";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:52:"https://wordpress.org/plugins/duplicator/#post-26607";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 16 May 2011 12:15:41 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"26607@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:88:"Duplicate, clone, backup, move and transfer an entire site from one location to another.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:10:"Cory Lamle";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:29;a:6:{s:4:"data";s:30:"\n			\n			\n			\n			\n			\n			\n					";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"Meta Slider";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:51:"https://wordpress.org/plugins/ml-slider/#post-49521";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Thu, 14 Feb 2013 16:56:31 +0000";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"49521@https://wordpress.org/plugins/";s:7:"attribs";a:1:{s:0:"";a:1:{s:11:"isPermaLink";s:5:"false";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:145:"Easy to use WordPress slider plugin. Create SEO optimised responsive slideshows with Nivo Slider, Flex Slider, Coin Slider and Responsive Slides.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://purl.org/dc/elements/1.1/";a:1:{s:7:"creator";a:1:{i:0;a:5:{s:4:"data";s:11:"Matcha Labs";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:4:"href";s:46:"https://wordpress.org/plugins/rss/view/popular";s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:12:{s:6:"server";s:5:"nginx";s:4:"date";s:29:"Sun, 13 Mar 2016 08:23:42 GMT";s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:10:"connection";s:5:"close";s:4:"vary";s:15:"Accept-Encoding";s:25:"strict-transport-security";s:11:"max-age=360";s:7:"expires";s:29:"Sun, 13 Mar 2016 08:42:02 GMT";s:13:"cache-control";s:0:"";s:6:"pragma";s:0:"";s:13:"last-modified";s:31:"Sun, 13 Mar 2016 08:07:02 +0000";s:15:"x-frame-options";s:10:"SAMEORIGIN";s:4:"x-nc";s:11:"HIT lax 249";}s:5:"build";s:14:"20130911040210";}', 'no'),
(530, '_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109', '1457900622', 'no'),
(531, '_transient_feed_mod_b9388c83948825c1edaef0d856b7b109', '1457857422', 'no'),
(532, '_transient_timeout_plugin_slugs', '1457943822', 'no'),
(533, '_transient_plugin_slugs', 'a:10:{i:0;s:41:"advanced-post-list/advanced-post-list.php";i:1;s:19:"akismet/akismet.php";i:2;s:43:"all-in-one-seo-pack/all_in_one_seo_pack.php";i:3;s:28:"category-posts/cat-posts.php";i:4;s:35:"display-widgets/display-widgets.php";i:5;s:35:"dynamic-widgets/dynamic-widgets.php";i:6;s:41:"flexi-pages-widget/flexi-pages-widget.php";i:7;s:9:"hello.php";i:8;s:45:"mechanic-visitor-counter/wp-statsmechanic.php";i:9;s:84:"wordpress-plugin-for-simple-google-adsense-insertion/WP-Simple-Adsense-Insertion.php";}', 'no'),
(534, '_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51', '1457900622', 'no'),
(535, '_transient_dash_4077549d03da2e451c8b5f002294ff51', '<div class="rss-widget"><ul><li><a class=''rsswidget'' href=''https://wordpress.org/news/2016/03/wordpress-4-5-beta-3/''>WordPress 4.5 Beta 3</a> <span class="rss-date">March 10, 2016</span><div class="rssSummary">WordPress 4.5 Beta 3 is now available! This software is still in development, so we don’t recommend you run it on a production site. Consider setting up a test site just to play with the new version. To test WordPress 4.5, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can [&hellip;]</div></li></ul></div><div class="rss-widget"><ul><li><a class=''rsswidget'' href=''https://ma.tt/2016/03/changelog-podcast/''>Matt: Changelog Podcast</a></li><li><a class=''rsswidget'' href=''http://wptavern.com/in-case-you-missed-it-issue-4''>WPTavern: In Case You Missed It – Issue 4</a></li><li><a class=''rsswidget'' href=''http://wptavern.com/onepress-a-free-single-page-wordpress-theme-built-with-bootstrap-4''>WPTavern: OnePress: A Free Single-Page WordPress Theme Built with Bootstrap 4</a></li></ul></div><div class="rss-widget"><ul><li class=''dashboard-news-plugin''><span>Popular Plugin:</span> <a href=''https://wordpress.org/plugins/updraftplus/'' class=''dashboard-news-plugin-link''>UpdraftPlus Backup and Restoration</a>&nbsp;<span>(<a href=''plugin-install.php?tab=plugin-information&amp;plugin=updraftplus&amp;_wpnonce=a51bab1d03&amp;TB_iframe=true&amp;width=600&amp;height=800'' class=''thickbox'' title=''UpdraftPlus Backup and Restoration''>Install</a>)</span></li></ul></div>', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(536, 'rewrite_rules', 'a:68:{s:47:"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:42:"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:35:"category/(.+?)/page/?([0-9]{1,})/?$";s:53:"index.php?category_name=$matches[1]&paged=$matches[2]";s:17:"category/(.+?)/?$";s:35:"index.php?category_name=$matches[1]";s:44:"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:39:"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:32:"tag/([^/]+)/page/?([0-9]{1,})/?$";s:43:"index.php?tag=$matches[1]&paged=$matches[2]";s:14:"tag/([^/]+)/?$";s:25:"index.php?tag=$matches[1]";s:45:"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:40:"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:33:"type/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?post_format=$matches[1]&paged=$matches[2]";s:15:"type/([^/]+)/?$";s:33:"index.php?post_format=$matches[1]";s:48:".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$";s:18:"index.php?feed=old";s:20:".*wp-app\\.php(/.*)?$";s:19:"index.php?error=403";s:18:".*wp-register.php$";s:23:"index.php?register=true";s:32:"feed/(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:27:"(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:20:"page/?([0-9]{1,})/?$";s:28:"index.php?&paged=$matches[1]";s:27:"comment-page-([0-9]{1,})/?$";s:38:"index.php?&page_id=2&cpage=$matches[1]";s:41:"comments/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:36:"comments/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:44:"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:39:"search/(.+)/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:32:"search/(.+)/page/?([0-9]{1,})/?$";s:41:"index.php?s=$matches[1]&paged=$matches[2]";s:14:"search/(.+)/?$";s:23:"index.php?s=$matches[1]";s:47:"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:42:"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:35:"author/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?author_name=$matches[1]&paged=$matches[2]";s:17:"author/([^/]+)/?$";s:33:"index.php?author_name=$matches[1]";s:69:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:64:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:57:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:81:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]";s:39:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$";s:63:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]";s:56:"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:51:"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:44:"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:65:"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]";s:26:"([0-9]{4})/([0-9]{1,2})/?$";s:47:"index.php?year=$matches[1]&monthnum=$matches[2]";s:43:"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:38:"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:31:"([0-9]{4})/page/?([0-9]{1,})/?$";s:44:"index.php?year=$matches[1]&paged=$matches[2]";s:13:"([0-9]{4})/?$";s:26:"index.php?year=$matches[1]";s:27:".?.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:37:".?.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:57:".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:20:"(.?.+?)/trackback/?$";s:35:"index.php?pagename=$matches[1]&tb=1";s:40:"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:35:"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:28:"(.?.+?)/page/?([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&paged=$matches[2]";s:35:"(.?.+?)/comment-page-([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&cpage=$matches[2]";s:20:"(.?.+?)(/[0-9]+)?/?$";s:47:"index.php?pagename=$matches[1]&page=$matches[2]";s:27:"[^/]+/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:37:"[^/]+/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:57:"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:20:"([^/]+)/trackback/?$";s:31:"index.php?name=$matches[1]&tb=1";s:40:"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?name=$matches[1]&feed=$matches[2]";s:35:"([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?name=$matches[1]&feed=$matches[2]";s:28:"([^/]+)/page/?([0-9]{1,})/?$";s:44:"index.php?name=$matches[1]&paged=$matches[2]";s:35:"([^/]+)/comment-page-([0-9]{1,})/?$";s:44:"index.php?name=$matches[1]&cpage=$matches[2]";s:20:"([^/]+)(/[0-9]+)?/?$";s:43:"index.php?name=$matches[1]&page=$matches[2]";s:16:"[^/]+/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:26:"[^/]+/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:46:"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:41:"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:41:"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";}', 'yes'),
(538, '_site_transient_timeout_theme_roots', '1457861473', 'yes'),
(539, '_site_transient_theme_roots', 'a:5:{s:5:"kavya";s:7:"/themes";s:13:"twentyfifteen";s:7:"/themes";s:14:"twentyfourteen";s:7:"/themes";s:14:"twentythirteen";s:7:"/themes";s:13:"writing-board";s:7:"/themes";}', 'yes'),
(541, '_site_transient_update_themes', 'O:8:"stdClass":4:{s:12:"last_checked";i:1457859680;s:7:"checked";a:5:{s:5:"kavya";s:5:"1.3.3";s:13:"twentyfifteen";s:3:"1.0";s:14:"twentyfourteen";s:3:"1.3";s:14:"twentythirteen";s:3:"1.4";s:13:"writing-board";s:3:"1.5";}s:8:"response";a:4:{s:13:"twentyfifteen";a:4:{s:5:"theme";s:13:"twentyfifteen";s:11:"new_version";s:3:"1.4";s:3:"url";s:43:"https://wordpress.org/themes/twentyfifteen/";s:7:"package";s:59:"https://downloads.wordpress.org/theme/twentyfifteen.1.4.zip";}s:14:"twentyfourteen";a:4:{s:5:"theme";s:14:"twentyfourteen";s:11:"new_version";s:3:"1.6";s:3:"url";s:44:"https://wordpress.org/themes/twentyfourteen/";s:7:"package";s:60:"https://downloads.wordpress.org/theme/twentyfourteen.1.6.zip";}s:14:"twentythirteen";a:4:{s:5:"theme";s:14:"twentythirteen";s:11:"new_version";s:3:"1.7";s:3:"url";s:44:"https://wordpress.org/themes/twentythirteen/";s:7:"package";s:60:"https://downloads.wordpress.org/theme/twentythirteen.1.7.zip";}s:13:"writing-board";a:4:{s:5:"theme";s:13:"writing-board";s:11:"new_version";s:3:"1.7";s:3:"url";s:43:"https://wordpress.org/themes/writing-board/";s:7:"package";s:59:"https://downloads.wordpress.org/theme/writing-board.1.7.zip";}}s:12:"translations";a:0:{}}', 'yes'),
(542, '_site_transient_update_plugins', 'O:8:"stdClass":4:{s:12:"last_checked";i:1457859680;s:8:"response";a:7:{s:19:"akismet/akismet.php";O:8:"stdClass":6:{s:2:"id";s:2:"15";s:4:"slug";s:7:"akismet";s:6:"plugin";s:19:"akismet/akismet.php";s:11:"new_version";s:5:"3.1.8";s:3:"url";s:38:"https://wordpress.org/plugins/akismet/";s:7:"package";s:56:"https://downloads.wordpress.org/plugin/akismet.3.1.8.zip";}s:43:"all-in-one-seo-pack/all_in_one_seo_pack.php";O:8:"stdClass":6:{s:2:"id";s:3:"520";s:4:"slug";s:19:"all-in-one-seo-pack";s:6:"plugin";s:43:"all-in-one-seo-pack/all_in_one_seo_pack.php";s:11:"new_version";s:7:"2.3.2.3";s:3:"url";s:50:"https://wordpress.org/plugins/all-in-one-seo-pack/";s:7:"package";s:70:"https://downloads.wordpress.org/plugin/all-in-one-seo-pack.2.3.2.3.zip";}s:28:"category-posts/cat-posts.php";O:8:"stdClass":6:{s:2:"id";s:4:"1199";s:4:"slug";s:14:"category-posts";s:6:"plugin";s:28:"category-posts/cat-posts.php";s:11:"new_version";s:5:"4.1.5";s:3:"url";s:45:"https://wordpress.org/plugins/category-posts/";s:7:"package";s:63:"https://downloads.wordpress.org/plugin/category-posts.4.1.5.zip";}s:35:"display-widgets/display-widgets.php";O:8:"stdClass":6:{s:2:"id";s:5:"10109";s:4:"slug";s:15:"display-widgets";s:6:"plugin";s:35:"display-widgets/display-widgets.php";s:11:"new_version";s:4:"2.05";s:3:"url";s:46:"https://wordpress.org/plugins/display-widgets/";s:7:"package";s:63:"https://downloads.wordpress.org/plugin/display-widgets.2.05.zip";}s:35:"dynamic-widgets/dynamic-widgets.php";O:8:"stdClass":6:{s:2:"id";s:5:"12388";s:4:"slug";s:15:"dynamic-widgets";s:6:"plugin";s:35:"dynamic-widgets/dynamic-widgets.php";s:11:"new_version";s:6:"1.5.11";s:3:"url";s:46:"https://wordpress.org/plugins/dynamic-widgets/";s:7:"package";s:65:"https://downloads.wordpress.org/plugin/dynamic-widgets.1.5.11.zip";}s:41:"flexi-pages-widget/flexi-pages-widget.php";O:8:"stdClass":7:{s:2:"id";s:3:"847";s:4:"slug";s:18:"flexi-pages-widget";s:6:"plugin";s:41:"flexi-pages-widget/flexi-pages-widget.php";s:11:"new_version";s:5:"1.7.1";s:3:"url";s:49:"https://wordpress.org/plugins/flexi-pages-widget/";s:7:"package";s:61:"https://downloads.wordpress.org/plugin/flexi-pages-widget.zip";s:14:"upgrade_notice";s:153:"1.7 makes use of the WP Widgets API and cleans out many errors and bugs. 1.7.1 comes with a fix for the issue some users were having with upgrade to 1.7.";}s:84:"wordpress-plugin-for-simple-google-adsense-insertion/WP-Simple-Adsense-Insertion.php";O:8:"stdClass":6:{s:2:"id";s:4:"5264";s:4:"slug";s:52:"wordpress-plugin-for-simple-google-adsense-insertion";s:6:"plugin";s:84:"wordpress-plugin-for-simple-google-adsense-insertion/WP-Simple-Adsense-Insertion.php";s:11:"new_version";s:4:"v1.8";s:3:"url";s:83:"https://wordpress.org/plugins/wordpress-plugin-for-simple-google-adsense-insertion/";s:7:"package";s:95:"https://downloads.wordpress.org/plugin/wordpress-plugin-for-simple-google-adsense-insertion.zip";}}s:12:"translations";a:0:{}s:9:"no_update";a:3:{s:41:"advanced-post-list/advanced-post-list.php";O:8:"stdClass":7:{s:2:"id";s:5:"26052";s:4:"slug";s:18:"advanced-post-list";s:6:"plugin";s:41:"advanced-post-list/advanced-post-list.php";s:11:"new_version";s:6:"0.3.b8";s:3:"url";s:49:"https://wordpress.org/plugins/advanced-post-list/";s:7:"package";s:68:"https://downloads.wordpress.org/plugin/advanced-post-list.0.3.b8.zip";s:14:"upgrade_notice";s:242:"Beta Version. If upgrading from 0.2, make sure you back up the plugin data and/or \nwebsite. This update includes a couple major and blocker bugs to the Admin UI.\nFurther development may be required before releasing the stable version (0.3.0).";}s:9:"hello.php";O:8:"stdClass":6:{s:2:"id";s:4:"3564";s:4:"slug";s:11:"hello-dolly";s:6:"plugin";s:9:"hello.php";s:11:"new_version";s:3:"1.6";s:3:"url";s:42:"https://wordpress.org/plugins/hello-dolly/";s:7:"package";s:58:"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip";}s:45:"mechanic-visitor-counter/wp-statsmechanic.php";O:8:"stdClass":6:{s:2:"id";s:5:"33135";s:4:"slug";s:24:"mechanic-visitor-counter";s:6:"plugin";s:45:"mechanic-visitor-counter/wp-statsmechanic.php";s:11:"new_version";s:3:"3.0";s:3:"url";s:55:"https://wordpress.org/plugins/mechanic-visitor-counter/";s:7:"package";s:67:"https://downloads.wordpress.org/plugin/mechanic-visitor-counter.zip";}}}', 'yes');

-- --------------------------------------------------------

--
-- Table structure for table `wp_postmeta`
--

CREATE TABLE IF NOT EXISTS `wp_postmeta` (
`meta_id` bigint(20) unsigned NOT NULL,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=190 ;

--
-- Dumping data for table `wp_postmeta`
--

INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1, 2, '_wp_page_template', 'default'),
(2, 4, '_edit_last', '1'),
(3, 4, '_edit_lock', '1424975717:1'),
(4, 4, '_wp_page_template', 'default'),
(5, 6, '_edit_last', '1'),
(6, 6, '_edit_lock', '1424975767:1'),
(7, 6, '_wp_page_template', 'default'),
(8, 8, '_edit_last', '1'),
(9, 8, '_edit_lock', '1424975785:1'),
(10, 8, '_wp_page_template', 'default'),
(11, 10, '_edit_last', '1'),
(12, 10, '_edit_lock', '1424975805:1'),
(13, 10, '_wp_page_template', 'default'),
(14, 12, '_edit_last', '1'),
(15, 12, '_edit_lock', '1425328115:1'),
(16, 12, '_wp_page_template', 'default'),
(17, 14, '_edit_last', '1'),
(18, 14, '_edit_lock', '1426921820:1'),
(19, 14, '_wp_page_template', 'default'),
(20, 16, '_menu_item_type', 'post_type'),
(21, 16, '_menu_item_menu_item_parent', '0'),
(22, 16, '_menu_item_object_id', '14'),
(23, 16, '_menu_item_object', 'page'),
(24, 16, '_menu_item_target', ''),
(25, 16, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(26, 16, '_menu_item_xfn', ''),
(27, 16, '_menu_item_url', ''),
(29, 17, '_menu_item_type', 'post_type'),
(30, 17, '_menu_item_menu_item_parent', '0'),
(31, 17, '_menu_item_object_id', '12'),
(32, 17, '_menu_item_object', 'page'),
(33, 17, '_menu_item_target', ''),
(34, 17, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(35, 17, '_menu_item_xfn', ''),
(36, 17, '_menu_item_url', ''),
(38, 18, '_menu_item_type', 'post_type'),
(39, 18, '_menu_item_menu_item_parent', '0'),
(40, 18, '_menu_item_object_id', '10'),
(41, 18, '_menu_item_object', 'page'),
(42, 18, '_menu_item_target', ''),
(43, 18, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(44, 18, '_menu_item_xfn', ''),
(45, 18, '_menu_item_url', ''),
(47, 19, '_menu_item_type', 'post_type'),
(48, 19, '_menu_item_menu_item_parent', '0'),
(49, 19, '_menu_item_object_id', '8'),
(50, 19, '_menu_item_object', 'page'),
(51, 19, '_menu_item_target', ''),
(52, 19, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(53, 19, '_menu_item_xfn', ''),
(54, 19, '_menu_item_url', ''),
(56, 20, '_menu_item_type', 'post_type'),
(57, 20, '_menu_item_menu_item_parent', '0'),
(58, 20, '_menu_item_object_id', '6'),
(59, 20, '_menu_item_object', 'page'),
(60, 20, '_menu_item_target', ''),
(61, 20, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(62, 20, '_menu_item_xfn', ''),
(63, 20, '_menu_item_url', ''),
(65, 21, '_menu_item_type', 'post_type'),
(66, 21, '_menu_item_menu_item_parent', '0'),
(67, 21, '_menu_item_object_id', '4'),
(68, 21, '_menu_item_object', 'page'),
(69, 21, '_menu_item_target', ''),
(70, 21, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(71, 21, '_menu_item_xfn', ''),
(72, 21, '_menu_item_url', ''),
(74, 22, '_edit_last', '1'),
(75, 22, '_edit_lock', '1425064194:1'),
(76, 22, '_wp_page_template', 'default'),
(77, 24, '_edit_last', '1'),
(78, 24, '_edit_lock', '1425327487:1'),
(79, 24, '_wp_page_template', 'default'),
(80, 26, '_edit_last', '1'),
(81, 26, '_edit_lock', '1425064456:1'),
(82, 26, '_wp_page_template', 'default'),
(83, 28, '_edit_last', '1'),
(84, 28, '_edit_lock', '1425064746:1'),
(85, 28, '_wp_page_template', 'default'),
(86, 30, '_edit_last', '1'),
(87, 30, '_edit_lock', '1425065813:1'),
(88, 30, '_wp_page_template', 'default'),
(89, 34, '_edit_last', '1'),
(90, 34, '_edit_lock', '1425192442:1'),
(93, 36, '_edit_last', '1'),
(94, 36, '_edit_lock', '1425233294:1'),
(95, 38, '_edit_last', '1'),
(96, 38, '_edit_lock', '1426777030:1'),
(97, 38, '_wp_page_template', 'default'),
(98, 40, '_menu_item_type', 'post_type'),
(99, 40, '_menu_item_menu_item_parent', '0'),
(100, 40, '_menu_item_object_id', '38'),
(101, 40, '_menu_item_object', 'page'),
(102, 40, '_menu_item_target', ''),
(103, 40, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(104, 40, '_menu_item_xfn', ''),
(105, 40, '_menu_item_url', ''),
(107, 45, '_edit_last', '1'),
(108, 45, '_edit_lock', '1427040324:1'),
(109, 45, '_wp_page_template', 'default'),
(110, 47, '_edit_last', '1'),
(111, 47, '_edit_lock', '1426948390:1'),
(112, 47, '_wp_page_template', 'default'),
(113, 50, '_edit_last', '1'),
(114, 50, '_edit_lock', '1427006501:1'),
(115, 51, '_wp_attached_file', '2015/03/WebServicesArchitecture.jpg'),
(116, 51, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:430;s:6:"height";i:340;s:4:"file";s:35:"2015/03/WebServicesArchitecture.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"WebServicesArchitecture-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"WebServicesArchitecture-300x237.jpg";s:5:"width";i:300;s:6:"height";i:237;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:35:"WebServicesArchitecture-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(117, 50, '_wp_page_template', 'default'),
(118, 54, '_edit_last', '1'),
(119, 54, '_edit_lock', '1427137155:1'),
(120, 55, '_wp_attached_file', '2015/03/WebserviceType.png'),
(121, 55, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:249;s:6:"height";i:126;s:4:"file";s:26:"2015/03/WebserviceType.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"WebserviceType-150x126.png";s:5:"width";i:150;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"WebserviceType-150x126.png";s:5:"width";i:150;s:6:"height";i:126;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(122, 56, '_wp_attached_file', '2015/03/WSType.png'),
(123, 56, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:507;s:6:"height";i:266;s:4:"file";s:18:"2015/03/WSType.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"WSType-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:18:"WSType-300x157.png";s:5:"width";i:300;s:6:"height";i:157;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:18:"WSType-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(124, 54, '_wp_page_template', 'default'),
(127, 58, '_wp_attached_file', '2015/03/WSDiagram.png'),
(128, 58, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:688;s:6:"height";i:243;s:4:"file";s:21:"2015/03/WSDiagram.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"WSDiagram-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"WSDiagram-300x106.png";s:5:"width";i:300;s:6:"height";i:106;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:21:"WSDiagram-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(129, 61, '_edit_last', '1'),
(130, 61, '_edit_lock', '1427045517:1'),
(131, 61, '_wp_page_template', 'default'),
(132, 63, '_edit_last', '1'),
(133, 63, '_edit_lock', '1427129569:1'),
(134, 63, '_wp_page_template', 'default'),
(135, 66, '_edit_last', '1'),
(136, 66, '_edit_lock', '1427130471:1'),
(137, 67, '_wp_attached_file', '2015/03/rest-websrvices.jpg'),
(138, 67, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:585;s:6:"height";i:366;s:4:"file";s:27:"2015/03/rest-websrvices.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"rest-websrvices-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"rest-websrvices-300x188.jpg";s:5:"width";i:300;s:6:"height";i:188;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:27:"rest-websrvices-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:27:"writingboard-category-thumb";a:4:{s:4:"file";s:27:"rest-websrvices-559x350.jpg";s:5:"width";i:559;s:6:"height";i:350;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(139, 68, '_wp_attached_file', '2015/03/restful-product-service.jpg'),
(140, 68, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:899;s:6:"height";i:374;s:4:"file";s:35:"2015/03/restful-product-service.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"restful-product-service-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"restful-product-service-300x125.jpg";s:5:"width";i:300;s:6:"height";i:125;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:35:"restful-product-service-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:27:"writingboard-category-thumb";a:4:{s:4:"file";s:35:"restful-product-service-750x312.jpg";s:5:"width";i:750;s:6:"height";i:312;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(141, 69, '_wp_attached_file', '2015/03/mysql-diagram5.png'),
(142, 69, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:1197;s:6:"height";i:234;s:4:"file";s:26:"2015/03/mysql-diagram5.png";s:5:"sizes";a:6:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"mysql-diagram5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"mysql-diagram5-300x59.png";s:5:"width";i:300;s:6:"height";i:59;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:27:"mysql-diagram5-1024x200.png";s:5:"width";i:1024;s:6:"height";i:200;s:9:"mime-type";s:9:"image/png";}s:14:"post-thumbnail";a:4:{s:4:"file";s:26:"mysql-diagram5-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:27:"writingboard-category-thumb";a:4:{s:4:"file";s:26:"mysql-diagram5-750x147.png";s:5:"width";i:750;s:6:"height";i:147;s:9:"mime-type";s:9:"image/png";}s:24:"writingboard-slide-thumb";a:4:{s:4:"file";s:27:"mysql-diagram5-1100x215.png";s:5:"width";i:1100;s:6:"height";i:215;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}'),
(143, 66, '_wp_page_template', 'default'),
(146, 66, '_aioseop_title', 'restful architecture,restful web service architecture'),
(147, 71, '_edit_last', '1'),
(148, 71, '_edit_lock', '1427135573:1'),
(149, 71, '_wp_page_template', 'default'),
(150, 74, '_wp_attached_file', '2015/03/restful.jpg'),
(151, 74, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:470;s:6:"height";i:291;s:4:"file";s:19:"2015/03/restful.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"restful-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"restful-300x186.jpg";s:5:"width";i:300;s:6:"height";i:186;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:19:"restful-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}'),
(154, 54, '_aioseop_title', 'web service types'),
(155, 78, '_edit_last', '1'),
(156, 78, '_edit_lock', '1427310482:1'),
(157, 78, '_wp_page_template', 'default'),
(164, 78, '_aioseop_keywords', 'restful,maven,resteasy,jersey'),
(165, 78, '_aioseop_description', 'jersey maven dependencies and resteasy maven dependencies '),
(166, 78, '_aioseop_title', 'restful maven dependencies '),
(167, 80, '_edit_last', '1'),
(168, 80, '_edit_lock', '1427311706:1'),
(169, 80, '_wp_page_template', 'default'),
(176, 80, '_aioseop_keywords', 'Web.xml for jersey,Web.xml for resteasy'),
(177, 80, '_aioseop_description', 'Web.xml for jersey and resteasy Implementation'),
(178, 80, '_aioseop_title', 'Web.xml for jersey Implementation,'),
(179, 82, '_edit_last', '1'),
(180, 82, '_edit_lock', '1427312149:1'),
(181, 82, '_wp_page_template', 'default'),
(186, 82, '_aioseop_keywords', 'http status codes'),
(187, 82, '_aioseop_title', 'http status codes'),
(188, 85, '_edit_last', '1'),
(189, 85, '_edit_lock', '1457790291:1');

-- --------------------------------------------------------

--
-- Table structure for table `wp_posts`
--

CREATE TABLE IF NOT EXISTS `wp_posts` (
`ID` bigint(20) unsigned NOT NULL,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=87 ;

--
-- Dumping data for table `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1, 1, '2015-02-26 08:57:05', '2015-02-26 08:57:05', 'Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!', 'Hello world!', '', 'publish', 'open', 'open', '', 'hello-world', '', '', '2015-02-26 08:57:05', '2015-02-26 08:57:05', '', 0, 'http://localhost/ittutorial/?p=1', 0, 'post', '', 1),
(2, 1, '2015-02-26 08:57:05', '2015-02-26 08:57:05', 'This is an example page. It''s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I''m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin'' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href="http://localhost/ittutorial/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!', 'Sample Page', '', 'publish', 'open', 'open', '', 'sample-page', '', '', '2015-02-26 08:57:05', '2015-02-26 08:57:05', '', 0, 'http://localhost/ittutorial/?page_id=2', 0, 'page', '', 0),
(4, 1, '2015-02-26 18:37:31', '2015-02-26 18:37:31', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'JAVA', '', 'publish', 'open', 'open', '', 'java', '', '', '2015-02-26 18:37:31', '2015-02-26 18:37:31', '', 0, 'http://localhost/ittutorial/?page_id=4', 0, 'page', '', 0),
(5, 1, '2015-02-26 18:37:31', '2015-02-26 18:37:31', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'JAVA', '', 'inherit', 'open', 'open', '', '4-revision-v1', '', '', '2015-02-26 18:37:31', '2015-02-26 18:37:31', '', 4, 'http://localhost/ittutorial/?p=5', 0, 'revision', '', 0),
(6, 1, '2015-02-26 18:38:24', '2015-02-26 18:38:24', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'SERVLET', '', 'publish', 'open', 'open', '', 'servlet', '', '', '2015-02-26 18:38:24', '2015-02-26 18:38:24', '', 0, 'http://localhost/ittutorial/?page_id=6', 0, 'page', '', 0),
(7, 1, '2015-02-26 18:38:24', '2015-02-26 18:38:24', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'SERVLET', '', 'inherit', 'open', 'open', '', '6-revision-v1', '', '', '2015-02-26 18:38:24', '2015-02-26 18:38:24', '', 6, 'http://localhost/ittutorial/?p=7', 0, 'revision', '', 0),
(8, 1, '2015-02-26 18:38:41', '2015-02-26 18:38:41', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'JSP', '', 'publish', 'open', 'open', '', 'jsp', '', '', '2015-02-26 18:38:42', '2015-02-26 18:38:42', '', 0, 'http://localhost/ittutorial/?page_id=8', 0, 'page', '', 0),
(9, 1, '2015-02-26 18:38:42', '2015-02-26 18:38:42', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'JSP', '', 'inherit', 'open', 'open', '', '8-revision-v1', '', '', '2015-02-26 18:38:42', '2015-02-26 18:38:42', '', 8, 'http://localhost/ittutorial/?p=9', 0, 'revision', '', 0),
(10, 1, '2015-02-26 18:39:02', '2015-02-26 18:39:02', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'SPRING', '', 'publish', 'open', 'open', '', 'spring', '', '', '2015-02-26 18:39:02', '2015-02-26 18:39:02', '', 0, 'http://localhost/ittutorial/?page_id=10', 0, 'page', '', 0),
(11, 1, '2015-02-26 18:39:02', '2015-02-26 18:39:02', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'SPRING', '', 'inherit', 'open', 'open', '', '10-revision-v1', '', '', '2015-02-26 18:39:02', '2015-02-26 18:39:02', '', 10, 'http://localhost/ittutorial/?p=11', 0, 'revision', '', 0),
(12, 1, '2015-02-26 18:39:24', '2015-02-26 18:39:24', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.Alternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'HIBERNATE', '', 'publish', 'open', 'open', '', 'hybernate', '', '', '2015-02-27 19:42:07', '2015-02-27 19:42:07', '', 0, 'http://localhost/ittutorial/?page_id=12', 0, 'page', '', 0),
(13, 1, '2015-02-26 18:39:24', '2015-02-26 18:39:24', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'HYBERNATE', '', 'inherit', 'open', 'open', '', '12-revision-v1', '', '', '2015-02-26 18:39:24', '2015-02-26 18:39:24', '', 12, 'http://localhost/ittutorial/?p=13', 0, 'revision', '', 0),
(14, 1, '2015-02-26 18:39:55', '2015-02-26 18:39:55', '<ul>\r\n	<li>Web service is a technology that allow us to build interoperable distributed applications.</li>\r\n	<li>Web Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).</li>\r\n	<li>Web Service distributed objects is these are not only platform (OS) independent, These are even language independent.</li>\r\n	<li>We can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network.</li>\r\n	<li>Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.</li>\r\n</ul>', 'WEB SERVICE', '', 'publish', 'open', 'open', '', 'web-service', '', '', '2015-03-21 06:56:12', '2015-03-21 06:56:12', '', 0, 'http://localhost/ittutorial/?page_id=14', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(15, 1, '2015-02-26 18:39:55', '2015-02-26 18:39:55', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.\r\n\r\nAlternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.\r\n\r\n<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'WEB SERVICE', '', 'inherit', 'open', 'open', '', '14-revision-v1', '', '', '2015-02-26 18:39:55', '2015-02-26 18:39:55', '', 14, 'http://localhost/ittutorial/?p=15', 0, 'revision', '', 0),
(16, 1, '2015-02-26 18:44:16', '2015-02-26 18:44:16', ' ', '', '', 'publish', 'open', 'open', '', '16', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=16', 6, 'nav_menu_item', '', 0),
(17, 1, '2015-02-26 18:44:15', '2015-02-26 18:44:15', ' ', '', '', 'publish', 'open', 'open', '', '17', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=17', 5, 'nav_menu_item', '', 0),
(18, 1, '2015-02-26 18:44:15', '2015-02-26 18:44:15', ' ', '', '', 'publish', 'open', 'open', '', '18', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=18', 4, 'nav_menu_item', '', 0),
(19, 1, '2015-02-26 18:44:15', '2015-02-26 18:44:15', ' ', '', '', 'publish', 'open', 'open', '', '19', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=19', 3, 'nav_menu_item', '', 0),
(20, 1, '2015-02-26 18:44:15', '2015-02-26 18:44:15', ' ', '', '', 'publish', 'open', 'open', '', '20', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=20', 2, 'nav_menu_item', '', 0),
(21, 1, '2015-02-26 18:44:15', '2015-02-26 18:44:15', ' ', '', '', 'publish', 'open', 'open', '', '21', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=21', 1, 'nav_menu_item', '', 0),
(22, 1, '2015-02-27 19:02:31', '2015-02-27 19:02:31', '<div id="content" class="column">\r\n<div class="section">\r\n<div id="content-area">\r\n<div id="node-301" class="node node-type-page clearfix">\r\n<div class="content">\r\n<div class="landingPageArticle">\r\n\r\nf you''re a Windows user, getting a good SMTP server is very important. In fact, if you use a common, non-monitored SMTP email service, email providers''s antispam filters can reject your messages – even if they are legitimate.\r\n\r\nA reliable and <strong>professional SMTP service</strong> like turboSMTP, on the contrary, has a strong reputation among all ISP and will maximize the <strong>deliverability</strong> of your emails.\r\n\r\nSo the main features that an outgoing service for Windows should guarantee are:\r\n<ol>\r\n	<li><strong>It must use only reliable IP</strong>s. And also maintain a constant contact with all major email providers in order to guarantee that all your emails get to the inbox.</li>\r\n	<li><strong>It must provide a quicker email delivery</strong>. A dedicated SMTP doesn''t fall into overload issues and should enhance significantly the velocity of your mailing.</li>\r\n	<li><strong>It must bypass ISP filtering</strong>. A professional outbound server will maximize your delivery rate avoiding all the modern, aggressive antispam filters that can reject also legitimate emails.</li>\r\n	<li><strong>It must be accesible anytime and anywhere</strong>. If you''re on-the-go and using a different internet connection, you shouldn''t need to change your settings each time.</li>\r\n	<li><strong> It must keep track of your messages</strong>. To understand the results of your mailing, a dedicated SMTP service should provide also an accurate email tracking system.</li>\r\n</ol>\r\nturboSMTP fulfills all these requirements, providing also a 24/7 customer support, that will help you to resolve any kind of issue. You can <a title="Try SMTP for free" href="http://www.serversmtp.com/en/tsmtpregistration1.php">register and get a lifetime package of 6.000 free relays per month now</a>, then choose a plan according to your needs.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="region region-sidebar-first column sidebar">\r\n<div class="section">\r\n<div id="block-block-21" class="block block-block region-odd odd region-count-1 count-1">\r\n<div class="content">\r\n<h2>Related Content</h2>\r\n<ul class="lpSideRelated">\r\n	<li><a href="http://www.serversmtp.com/en/smtp-for-windows-7">SMTP for Windows 7</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-configuration">How to configure an SMTP server</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-settings">SMTP settings</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-server-for-mac">SMTP server for Mac</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/windows-mail-smtp-settings">Windows Mail SMTP settings</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/email-delivery-system">Email delivery system</a></li>\r\n</ul>\r\n</div>\r\n</div>\r\n<div id="block-block-19" class="block block-block region-even even region-count-2 count-2"></div>\r\n</div>\r\n</div>', 'Java Basic', '', 'publish', 'open', 'open', '', 'java-basic', '', '', '2015-02-27 19:02:32', '2015-02-27 19:02:32', '', 4, 'http://localhost/ittutorial/?page_id=22', 0, 'page', '', 0),
(23, 1, '2015-02-27 19:02:32', '2015-02-27 19:02:32', '<div id="content" class="column">\r\n<div class="section">\r\n<div id="content-area">\r\n<div id="node-301" class="node node-type-page clearfix">\r\n<div class="content">\r\n<div class="landingPageArticle">\r\n\r\nf you''re a Windows user, getting a good SMTP server is very important. In fact, if you use a common, non-monitored SMTP email service, email providers''s antispam filters can reject your messages – even if they are legitimate.\r\n\r\nA reliable and <strong>professional SMTP service</strong> like turboSMTP, on the contrary, has a strong reputation among all ISP and will maximize the <strong>deliverability</strong> of your emails.\r\n\r\nSo the main features that an outgoing service for Windows should guarantee are:\r\n<ol>\r\n	<li><strong>It must use only reliable IP</strong>s. And also maintain a constant contact with all major email providers in order to guarantee that all your emails get to the inbox.</li>\r\n	<li><strong>It must provide a quicker email delivery</strong>. A dedicated SMTP doesn''t fall into overload issues and should enhance significantly the velocity of your mailing.</li>\r\n	<li><strong>It must bypass ISP filtering</strong>. A professional outbound server will maximize your delivery rate avoiding all the modern, aggressive antispam filters that can reject also legitimate emails.</li>\r\n	<li><strong>It must be accesible anytime and anywhere</strong>. If you''re on-the-go and using a different internet connection, you shouldn''t need to change your settings each time.</li>\r\n	<li><strong> It must keep track of your messages</strong>. To understand the results of your mailing, a dedicated SMTP service should provide also an accurate email tracking system.</li>\r\n</ol>\r\nturboSMTP fulfills all these requirements, providing also a 24/7 customer support, that will help you to resolve any kind of issue. You can <a title="Try SMTP for free" href="http://www.serversmtp.com/en/tsmtpregistration1.php">register and get a lifetime package of 6.000 free relays per month now</a>, then choose a plan according to your needs.\r\n\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="region region-sidebar-first column sidebar">\r\n<div class="section">\r\n<div id="block-block-21" class="block block-block region-odd odd region-count-1 count-1">\r\n<div class="content">\r\n<h2>Related Content</h2>\r\n<ul class="lpSideRelated">\r\n	<li><a href="http://www.serversmtp.com/en/smtp-for-windows-7">SMTP for Windows 7</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-configuration">How to configure an SMTP server</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-settings">SMTP settings</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/smtp-server-for-mac">SMTP server for Mac</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/windows-mail-smtp-settings">Windows Mail SMTP settings</a></li>\r\n	<li><a href="http://www.serversmtp.com/en/email-delivery-system">Email delivery system</a></li>\r\n</ul>\r\n</div>\r\n</div>\r\n<div id="block-block-19" class="block block-block region-even even region-count-2 count-2"></div>\r\n</div>\r\n</div>', 'Java Basic', '', 'inherit', 'open', 'open', '', '22-revision-v1', '', '', '2015-02-27 19:02:32', '2015-02-27 19:02:32', '', 22, 'http://localhost/ittutorial/?p=23', 0, 'revision', '', 0),
(24, 1, '2015-02-27 19:13:37', '2015-02-27 19:13:37', '<span class="Apple-converted-space"> </span>[wp_ad_camp_1]<span class="Apple-converted-space">\r\n</span>\r\n\r\nVariables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.\r\n\r\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.\r\n\r\nThere are two data types available in Java:\r\n<ul class="list">\r\n	<li>Primitive Data Types</li>\r\n	<li>Reference/Object Data Types</li>\r\n</ul>\r\n<h2>Primitive Data Types:</h2>\r\nThere are eight primitive data types supported by Java. Primitive data types are predefined by the language and named by a keyword. Let us now look into detail about the eight primitive data types.\r\n<h2>byte:</h2>\r\n<ul class="list">\r\n	<li>Byte data type is an 8-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -128 (-2^7)</li>\r\n	<li>Maximum value is 127 (inclusive)(2^7 -1)</li>\r\n	<li>Default value is 0</li>\r\n	<li>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.</li>\r\n	<li>Example: byte a = 100 , byte b = -50</li>\r\n</ul>\r\n<h2>short:</h2>\r\n<ul class="list">\r\n	<li>Short data type is a 16-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -32,768 (-2^15)</li>\r\n	<li>Maximum value is 32,767 (inclusive) (2^15 -1)</li>\r\n	<li>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int</li>\r\n	<li>Default value is 0.</li>\r\n	<li>Example: short s = 10000, short r = -20000</li>\r\n</ul>\r\n<h2>int:</h2>\r\n<ul class="list">\r\n	<li>Int data type is a 32-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is - 2,147,483,648.(-2^31)</li>\r\n	<li>Maximum value is 2,147,483,647(inclusive).(2^31 -1)</li>\r\n	<li>Int is generally used as the default data type for integral values unless there is a concern about memory.</li>\r\n	<li>The default value is 0.</li>\r\n	<li>Example: int a = 100000, int b = -200000</li>\r\n</ul>\r\n<h2>long:</h2>\r\n<ul class="list">\r\n	<li>Long data type is a 64-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -9,223,372,036,854,775,808.(-2^63)</li>\r\n	<li>Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)</li>\r\n	<li>This type is used when a wider range than int is needed.</li>\r\n	<li>Default value is 0L.</li>\r\n	<li>Example: long a = 100000L, int b = -200000L</li>\r\n</ul>\r\n<h2>float:</h2>\r\n<ul class="list">\r\n	<li>Float data type is a single-precision 32-bit IEEE 754 floating point.</li>\r\n	<li>Float is mainly used to save memory in large arrays of floating point numbers.</li>\r\n	<li>Default value is 0.0f.</li>\r\n	<li>Float data type is never used for precise values such as currency.</li>\r\n	<li>Example: float f1 = 234.5f</li>\r\n</ul>\r\n<h2>double:</h2>\r\n<ul class="list">\r\n	<li>double data type is a double-precision 64-bit IEEE 754 floating point.</li>\r\n	<li>This data type is generally used as the default data type for decimal values, generally the default choice.</li>\r\n	<li>Double data type should never be used for precise values such as currency.</li>\r\n	<li>Default value is 0.0d.</li>\r\n	<li>Example: double d1 = 123.4</li>\r\n</ul>\r\n<h2>boolean:</h2>\r\n<ul class="list">\r\n	<li>boolean data type represents one bit of information.</li>\r\n	<li>There are only two possible values: true and false.</li>\r\n	<li>This data type is used for simple flags that track true/false conditions.</li>\r\n	<li>Default value is false.</li>\r\n	<li>Example: boolean one = true</li>\r\n</ul>\r\n<h2>char:</h2>\r\n<ul class="list">\r\n	<li>char data type is a single 16-bit Unicode character.</li>\r\n	<li>Minimum value is ''\\u0000'' (or 0).</li>\r\n	<li>Maximum value is ''\\uffff'' (or 65,535 inclusive).</li>\r\n	<li>Char data type is used to store any character.</li>\r\n	<li>Example: char letterA =''A''</li>\r\n</ul>\r\n<h2>Reference Data Types:</h2>\r\n<ul class="list">\r\n	<li>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy etc.</li>\r\n	<li>Class objects, and various type of array variables come under reference data type.</li>\r\n	<li>Default value of any reference variable is null.</li>\r\n	<li>A reference variable can be used to refer to any object of the declared type or any compatible type.</li>\r\n	<li>Example: Animal animal = new Animal("giraffe");</li>\r\n</ul>\r\n<h2>Java Literals:</h2>\r\nA literal is a source code representation of a fixed value. They are represented directly in the code without any computation.\r\n\r\nLiterals can be assigned to any primitive type variable. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">byte</span><span class="pln"> a </span><span class="pun">=</span> <span class="lit">68</span><span class="pun">;</span>\r\n<span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''A''</span></pre>\r\nbyte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.\r\n\r\nPrefix 0 is used to indicate octal and prefix 0x indicates hexadecimal when using these number systems for literals. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">int</span> <span class="kwd">decimal</span> <span class="pun">=</span> <span class="lit">100</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> octal </span><span class="pun">=</span> <span class="lit">0144</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> hexa </span><span class="pun">=</span>  <span class="lit">0x64</span><span class="pun">;</span></pre>\r\nString literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are:\r\n<pre class="prettyprint prettyprinted"><span class="str">"Hello World"</span>\r\n<span class="str">"two\\nlines"</span>\r\n<span class="str">"\\"This is in quotes\\""</span></pre>\r\nString and char types of literals can contain any Unicode characters. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''\\u0001''</span><span class="pun">;</span>\r\n<span class="typ">String</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">"\\u0001"</span><span class="pun">;</span></pre>\r\nJava language supports few special escape sequences for String and char literals as well. They are:\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>Notation</th>\r\n<th>Character represented</th>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>Newline (0x0a)</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>Carriage return (0x0d)</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>Formfeed (0x0c)</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>Backspace (0x08)</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>Space (0x20)</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\"</td>\r\n<td>Double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>Single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\ddd</td>\r\n<td>Octal character (ddd)</td>\r\n</tr>\r\n<tr>\r\n<td>\\uxxxx</td>\r\n<td>Hexadecimal UNICODE character (xxxx)</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'Basic DataTypes', '', 'publish', 'open', 'open', '', 'basic-datatypes', '', '', '2015-02-27 20:27:51', '2015-02-27 20:27:51', '', 4, 'http://localhost/ittutorial/?page_id=24', 0, 'page', '', 0),
(25, 1, '2015-02-27 19:13:37', '2015-02-27 19:13:37', 'Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.\r\n\r\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.\r\n\r\nThere are two data types available in Java:\r\n<ul class="list">\r\n	<li>Primitive Data Types</li>\r\n	<li>Reference/Object Data Types</li>\r\n</ul>\r\n<h2>Primitive Data Types:</h2>\r\nThere are eight primitive data types supported by Java. Primitive data types are predefined by the language and named by a keyword. Let us now look into detail about the eight primitive data types.\r\n<h2>byte:</h2>\r\n<ul class="list">\r\n	<li>Byte data type is an 8-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -128 (-2^7)</li>\r\n	<li>Maximum value is 127 (inclusive)(2^7 -1)</li>\r\n	<li>Default value is 0</li>\r\n	<li>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.</li>\r\n	<li>Example: byte a = 100 , byte b = -50</li>\r\n</ul>\r\n<h2>short:</h2>\r\n<ul class="list">\r\n	<li>Short data type is a 16-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -32,768 (-2^15)</li>\r\n	<li>Maximum value is 32,767 (inclusive) (2^15 -1)</li>\r\n	<li>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int</li>\r\n	<li>Default value is 0.</li>\r\n	<li>Example: short s = 10000, short r = -20000</li>\r\n</ul>\r\n<h2>int:</h2>\r\n<ul class="list">\r\n	<li>Int data type is a 32-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is - 2,147,483,648.(-2^31)</li>\r\n	<li>Maximum value is 2,147,483,647(inclusive).(2^31 -1)</li>\r\n	<li>Int is generally used as the default data type for integral values unless there is a concern about memory.</li>\r\n	<li>The default value is 0.</li>\r\n	<li>Example: int a = 100000, int b = -200000</li>\r\n</ul>\r\n<h2>long:</h2>\r\n<ul class="list">\r\n	<li>Long data type is a 64-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -9,223,372,036,854,775,808.(-2^63)</li>\r\n	<li>Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)</li>\r\n	<li>This type is used when a wider range than int is needed.</li>\r\n	<li>Default value is 0L.</li>\r\n	<li>Example: long a = 100000L, int b = -200000L</li>\r\n</ul>\r\n<h2>float:</h2>\r\n<ul class="list">\r\n	<li>Float data type is a single-precision 32-bit IEEE 754 floating point.</li>\r\n	<li>Float is mainly used to save memory in large arrays of floating point numbers.</li>\r\n	<li>Default value is 0.0f.</li>\r\n	<li>Float data type is never used for precise values such as currency.</li>\r\n	<li>Example: float f1 = 234.5f</li>\r\n</ul>\r\n<h2>double:</h2>\r\n<ul class="list">\r\n	<li>double data type is a double-precision 64-bit IEEE 754 floating point.</li>\r\n	<li>This data type is generally used as the default data type for decimal values, generally the default choice.</li>\r\n	<li>Double data type should never be used for precise values such as currency.</li>\r\n	<li>Default value is 0.0d.</li>\r\n	<li>Example: double d1 = 123.4</li>\r\n</ul>\r\n<h2>boolean:</h2>\r\n<ul class="list">\r\n	<li>boolean data type represents one bit of information.</li>\r\n	<li>There are only two possible values: true and false.</li>\r\n	<li>This data type is used for simple flags that track true/false conditions.</li>\r\n	<li>Default value is false.</li>\r\n	<li>Example: boolean one = true</li>\r\n</ul>\r\n<h2>char:</h2>\r\n<ul class="list">\r\n	<li>char data type is a single 16-bit Unicode character.</li>\r\n	<li>Minimum value is ''\\u0000'' (or 0).</li>\r\n	<li>Maximum value is ''\\uffff'' (or 65,535 inclusive).</li>\r\n	<li>Char data type is used to store any character.</li>\r\n	<li>Example: char letterA =''A''</li>\r\n</ul>\r\n<h2>Reference Data Types:</h2>\r\n<ul class="list">\r\n	<li>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy etc.</li>\r\n	<li>Class objects, and various type of array variables come under reference data type.</li>\r\n	<li>Default value of any reference variable is null.</li>\r\n	<li>A reference variable can be used to refer to any object of the declared type or any compatible type.</li>\r\n	<li>Example: Animal animal = new Animal("giraffe");</li>\r\n</ul>\r\n<h2>Java Literals:</h2>\r\nA literal is a source code representation of a fixed value. They are represented directly in the code without any computation.\r\n\r\nLiterals can be assigned to any primitive type variable. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">byte</span><span class="pln"> a </span><span class="pun">=</span> <span class="lit">68</span><span class="pun">;</span>\r\n<span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''A''</span></pre>\r\nbyte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.\r\n\r\nPrefix 0 is used to indicate octal and prefix 0x indicates hexadecimal when using these number systems for literals. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">int</span> <span class="kwd">decimal</span> <span class="pun">=</span> <span class="lit">100</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> octal </span><span class="pun">=</span> <span class="lit">0144</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> hexa </span><span class="pun">=</span>  <span class="lit">0x64</span><span class="pun">;</span></pre>\r\nString literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are:\r\n<pre class="prettyprint prettyprinted"><span class="str">"Hello World"</span>\r\n<span class="str">"two\\nlines"</span>\r\n<span class="str">"\\"This is in quotes\\""</span></pre>\r\nString and char types of literals can contain any Unicode characters. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''\\u0001''</span><span class="pun">;</span>\r\n<span class="typ">String</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">"\\u0001"</span><span class="pun">;</span></pre>\r\nJava language supports few special escape sequences for String and char literals as well. They are:\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>Notation</th>\r\n<th>Character represented</th>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>Newline (0x0a)</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>Carriage return (0x0d)</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>Formfeed (0x0c)</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>Backspace (0x08)</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>Space (0x20)</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\"</td>\r\n<td>Double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>Single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\ddd</td>\r\n<td>Octal character (ddd)</td>\r\n</tr>\r\n<tr>\r\n<td>\\uxxxx</td>\r\n<td>Hexadecimal UNICODE character (xxxx)</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'Basic DataTypes', '', 'inherit', 'open', 'open', '', '24-revision-v1', '', '', '2015-02-27 19:13:37', '2015-02-27 19:13:37', '', 24, 'http://localhost/ittutorial/?p=25', 0, 'revision', '', 0),
(26, 1, '2015-02-27 19:15:13', '2015-02-27 19:15:13', 'A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable''s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.\r\n\r\nYou must declare all variables before they can be used. The basic form of a variable declaration is shown here:\r\n<pre class="prettyprint">data type variable [ = value][, variable [= value] ...] ;\r\n</pre>\r\nHere<span class="Apple-converted-space"> </span><i>data type</i><span class="Apple-converted-space"> </span>is one of Java''s datatypes and<span class="Apple-converted-space"> </span><i>variable</i><span class="Apple-converted-space"> </span>is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.\r\n\r\nFollowing are valid examples of variable declaration and initialization in Java:\r\n<pre class="prettyprint">int a, b, c;         // Declares three ints, a, b, and c.\r\nint a = 10, b = 10;  // Example of initialization\r\nbyte B = 22;         // initializes a byte type variable B.\r\ndouble pi = 3.14159; // declares and assigns a value of PI.\r\nchar a = ''a'';        // the char variable a iis initialized with value ''a''\r\n</pre>\r\nThis chapter will explain various variable types available in Java Language. There are three kinds of variables in Java:\r\n<ul class="list">\r\n	<li>Local variables</li>\r\n	<li>Instance variables</li>\r\n	<li>Class/static variables</li>\r\n</ul>\r\n<h2>Local variables:</h2>\r\n<ul class="list">\r\n	<li>Local variables are declared in methods, constructors, or blocks.</li>\r\n	<li>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor or block.</li>\r\n	<li>Access modifiers cannot be used for local variables.</li>\r\n	<li>Local variables are visible only within the declared method, constructor or block.</li>\r\n	<li>Local variables are implemented at stack level internally.</li>\r\n	<li>There is no default value for local variables so local variables should be declared and an initial value should be assigned before the first use.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\nHere,<span class="Apple-converted-space"> </span><i>age</i><span class="Apple-converted-space"> </span>is a local variable. This is defined inside<span class="Apple-converted-space"> </span><i>pupAge()</i><span class="Apple-converted-space"> </span>method and its scope is limited to this method only.\r\n<pre class="prettyprint tryit">public class Test{ \r\n   public void pupAge(){\r\n      int age = 0;\r\n      age = age + 7;\r\n      System.out.println("Puppy age is : " + age);\r\n   }\r\n   \r\n   public static void main(String args[]){\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">Puppy age is: 7\r\n</pre>\r\n<h2>Example:</h2>\r\nFollowing example uses<span class="Apple-converted-space"> </span><i>age</i><span class="Apple-converted-space"> </span>without initializing it, so it would give an error at the time of compilation.\r\n<pre class="prettyprint tryit">public class Test{ \r\n   public void pupAge(){\r\n      int age;\r\n      age = age + 7;\r\n      System.out.println("Puppy age is : " + age);\r\n   }\r\n   \r\n   public static void main(String args[]){\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following error while compiling it:\r\n<pre class="result">Test.java:4:variable number might not have been initialized\r\nage = age + 7;\r\n         ^\r\n1 error\r\n</pre>\r\n<h2>Instance variables:</h2>\r\n<ul class="list">\r\n	<li>Instance variables are declared in a class, but outside a method, constructor or any block.</li>\r\n	<li>When a space is allocated for an object in the heap, a slot for each instance variable value is created.</li>\r\n	<li>Instance variables are created when an object is created with the use of the keyword ''new'' and destroyed when the object is destroyed.</li>\r\n	<li>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object''s state that must be present throughout the class.</li>\r\n	<li>Instance variables can be declared in class level before or after use.</li>\r\n	<li>Access modifiers can be given for instance variables.</li>\r\n	<li>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However visibility for subclasses can be given for these variables with the use of access modifiers.</li>\r\n	<li>Instance variables have default values. For numbers the default value is 0, for Booleans it is false and for object references it is null. Values can be assigned during the declaration or within the constructor.</li>\r\n	<li>Instance variables can be accessed directly by calling the variable name inside the class. However within static methods and different class ( when instance variables are given accessibility) should be called using the fully qualified name .<span class="Apple-converted-space"> </span><i>ObjectReference.VariableName</i>.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit">import java.io.*;\r\n\r\npublic class Employee{\r\n   // this instance variable is visible for any child class.\r\n   public String name;\r\n   \r\n   // salary  variable is visible in Employee class only.\r\n   private double salary;\r\n   \r\n   // The name variable is assigned in the constructor. \r\n   public Employee (String empName){\r\n      name = empName;\r\n   }\r\n\r\n   // The salary variable is assigned a value.\r\n   public void setSalary(double empSal){\r\n      salary = empSal;\r\n   }\r\n   \r\n   // This method prints the employee details.\r\n   public void printEmp(){\r\n      System.out.println("name  : " + name );\r\n      System.out.println("salary :" + salary);\r\n   }\r\n\r\n   public static void main(String args[]){\r\n      Employee empOne = new Employee("Ransika");\r\n      empOne.setSalary(1000);\r\n      empOne.printEmp();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">name  : Ransika\r\nsalary :1000.0\r\n</pre>\r\n<h2>Class/static variables:</h2>\r\n<ul class="list">\r\n	<li>Class variables also known as static variables are declared with the<span class="Apple-converted-space"> </span><i>static</i><span class="Apple-converted-space"> </span>keyword in a class, but outside a method, constructor or a block.</li>\r\n	<li>There would only be one copy of each class variable per class, regardless of how many objects are created from it.</li>\r\n	<li>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final and static. Constant variables never change from their initial value.</li>\r\n	<li>Static variables are stored in static memory. It is rare to use static variables other than declared final and used as either public or private constants.</li>\r\n	<li>Static variables are created when the program starts and destroyed when the program stops.</li>\r\n	<li>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.</li>\r\n	<li>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally values can be assigned in special static initializer blocks.</li>\r\n	<li>Static variables can be accessed by calling with the class name .<span class="Apple-converted-space"> </span><i>ClassName.VariableName</i>.</li>\r\n	<li>When declaring class variables as public static final, then variables names (constants) are all in upper case. If the static variables are not public and final the naming syntax is the same as instance and local variables.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit">import java.io.*;\r\n\r\npublic class Employee{\r\n   // salary  variable is a private static variable\r\n   private static double salary;\r\n\r\n   // DEPARTMENT is a constant\r\n   public static final String DEPARTMENT = "Development ";\r\n\r\n   public static void main(String args[]){\r\n      salary = 1000;\r\n      System.out.println(DEPARTMENT+"average salary:"+salary);\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">Development average salary:1000\r\n</pre>\r\n<b>Note:</b><span class="Apple-converted-space"> </span>If the variables are access from an outside class the constant should be accessed as Employee.DEPARTMENT', 'Variable Types', '', 'publish', 'open', 'open', '', 'variable-types', '', '', '2015-02-27 19:15:13', '2015-02-27 19:15:13', '', 4, 'http://localhost/ittutorial/?page_id=26', 0, 'page', '', 0),
(27, 1, '2015-02-27 19:15:13', '2015-02-27 19:15:13', 'A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable''s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.\r\n\r\nYou must declare all variables before they can be used. The basic form of a variable declaration is shown here:\r\n<pre class="prettyprint">data type variable [ = value][, variable [= value] ...] ;\r\n</pre>\r\nHere<span class="Apple-converted-space"> </span><i>data type</i><span class="Apple-converted-space"> </span>is one of Java''s datatypes and<span class="Apple-converted-space"> </span><i>variable</i><span class="Apple-converted-space"> </span>is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.\r\n\r\nFollowing are valid examples of variable declaration and initialization in Java:\r\n<pre class="prettyprint">int a, b, c;         // Declares three ints, a, b, and c.\r\nint a = 10, b = 10;  // Example of initialization\r\nbyte B = 22;         // initializes a byte type variable B.\r\ndouble pi = 3.14159; // declares and assigns a value of PI.\r\nchar a = ''a'';        // the char variable a iis initialized with value ''a''\r\n</pre>\r\nThis chapter will explain various variable types available in Java Language. There are three kinds of variables in Java:\r\n<ul class="list">\r\n	<li>Local variables</li>\r\n	<li>Instance variables</li>\r\n	<li>Class/static variables</li>\r\n</ul>\r\n<h2>Local variables:</h2>\r\n<ul class="list">\r\n	<li>Local variables are declared in methods, constructors, or blocks.</li>\r\n	<li>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor or block.</li>\r\n	<li>Access modifiers cannot be used for local variables.</li>\r\n	<li>Local variables are visible only within the declared method, constructor or block.</li>\r\n	<li>Local variables are implemented at stack level internally.</li>\r\n	<li>There is no default value for local variables so local variables should be declared and an initial value should be assigned before the first use.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\nHere,<span class="Apple-converted-space"> </span><i>age</i><span class="Apple-converted-space"> </span>is a local variable. This is defined inside<span class="Apple-converted-space"> </span><i>pupAge()</i><span class="Apple-converted-space"> </span>method and its scope is limited to this method only.\r\n<pre class="prettyprint tryit">public class Test{ \r\n   public void pupAge(){\r\n      int age = 0;\r\n      age = age + 7;\r\n      System.out.println("Puppy age is : " + age);\r\n   }\r\n   \r\n   public static void main(String args[]){\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">Puppy age is: 7\r\n</pre>\r\n<h2>Example:</h2>\r\nFollowing example uses<span class="Apple-converted-space"> </span><i>age</i><span class="Apple-converted-space"> </span>without initializing it, so it would give an error at the time of compilation.\r\n<pre class="prettyprint tryit">public class Test{ \r\n   public void pupAge(){\r\n      int age;\r\n      age = age + 7;\r\n      System.out.println("Puppy age is : " + age);\r\n   }\r\n   \r\n   public static void main(String args[]){\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following error while compiling it:\r\n<pre class="result">Test.java:4:variable number might not have been initialized\r\nage = age + 7;\r\n         ^\r\n1 error\r\n</pre>\r\n<h2>Instance variables:</h2>\r\n<ul class="list">\r\n	<li>Instance variables are declared in a class, but outside a method, constructor or any block.</li>\r\n	<li>When a space is allocated for an object in the heap, a slot for each instance variable value is created.</li>\r\n	<li>Instance variables are created when an object is created with the use of the keyword ''new'' and destroyed when the object is destroyed.</li>\r\n	<li>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object''s state that must be present throughout the class.</li>\r\n	<li>Instance variables can be declared in class level before or after use.</li>\r\n	<li>Access modifiers can be given for instance variables.</li>\r\n	<li>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However visibility for subclasses can be given for these variables with the use of access modifiers.</li>\r\n	<li>Instance variables have default values. For numbers the default value is 0, for Booleans it is false and for object references it is null. Values can be assigned during the declaration or within the constructor.</li>\r\n	<li>Instance variables can be accessed directly by calling the variable name inside the class. However within static methods and different class ( when instance variables are given accessibility) should be called using the fully qualified name .<span class="Apple-converted-space"> </span><i>ObjectReference.VariableName</i>.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit">import java.io.*;\r\n\r\npublic class Employee{\r\n   // this instance variable is visible for any child class.\r\n   public String name;\r\n   \r\n   // salary  variable is visible in Employee class only.\r\n   private double salary;\r\n   \r\n   // The name variable is assigned in the constructor. \r\n   public Employee (String empName){\r\n      name = empName;\r\n   }\r\n\r\n   // The salary variable is assigned a value.\r\n   public void setSalary(double empSal){\r\n      salary = empSal;\r\n   }\r\n   \r\n   // This method prints the employee details.\r\n   public void printEmp(){\r\n      System.out.println("name  : " + name );\r\n      System.out.println("salary :" + salary);\r\n   }\r\n\r\n   public static void main(String args[]){\r\n      Employee empOne = new Employee("Ransika");\r\n      empOne.setSalary(1000);\r\n      empOne.printEmp();\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">name  : Ransika\r\nsalary :1000.0\r\n</pre>\r\n<h2>Class/static variables:</h2>\r\n<ul class="list">\r\n	<li>Class variables also known as static variables are declared with the<span class="Apple-converted-space"> </span><i>static</i><span class="Apple-converted-space"> </span>keyword in a class, but outside a method, constructor or a block.</li>\r\n	<li>There would only be one copy of each class variable per class, regardless of how many objects are created from it.</li>\r\n	<li>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final and static. Constant variables never change from their initial value.</li>\r\n	<li>Static variables are stored in static memory. It is rare to use static variables other than declared final and used as either public or private constants.</li>\r\n	<li>Static variables are created when the program starts and destroyed when the program stops.</li>\r\n	<li>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.</li>\r\n	<li>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally values can be assigned in special static initializer blocks.</li>\r\n	<li>Static variables can be accessed by calling with the class name .<span class="Apple-converted-space"> </span><i>ClassName.VariableName</i>.</li>\r\n	<li>When declaring class variables as public static final, then variables names (constants) are all in upper case. If the static variables are not public and final the naming syntax is the same as instance and local variables.</li>\r\n</ul>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit">import java.io.*;\r\n\r\npublic class Employee{\r\n   // salary  variable is a private static variable\r\n   private static double salary;\r\n\r\n   // DEPARTMENT is a constant\r\n   public static final String DEPARTMENT = "Development ";\r\n\r\n   public static void main(String args[]){\r\n      salary = 1000;\r\n      System.out.println(DEPARTMENT+"average salary:"+salary);\r\n   }\r\n}\r\n</pre>\r\nThis would produce the following result:\r\n<pre class="result">Development average salary:1000\r\n</pre>\r\n<b>Note:</b><span class="Apple-converted-space"> </span>If the variables are access from an outside class the constant should be accessed as Employee.DEPARTMENT', 'Variable Types', '', 'inherit', 'open', 'open', '', '26-revision-v1', '', '', '2015-02-27 19:15:13', '2015-02-27 19:15:13', '', 26, 'http://localhost/ittutorial/?p=27', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(28, 1, '2015-02-27 19:18:31', '2015-02-27 19:18:31', 'An exception is a problem that arises during the execution of a program. An exception can occur for many different reasons, including the following:\r\n<ul class="list">\r\n	<li>A user has entered invalid data.</li>\r\n	<li>A file that needs to be opened cannot be found.</li>\r\n	<li>A network connection has been lost in the middle of communications or the JVM has run out of memory.</li>\r\n</ul>\r\nSome of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner.\r\n\r\nTo understand how exception handling works in Java, you need to understand the three categories of exceptions:\r\n<ul class="list">\r\n	<li><b>Checked exceptions:</b><span class="Apple-converted-space"> </span>A checked exception is an exception that is typically a user error or a problem that cannot be foreseen by the programmer. For example, if a file is to be opened, but the file cannot be found, an exception occurs. These exceptions cannot simply be ignored at the time of compilation.</li>\r\n	<li><b>Runtime exceptions:</b><span class="Apple-converted-space"> </span>A runtime exception is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compilation.</li>\r\n	<li><b>Errors:</b><span class="Apple-converted-space"> </span>These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. Errors are typically ignored in your code because you can rarely do anything about an error. For example, if a stack overflow occurs, an error will arise. They are also ignored at the time of compilation.</li>\r\n</ul>\r\n<h2>Exception Hierarchy:</h2>\r\nAll exception classes are subtypes of the java.lang.Exception class. The exception class is a subclass of the Throwable class. Other than the exception class there is another subclass called Error which is derived from the Throwable class.\r\n\r\nErrors are not normally trapped form the Java programs. These conditions normally happen in case of severe failures, which are not handled by the java programs. Errors are generated to indicate errors generated by the runtime environment. Example : JVM is out of Memory. Normally programs cannot recover from errors.\r\n\r\nThe Exception class has two main subclasses: IOException class and RuntimeException Class.\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/exceptions.jpg" alt="Java Exceptions" /></center>Here is a list of most common checked and unchecked<span class="Apple-converted-space"> </span><a href="http://www.tutorialspoint.com/java/java_builtin_exceptions.htm">Java''s Built-in Exceptions</a>.\r\n<h2>Exceptions Methods:</h2>\r\nFollowing is the list of important medthods available in the Throwable class.\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>SN</th>\r\n<th>Methods with Description</th>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td><b>public String getMessage()</b>\r\nReturns a detailed message about the exception that has occurred. This message is initialized in the Throwable constructor.</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td><b>public Throwable getCause()</b>\r\nReturns the cause of the exception as represented by a Throwable object.</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td><b>public String toString()</b>\r\nReturns the name of the class concatenated with the result of getMessage()</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td><b>public void printStackTrace()</b>\r\nPrints the result of toString() along with the stack trace to System.err, the error output stream.</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td><b>public StackTraceElement [] getStackTrace()</b>\r\nReturns an array containing each element on the stack trace. The element at index 0 represents the top of the call stack, and the last element in the array represents the method at the bottom of the call stack.</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td><b>public Throwable fillInStackTrace()</b>\r\nFills the stack trace of this Throwable object with the current stack trace, adding to any previous information in the stack trace.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>Catching Exceptions:</h2>\r\nA method catches an exception using a combination of the<span class="Apple-converted-space"> </span><b>try</b><span class="Apple-converted-space"> </span>and<span class="Apple-converted-space"> </span><b>catch</b><span class="Apple-converted-space"> </span>keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionName</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span></pre>\r\nA catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in protected code, the catch block (or blocks) that follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block much as an argument is passed into a method parameter.\r\n<h2>Example:</h2>\r\nThe following is an array is declared with 2 elements. Then the code tries to access the 3rd element of the array which throws an exception.\r\n<pre class="prettyprint tryit prettyprinted"><span class="com">// File Name : ExcepTest.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">ExcepTest</span><span class="pun">{</span>\r\n\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[]){</span>\r\n      <span class="kwd">try</span><span class="pun">{</span>\r\n         <span class="kwd">int</span><span class="pln"> a</span><span class="pun">[]</span> <span class="pun">=</span> <span class="kwd">new</span> <span class="kwd">int</span><span class="pun">[</span><span class="lit">2</span><span class="pun">];</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Access element three :"</span> <span class="pun">+</span><span class="pln"> a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pln"> e</span><span class="pun">){</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Exception thrown  :"</span> <span class="pun">+</span><span class="pln"> e</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n      <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Out of the block"</span><span class="pun">);</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThis would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Exception</span><span class="pln"> thrown  </span><span class="pun">:</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pun">:</span> <span class="lit">3</span>\r\n<span class="typ">Out</span><span class="pln"> of the block</span></pre>\r\n<h2>Multiple catch Blocks:</h2>\r\nA try block can be followed by multiple catch blocks. The syntax for multiple catch blocks looks like the following:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType1</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType2</span><span class="pln"> e2</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType3</span><span class="pln"> e3</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span></pre>\r\nThe previous statements demonstrate three catch blocks, but you can have any number of them after a single try. If an exception occurs in the protected code, the exception is thrown to the first catch block in the list. If the data type of the exception thrown matches ExceptionType1, it gets caught there. If not, the exception passes down to the second catch statement. This continues until the exception either is caught or falls through all catches, in which case the current method stops execution and the exception is thrown down to the previous method on the call stack.\r\n<h2>Example:</h2>\r\nHere is code segment showing how to use multiple try/catch statements.\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span><span class="pln">\r\n   file </span><span class="pun">=</span> <span class="kwd">new</span> <span class="typ">FileInputStream</span><span class="pun">(</span><span class="pln">fileName</span><span class="pun">);</span><span class="pln">\r\n   x </span><span class="pun">=</span> <span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> file</span><span class="pun">.</span><span class="pln">read</span><span class="pun">();</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">IOException</span><span class="pln"> i</span><span class="pun">)</span>\r\n<span class="pun">{</span><span class="pln">\r\n   i</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n   <span class="kwd">return</span> <span class="pun">-</span><span class="lit">1</span><span class="pun">;</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">FileNotFoundException</span><span class="pln"> f</span><span class="pun">)</span> <span class="com">//Not valid!</span>\r\n<span class="pun">{</span><span class="pln">\r\n   f</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n   <span class="kwd">return</span> <span class="pun">-</span><span class="lit">1</span><span class="pun">;</span>\r\n<span class="pun">}</span></pre>\r\n<h2>The throws/throw Keywords:</h2>\r\nIf a method does not handle a checked exception, the method must declare it using the<span class="Apple-converted-space"> </span><b>throws</b>keyword. The throws keyword appears at the end of a method''s signature.\r\n\r\nYou can throw an exception, either a newly instantiated one or an exception that you just caught, by using the<span class="Apple-converted-space"> </span><b>throw</b><span class="Apple-converted-space"> </span>keyword. Try to understand the different in throws and throw keywords.\r\n\r\nThe following method declares that it throws a RemoteException:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span><span class="pln"> className\r\n</span><span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> deposit</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span> <span class="typ">RemoteException</span>\r\n   <span class="pun">{</span>\r\n      <span class="com">// Method implementation</span>\r\n      <span class="kwd">throw</span> <span class="kwd">new</span> <span class="typ">RemoteException</span><span class="pun">();</span>\r\n   <span class="pun">}</span>\r\n   <span class="com">//Remainder of class definition</span>\r\n<span class="pun">}</span></pre>\r\nA method can declare that it throws more than one exception, in which case the exceptions are declared in a list separated by commas. For example, the following method declares that it throws a RemoteException and an InsufficientFundsException:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span><span class="pln"> className\r\n</span><span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> withdraw</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span> <span class="typ">RemoteException</span><span class="pun">,</span>\r\n                              <span class="typ">InsufficientFundsException</span>\r\n   <span class="pun">{</span>\r\n       <span class="com">// Method implementation</span>\r\n   <span class="pun">}</span>\r\n   <span class="com">//Remainder of class definition</span>\r\n<span class="pun">}</span></pre>\r\n<h2>The finally Keyword</h2>\r\nThe finally keyword is used to create a block of code that follows a try block. A finally block of code always executes, whether or not an exception has occurred.\r\n\r\nUsing a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.\r\n\r\nA finally block appears at the end of the catch blocks and has the following syntax:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType1</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType2</span><span class="pln"> e2</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType3</span><span class="pln"> e3</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">finally</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//The finally block always executes.</span>\r\n<span class="pun">}</span></pre>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit prettyprinted"><span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">ExcepTest</span><span class="pun">{</span>\r\n\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[]){</span>\r\n      <span class="kwd">int</span><span class="pln"> a</span><span class="pun">[]</span> <span class="pun">=</span> <span class="kwd">new</span> <span class="kwd">int</span><span class="pun">[</span><span class="lit">2</span><span class="pun">];</span>\r\n      <span class="kwd">try</span><span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Access element three :"</span> <span class="pun">+</span><span class="pln"> a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pln"> e</span><span class="pun">){</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Exception thrown  :"</span> <span class="pun">+</span><span class="pln"> e</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n      <span class="kwd">finally</span><span class="pun">{</span><span class="pln">\r\n         a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span> <span class="pun">=</span> <span class="lit">6</span><span class="pun">;</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"First element value: "</span> <span class="pun">+</span><span class="pln">a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"The finally statement is executed"</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThis would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Exception</span><span class="pln"> thrown  </span><span class="pun">:</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pun">:</span> <span class="lit">3</span>\r\n<span class="typ">First</span><span class="pln"> element value</span><span class="pun">:</span> <span class="lit">6</span>\r\n<span class="typ">The</span> <span class="kwd">finally</span><span class="pln"> statement </span><span class="kwd">is</span><span class="pln"> executed</span></pre>\r\nNote the following:\r\n<ul class="list">\r\n	<li>A catch clause cannot exist without a try statement.</li>\r\n	<li>It is not compulsory to have finally clauses when ever a try/catch block is present.</li>\r\n	<li>The try block cannot be present without either catch clause or finally clause.</li>\r\n	<li>Any code cannot be present in between the try, catch, finally blocks.</li>\r\n</ul>\r\n<h2>Declaring you own Exception:</h2>\r\nYou can create your own exceptions in Java. Keep the following points in mind when writing your own exception classes:\r\n<ul class="list">\r\n	<li>All exceptions must be a child of Throwable.</li>\r\n	<li>If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.</li>\r\n	<li>If you want to write a runtime exception, you need to extend the RuntimeException class.</li>\r\n</ul>\r\nWe can define our own Exception class as below:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">class</span> <span class="typ">MyException</span> <span class="kwd">extends</span> <span class="typ">Exception</span><span class="pun">{</span>\r\n<span class="pun">}</span></pre>\r\nYou just need to extend the Exception class to create your own Exception class. These are considered to be checked exceptions. The following InsufficientFundsException class is a user-defined exception that extends the Exception class, making it a checked exception. An exception class is like any other class, containing useful fields and methods.\r\n<h2>Example:</h2>\r\n<pre id="exception" class="prettyprint prettyprinted"><span class="com">// File Name InsufficientFundsException.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">InsufficientFundsException</span> <span class="kwd">extends</span> <span class="typ">Exception</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">private</span> <span class="kwd">double</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="kwd">public</span> <span class="typ">InsufficientFundsException</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">this</span><span class="pun">.</span><span class="pln">amount </span><span class="pun">=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span> \r\n   <span class="kwd">public</span> <span class="kwd">double</span><span class="pln"> getAmount</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nTo demonstrate using our user-defined exception, the following CheckingAccount class contains a withdraw() method that throws an InsufficientFundsException.\r\n<pre id="account" class="prettyprint prettyprinted"><span class="com">// File Name CheckingAccount.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">CheckingAccount</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">private</span> <span class="kwd">double</span><span class="pln"> balance</span><span class="pun">;</span>\r\n   <span class="kwd">private</span> <span class="kwd">int</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="kwd">public</span> <span class="typ">CheckingAccount</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> number</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">this</span><span class="pun">.</span><span class="pln">number </span><span class="pun">=</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> deposit</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span>\r\n   <span class="pun">{</span><span class="pln">\r\n      balance </span><span class="pun">+=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> withdraw</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span>\r\n                              <span class="typ">InsufficientFundsException</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">if</span><span class="pun">(</span><span class="pln">amount </span><span class="pun">&lt;=</span><span class="pln"> balance</span><span class="pun">)</span>\r\n      <span class="pun">{</span><span class="pln">\r\n         balance </span><span class="pun">-=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n      <span class="pun">}</span>\r\n      <span class="kwd">else</span>\r\n      <span class="pun">{</span>\r\n         <span class="kwd">double</span><span class="pln"> needs </span><span class="pun">=</span><span class="pln"> amount </span><span class="pun">-</span><span class="pln"> balance</span><span class="pun">;</span>\r\n         <span class="kwd">throw</span> <span class="kwd">new</span> <span class="typ">InsufficientFundsException</span><span class="pun">(</span><span class="pln">needs</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">double</span><span class="pln"> getBalance</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> balance</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">int</span><span class="pln"> getNumber</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThe following BankDemo program demonstrates invoking the deposit() and withdraw() methods of CheckingAccount.\r\n<pre class="prettyprint tryit prettyprinted" title="account,exception"><span class="com">// File Name BankDemo.java</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">BankDemo</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span> <span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="typ">CheckingAccount</span><span class="pln"> c </span><span class="pun">=</span> <span class="kwd">new</span> <span class="typ">CheckingAccount</span><span class="pun">(</span><span class="lit">101</span><span class="pun">);</span>\r\n      <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Depositing $500..."</span><span class="pun">);</span><span class="pln">\r\n      c</span><span class="pun">.</span><span class="pln">deposit</span><span class="pun">(</span><span class="lit">500.00</span><span class="pun">);</span>\r\n      <span class="kwd">try</span>\r\n      <span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\\nWithdrawing $100..."</span><span class="pun">);</span><span class="pln">\r\n         c</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="lit">100.00</span><span class="pun">);</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\\nWithdrawing $600..."</span><span class="pun">);</span><span class="pln">\r\n         c</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="lit">600.00</span><span class="pun">);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">InsufficientFundsException</span><span class="pln"> e</span><span class="pun">)</span>\r\n      <span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Sorry, but you are short $"</span>\r\n                                  <span class="pun">+</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">getAmount</span><span class="pun">());</span><span class="pln">\r\n         e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n      <span class="pun">}</span>\r\n    <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nCompile all the above three files and run BankDemo, this would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Depositing</span><span class="pln"> $500</span><span class="pun">...</span>\r\n\r\n<span class="typ">Withdrawing</span><span class="pln"> $100</span><span class="pun">...</span>\r\n\r\n<span class="typ">Withdrawing</span><span class="pln"> $600</span><span class="pun">...</span>\r\n<span class="typ">Sorry</span><span class="pun">,</span><span class="pln"> but you are </span><span class="kwd">short</span><span class="pln"> $200</span><span class="pun">.</span><span class="lit">0</span>\r\n<span class="typ">InsufficientFundsException</span><span class="pln">\r\n        at </span><span class="typ">CheckingAccount</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="typ">CheckingAccount</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">25</span><span class="pun">)</span><span class="pln">\r\n        at </span><span class="typ">BankDemo</span><span class="pun">.</span><span class="pln">main</span><span class="pun">(</span><span class="typ">BankDemo</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">13</span><span class="pun">)</span></pre>\r\n<h2>Common Exceptions:</h2>\r\nIn Java, it is possible to define two catergories of Exceptions and Errors.\r\n<ul class="list">\r\n	<li><b>JVM Exceptions:</b><span class="Apple-converted-space"> </span>- These are exceptions/errors that are exclusively or logically thrown by the JVM. Examples : NullPointerException, ArrayIndexOutOfBoundsException, ClassCastException,</li>\r\n	<li><b>Programmatic exceptions:</b><span class="Apple-converted-space"> </span>- These exceptions are thrown explicitly by the application or the API programmers Examples: IllegalArgumentException, IllegalStateException.</li>\r\n</ul>', 'Exception', '', 'publish', 'open', 'open', '', 'exception', '', '', '2015-02-27 19:18:31', '2015-02-27 19:18:31', '', 4, 'http://localhost/ittutorial/?page_id=28', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(29, 1, '2015-02-27 19:18:31', '2015-02-27 19:18:31', 'An exception is a problem that arises during the execution of a program. An exception can occur for many different reasons, including the following:\r\n<ul class="list">\r\n	<li>A user has entered invalid data.</li>\r\n	<li>A file that needs to be opened cannot be found.</li>\r\n	<li>A network connection has been lost in the middle of communications or the JVM has run out of memory.</li>\r\n</ul>\r\nSome of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner.\r\n\r\nTo understand how exception handling works in Java, you need to understand the three categories of exceptions:\r\n<ul class="list">\r\n	<li><b>Checked exceptions:</b><span class="Apple-converted-space"> </span>A checked exception is an exception that is typically a user error or a problem that cannot be foreseen by the programmer. For example, if a file is to be opened, but the file cannot be found, an exception occurs. These exceptions cannot simply be ignored at the time of compilation.</li>\r\n	<li><b>Runtime exceptions:</b><span class="Apple-converted-space"> </span>A runtime exception is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compilation.</li>\r\n	<li><b>Errors:</b><span class="Apple-converted-space"> </span>These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. Errors are typically ignored in your code because you can rarely do anything about an error. For example, if a stack overflow occurs, an error will arise. They are also ignored at the time of compilation.</li>\r\n</ul>\r\n<h2>Exception Hierarchy:</h2>\r\nAll exception classes are subtypes of the java.lang.Exception class. The exception class is a subclass of the Throwable class. Other than the exception class there is another subclass called Error which is derived from the Throwable class.\r\n\r\nErrors are not normally trapped form the Java programs. These conditions normally happen in case of severe failures, which are not handled by the java programs. Errors are generated to indicate errors generated by the runtime environment. Example : JVM is out of Memory. Normally programs cannot recover from errors.\r\n\r\nThe Exception class has two main subclasses: IOException class and RuntimeException Class.\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/exceptions.jpg" alt="Java Exceptions" /></center>Here is a list of most common checked and unchecked<span class="Apple-converted-space"> </span><a href="http://www.tutorialspoint.com/java/java_builtin_exceptions.htm">Java''s Built-in Exceptions</a>.\r\n<h2>Exceptions Methods:</h2>\r\nFollowing is the list of important medthods available in the Throwable class.\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>SN</th>\r\n<th>Methods with Description</th>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td><b>public String getMessage()</b>\r\nReturns a detailed message about the exception that has occurred. This message is initialized in the Throwable constructor.</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td><b>public Throwable getCause()</b>\r\nReturns the cause of the exception as represented by a Throwable object.</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td><b>public String toString()</b>\r\nReturns the name of the class concatenated with the result of getMessage()</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td><b>public void printStackTrace()</b>\r\nPrints the result of toString() along with the stack trace to System.err, the error output stream.</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td><b>public StackTraceElement [] getStackTrace()</b>\r\nReturns an array containing each element on the stack trace. The element at index 0 represents the top of the call stack, and the last element in the array represents the method at the bottom of the call stack.</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td><b>public Throwable fillInStackTrace()</b>\r\nFills the stack trace of this Throwable object with the current stack trace, adding to any previous information in the stack trace.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>Catching Exceptions:</h2>\r\nA method catches an exception using a combination of the<span class="Apple-converted-space"> </span><b>try</b><span class="Apple-converted-space"> </span>and<span class="Apple-converted-space"> </span><b>catch</b><span class="Apple-converted-space"> </span>keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionName</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span></pre>\r\nA catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in protected code, the catch block (or blocks) that follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block much as an argument is passed into a method parameter.\r\n<h2>Example:</h2>\r\nThe following is an array is declared with 2 elements. Then the code tries to access the 3rd element of the array which throws an exception.\r\n<pre class="prettyprint tryit prettyprinted"><span class="com">// File Name : ExcepTest.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">ExcepTest</span><span class="pun">{</span>\r\n\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[]){</span>\r\n      <span class="kwd">try</span><span class="pun">{</span>\r\n         <span class="kwd">int</span><span class="pln"> a</span><span class="pun">[]</span> <span class="pun">=</span> <span class="kwd">new</span> <span class="kwd">int</span><span class="pun">[</span><span class="lit">2</span><span class="pun">];</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Access element three :"</span> <span class="pun">+</span><span class="pln"> a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pln"> e</span><span class="pun">){</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Exception thrown  :"</span> <span class="pun">+</span><span class="pln"> e</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n      <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Out of the block"</span><span class="pun">);</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThis would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Exception</span><span class="pln"> thrown  </span><span class="pun">:</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pun">:</span> <span class="lit">3</span>\r\n<span class="typ">Out</span><span class="pln"> of the block</span></pre>\r\n<h2>Multiple catch Blocks:</h2>\r\nA try block can be followed by multiple catch blocks. The syntax for multiple catch blocks looks like the following:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType1</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType2</span><span class="pln"> e2</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType3</span><span class="pln"> e3</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span></pre>\r\nThe previous statements demonstrate three catch blocks, but you can have any number of them after a single try. If an exception occurs in the protected code, the exception is thrown to the first catch block in the list. If the data type of the exception thrown matches ExceptionType1, it gets caught there. If not, the exception passes down to the second catch statement. This continues until the exception either is caught or falls through all catches, in which case the current method stops execution and the exception is thrown down to the previous method on the call stack.\r\n<h2>Example:</h2>\r\nHere is code segment showing how to use multiple try/catch statements.\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span><span class="pln">\r\n   file </span><span class="pun">=</span> <span class="kwd">new</span> <span class="typ">FileInputStream</span><span class="pun">(</span><span class="pln">fileName</span><span class="pun">);</span><span class="pln">\r\n   x </span><span class="pun">=</span> <span class="pun">(</span><span class="kwd">byte</span><span class="pun">)</span><span class="pln"> file</span><span class="pun">.</span><span class="pln">read</span><span class="pun">();</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">IOException</span><span class="pln"> i</span><span class="pun">)</span>\r\n<span class="pun">{</span><span class="pln">\r\n   i</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n   <span class="kwd">return</span> <span class="pun">-</span><span class="lit">1</span><span class="pun">;</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">FileNotFoundException</span><span class="pln"> f</span><span class="pun">)</span> <span class="com">//Not valid!</span>\r\n<span class="pun">{</span><span class="pln">\r\n   f</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n   <span class="kwd">return</span> <span class="pun">-</span><span class="lit">1</span><span class="pun">;</span>\r\n<span class="pun">}</span></pre>\r\n<h2>The throws/throw Keywords:</h2>\r\nIf a method does not handle a checked exception, the method must declare it using the<span class="Apple-converted-space"> </span><b>throws</b>keyword. The throws keyword appears at the end of a method''s signature.\r\n\r\nYou can throw an exception, either a newly instantiated one or an exception that you just caught, by using the<span class="Apple-converted-space"> </span><b>throw</b><span class="Apple-converted-space"> </span>keyword. Try to understand the different in throws and throw keywords.\r\n\r\nThe following method declares that it throws a RemoteException:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span><span class="pln"> className\r\n</span><span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> deposit</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span> <span class="typ">RemoteException</span>\r\n   <span class="pun">{</span>\r\n      <span class="com">// Method implementation</span>\r\n      <span class="kwd">throw</span> <span class="kwd">new</span> <span class="typ">RemoteException</span><span class="pun">();</span>\r\n   <span class="pun">}</span>\r\n   <span class="com">//Remainder of class definition</span>\r\n<span class="pun">}</span></pre>\r\nA method can declare that it throws more than one exception, in which case the exceptions are declared in a list separated by commas. For example, the following method declares that it throws a RemoteException and an InsufficientFundsException:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span><span class="pln"> className\r\n</span><span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> withdraw</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span> <span class="typ">RemoteException</span><span class="pun">,</span>\r\n                              <span class="typ">InsufficientFundsException</span>\r\n   <span class="pun">{</span>\r\n       <span class="com">// Method implementation</span>\r\n   <span class="pun">}</span>\r\n   <span class="com">//Remainder of class definition</span>\r\n<span class="pun">}</span></pre>\r\n<h2>The finally Keyword</h2>\r\nThe finally keyword is used to create a block of code that follows a try block. A finally block of code always executes, whether or not an exception has occurred.\r\n\r\nUsing a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.\r\n\r\nA finally block appears at the end of the catch blocks and has the following syntax:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">try</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Protected code</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType1</span><span class="pln"> e1</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType2</span><span class="pln"> e2</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ExceptionType3</span><span class="pln"> e3</span><span class="pun">)</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//Catch block</span>\r\n<span class="pun">}</span><span class="kwd">finally</span>\r\n<span class="pun">{</span>\r\n   <span class="com">//The finally block always executes.</span>\r\n<span class="pun">}</span></pre>\r\n<h2>Example:</h2>\r\n<pre class="prettyprint tryit prettyprinted"><span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">ExcepTest</span><span class="pun">{</span>\r\n\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[]){</span>\r\n      <span class="kwd">int</span><span class="pln"> a</span><span class="pun">[]</span> <span class="pun">=</span> <span class="kwd">new</span> <span class="kwd">int</span><span class="pun">[</span><span class="lit">2</span><span class="pun">];</span>\r\n      <span class="kwd">try</span><span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Access element three :"</span> <span class="pun">+</span><span class="pln"> a</span><span class="pun">[</span><span class="lit">3</span><span class="pun">]);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pln"> e</span><span class="pun">){</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Exception thrown  :"</span> <span class="pun">+</span><span class="pln"> e</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n      <span class="kwd">finally</span><span class="pun">{</span><span class="pln">\r\n         a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span> <span class="pun">=</span> <span class="lit">6</span><span class="pun">;</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"First element value: "</span> <span class="pun">+</span><span class="pln">a</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"The finally statement is executed"</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThis would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Exception</span><span class="pln"> thrown  </span><span class="pun">:</span><span class="pln">java</span><span class="pun">.</span><span class="pln">lang</span><span class="pun">.</span><span class="typ">ArrayIndexOutOfBoundsException</span><span class="pun">:</span> <span class="lit">3</span>\r\n<span class="typ">First</span><span class="pln"> element value</span><span class="pun">:</span> <span class="lit">6</span>\r\n<span class="typ">The</span> <span class="kwd">finally</span><span class="pln"> statement </span><span class="kwd">is</span><span class="pln"> executed</span></pre>\r\nNote the following:\r\n<ul class="list">\r\n	<li>A catch clause cannot exist without a try statement.</li>\r\n	<li>It is not compulsory to have finally clauses when ever a try/catch block is present.</li>\r\n	<li>The try block cannot be present without either catch clause or finally clause.</li>\r\n	<li>Any code cannot be present in between the try, catch, finally blocks.</li>\r\n</ul>\r\n<h2>Declaring you own Exception:</h2>\r\nYou can create your own exceptions in Java. Keep the following points in mind when writing your own exception classes:\r\n<ul class="list">\r\n	<li>All exceptions must be a child of Throwable.</li>\r\n	<li>If you want to write a checked exception that is automatically enforced by the Handle or Declare Rule, you need to extend the Exception class.</li>\r\n	<li>If you want to write a runtime exception, you need to extend the RuntimeException class.</li>\r\n</ul>\r\nWe can define our own Exception class as below:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">class</span> <span class="typ">MyException</span> <span class="kwd">extends</span> <span class="typ">Exception</span><span class="pun">{</span>\r\n<span class="pun">}</span></pre>\r\nYou just need to extend the Exception class to create your own Exception class. These are considered to be checked exceptions. The following InsufficientFundsException class is a user-defined exception that extends the Exception class, making it a checked exception. An exception class is like any other class, containing useful fields and methods.\r\n<h2>Example:</h2>\r\n<pre id="exception" class="prettyprint prettyprinted"><span class="com">// File Name InsufficientFundsException.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">InsufficientFundsException</span> <span class="kwd">extends</span> <span class="typ">Exception</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">private</span> <span class="kwd">double</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="kwd">public</span> <span class="typ">InsufficientFundsException</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">this</span><span class="pun">.</span><span class="pln">amount </span><span class="pun">=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span> \r\n   <span class="kwd">public</span> <span class="kwd">double</span><span class="pln"> getAmount</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nTo demonstrate using our user-defined exception, the following CheckingAccount class contains a withdraw() method that throws an InsufficientFundsException.\r\n<pre id="account" class="prettyprint prettyprinted"><span class="com">// File Name CheckingAccount.java</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">CheckingAccount</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">private</span> <span class="kwd">double</span><span class="pln"> balance</span><span class="pun">;</span>\r\n   <span class="kwd">private</span> <span class="kwd">int</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="kwd">public</span> <span class="typ">CheckingAccount</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> number</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">this</span><span class="pun">.</span><span class="pln">number </span><span class="pun">=</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> deposit</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span>\r\n   <span class="pun">{</span><span class="pln">\r\n      balance </span><span class="pun">+=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> withdraw</span><span class="pun">(</span><span class="kwd">double</span><span class="pln"> amount</span><span class="pun">)</span> <span class="kwd">throws</span>\r\n                              <span class="typ">InsufficientFundsException</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">if</span><span class="pun">(</span><span class="pln">amount </span><span class="pun">&lt;=</span><span class="pln"> balance</span><span class="pun">)</span>\r\n      <span class="pun">{</span><span class="pln">\r\n         balance </span><span class="pun">-=</span><span class="pln"> amount</span><span class="pun">;</span>\r\n      <span class="pun">}</span>\r\n      <span class="kwd">else</span>\r\n      <span class="pun">{</span>\r\n         <span class="kwd">double</span><span class="pln"> needs </span><span class="pun">=</span><span class="pln"> amount </span><span class="pun">-</span><span class="pln"> balance</span><span class="pun">;</span>\r\n         <span class="kwd">throw</span> <span class="kwd">new</span> <span class="typ">InsufficientFundsException</span><span class="pun">(</span><span class="pln">needs</span><span class="pun">);</span>\r\n      <span class="pun">}</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">double</span><span class="pln"> getBalance</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> balance</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n   <span class="kwd">public</span> <span class="kwd">int</span><span class="pln"> getNumber</span><span class="pun">()</span>\r\n   <span class="pun">{</span>\r\n      <span class="kwd">return</span><span class="pln"> number</span><span class="pun">;</span>\r\n   <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nThe following BankDemo program demonstrates invoking the deposit() and withdraw() methods of CheckingAccount.\r\n<pre class="prettyprint tryit prettyprinted" title="account,exception"><span class="com">// File Name BankDemo.java</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">BankDemo</span>\r\n<span class="pun">{</span>\r\n   <span class="kwd">public</span> <span class="kwd">static</span> <span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span> <span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span>\r\n   <span class="pun">{</span>\r\n      <span class="typ">CheckingAccount</span><span class="pln"> c </span><span class="pun">=</span> <span class="kwd">new</span> <span class="typ">CheckingAccount</span><span class="pun">(</span><span class="lit">101</span><span class="pun">);</span>\r\n      <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Depositing $500..."</span><span class="pun">);</span><span class="pln">\r\n      c</span><span class="pun">.</span><span class="pln">deposit</span><span class="pun">(</span><span class="lit">500.00</span><span class="pun">);</span>\r\n      <span class="kwd">try</span>\r\n      <span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\\nWithdrawing $100..."</span><span class="pun">);</span><span class="pln">\r\n         c</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="lit">100.00</span><span class="pun">);</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"\\nWithdrawing $600..."</span><span class="pun">);</span><span class="pln">\r\n         c</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="lit">600.00</span><span class="pun">);</span>\r\n      <span class="pun">}</span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">InsufficientFundsException</span><span class="pln"> e</span><span class="pun">)</span>\r\n      <span class="pun">{</span>\r\n         <span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Sorry, but you are short $"</span>\r\n                                  <span class="pun">+</span><span class="pln"> e</span><span class="pun">.</span><span class="pln">getAmount</span><span class="pun">());</span><span class="pln">\r\n         e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span>\r\n      <span class="pun">}</span>\r\n    <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\nCompile all the above three files and run BankDemo, this would produce the following result:\r\n<pre class="prettyprint prettyprinted"><span class="typ">Depositing</span><span class="pln"> $500</span><span class="pun">...</span>\r\n\r\n<span class="typ">Withdrawing</span><span class="pln"> $100</span><span class="pun">...</span>\r\n\r\n<span class="typ">Withdrawing</span><span class="pln"> $600</span><span class="pun">...</span>\r\n<span class="typ">Sorry</span><span class="pun">,</span><span class="pln"> but you are </span><span class="kwd">short</span><span class="pln"> $200</span><span class="pun">.</span><span class="lit">0</span>\r\n<span class="typ">InsufficientFundsException</span><span class="pln">\r\n        at </span><span class="typ">CheckingAccount</span><span class="pun">.</span><span class="pln">withdraw</span><span class="pun">(</span><span class="typ">CheckingAccount</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">25</span><span class="pun">)</span><span class="pln">\r\n        at </span><span class="typ">BankDemo</span><span class="pun">.</span><span class="pln">main</span><span class="pun">(</span><span class="typ">BankDemo</span><span class="pun">.</span><span class="pln">java</span><span class="pun">:</span><span class="lit">13</span><span class="pun">)</span></pre>\r\n<h2>Common Exceptions:</h2>\r\nIn Java, it is possible to define two catergories of Exceptions and Errors.\r\n<ul class="list">\r\n	<li><b>JVM Exceptions:</b><span class="Apple-converted-space"> </span>- These are exceptions/errors that are exclusively or logically thrown by the JVM. Examples : NullPointerException, ArrayIndexOutOfBoundsException, ClassCastException,</li>\r\n	<li><b>Programmatic exceptions:</b><span class="Apple-converted-space"> </span>- These exceptions are thrown explicitly by the application or the API programmers Examples: IllegalArgumentException, IllegalStateException.</li>\r\n</ul>', 'Exception', '', 'inherit', 'open', 'open', '', '28-revision-v1', '', '', '2015-02-27 19:18:31', '2015-02-27 19:18:31', '', 28, 'http://localhost/ittutorial/?p=29', 0, 'revision', '', 0),
(30, 1, '2015-02-27 19:36:52', '2015-02-27 19:36:52', 'The key to understanding the low-level functionality of JSP is to understand the simple life cycle they follow.\r\n\r\nA JSP life cycle can be defined as the entire process from its creation till the destruction which is similar to a servlet life cycle with an additional step which is required to compile a JSP into servlet.\r\n\r\nThe following are the paths followed by a JSP\r\n<ul class="list">\r\n	<li>Compilation</li>\r\n	<li>Initialization</li>\r\n	<li>Execution</li>\r\n	<li>Cleanup</li>\r\n</ul>\r\nThe four major phases of JSP life cycle are very similar to Servlet Life Cycle and they are as follows:\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/jsp_life_cycle.jpg" alt="JSP Life Cycle" /></center>\r\n<h2>JSP Compilation:</h2>\r\nWhen a browser asks for a JSP, the JSP engine first checks to see whether it needs to compile the page. If the page has never been compiled, or if the JSP has been modified since it was last compiled, the JSP engine compiles the page.\r\n\r\nThe compilation process involves three steps:\r\n<ul class="list">\r\n	<li>Parsing the JSP.</li>\r\n	<li>Turning the JSP into a servlet.</li>\r\n	<li>Compiling the servlet.</li>\r\n</ul>\r\n<h2>JSP Initialization:</h2>\r\nWhen a container loads a JSP it invokes the jspInit() method before servicing any requests. If you need to perform JSP-specific initialization, override the jspInit() method:\r\n<pre class="prettyprint">public void jspInit(){\r\n  // Initialization code...\r\n}\r\n</pre>\r\nTypically initialization is performed only once and as with the servlet init method, you generally initialize database connections, open files, and create lookup tables in the jspInit method.\r\n<h2>JSP Execution:</h2>\r\nThis phase of the JSP life cycle represents all interactions with requests until the JSP is destroyed.\r\n\r\nWhenever a browser requests a JSP and the page has been loaded and initialized, the JSP engine invokes the<span class="Apple-converted-space"> </span><b>_jspService()</b><span class="Apple-converted-space"> </span>method in the JSP.\r\n\r\nThe _jspService() method takes an<span class="Apple-converted-space"> </span><b>HttpServletRequest</b><span class="Apple-converted-space"> </span>and an<span class="Apple-converted-space"> </span><b>HttpServletResponse</b><span class="Apple-converted-space"> </span>as its parameters as follows:\r\n<pre class="prettyprint">void _jspService(HttpServletRequest request, \r\n                 HttpServletResponse response)\r\n{\r\n   // Service handling code...\r\n}\r\n</pre>\r\nThe _jspService() method of a JSP is invoked once per a request and is responsible for generating the response for that request and this method is also responsible for generating responses to all seven of the HTTP methods ie. GET, POST, DELETE etc.\r\n<h2>JSP Cleanup:</h2>\r\nThe destruction phase of the JSP life cycle represents when a JSP is being removed from use by a container.\r\n\r\nThe<span class="Apple-converted-space"> </span><b>jspDestroy()</b><span class="Apple-converted-space"> </span>method is the JSP equivalent of the destroy method for servlets. Override jspDestroy when you need to perform any cleanup, such as releasing database connections or closing open files.\r\n\r\nThe jspDestroy() method has the following form:\r\n<pre class="prettyprint">public void jspDestroy()\r\n{\r\n   // Your cleanup code goes here.\r\n}\r\n</pre>\r\n&nbsp;', 'Jsp Life Cycle', '', 'publish', 'open', 'open', '', 'jsp-life-cycle', '', '', '2015-02-27 19:36:52', '2015-02-27 19:36:52', '', 8, 'http://localhost/ittutorial/?page_id=30', 0, 'page', '', 0),
(31, 1, '2015-02-27 19:36:52', '2015-02-27 19:36:52', 'The key to understanding the low-level functionality of JSP is to understand the simple life cycle they follow.\r\n\r\nA JSP life cycle can be defined as the entire process from its creation till the destruction which is similar to a servlet life cycle with an additional step which is required to compile a JSP into servlet.\r\n\r\nThe following are the paths followed by a JSP\r\n<ul class="list">\r\n	<li>Compilation</li>\r\n	<li>Initialization</li>\r\n	<li>Execution</li>\r\n	<li>Cleanup</li>\r\n</ul>\r\nThe four major phases of JSP life cycle are very similar to Servlet Life Cycle and they are as follows:\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/jsp_life_cycle.jpg" alt="JSP Life Cycle" /></center>\r\n<h2>JSP Compilation:</h2>\r\nWhen a browser asks for a JSP, the JSP engine first checks to see whether it needs to compile the page. If the page has never been compiled, or if the JSP has been modified since it was last compiled, the JSP engine compiles the page.\r\n\r\nThe compilation process involves three steps:\r\n<ul class="list">\r\n	<li>Parsing the JSP.</li>\r\n	<li>Turning the JSP into a servlet.</li>\r\n	<li>Compiling the servlet.</li>\r\n</ul>\r\n<h2>JSP Initialization:</h2>\r\nWhen a container loads a JSP it invokes the jspInit() method before servicing any requests. If you need to perform JSP-specific initialization, override the jspInit() method:\r\n<pre class="prettyprint">public void jspInit(){\r\n  // Initialization code...\r\n}\r\n</pre>\r\nTypically initialization is performed only once and as with the servlet init method, you generally initialize database connections, open files, and create lookup tables in the jspInit method.\r\n<h2>JSP Execution:</h2>\r\nThis phase of the JSP life cycle represents all interactions with requests until the JSP is destroyed.\r\n\r\nWhenever a browser requests a JSP and the page has been loaded and initialized, the JSP engine invokes the<span class="Apple-converted-space"> </span><b>_jspService()</b><span class="Apple-converted-space"> </span>method in the JSP.\r\n\r\nThe _jspService() method takes an<span class="Apple-converted-space"> </span><b>HttpServletRequest</b><span class="Apple-converted-space"> </span>and an<span class="Apple-converted-space"> </span><b>HttpServletResponse</b><span class="Apple-converted-space"> </span>as its parameters as follows:\r\n<pre class="prettyprint">void _jspService(HttpServletRequest request, \r\n                 HttpServletResponse response)\r\n{\r\n   // Service handling code...\r\n}\r\n</pre>\r\nThe _jspService() method of a JSP is invoked once per a request and is responsible for generating the response for that request and this method is also responsible for generating responses to all seven of the HTTP methods ie. GET, POST, DELETE etc.\r\n<h2>JSP Cleanup:</h2>\r\nThe destruction phase of the JSP life cycle represents when a JSP is being removed from use by a container.\r\n\r\nThe<span class="Apple-converted-space"> </span><b>jspDestroy()</b><span class="Apple-converted-space"> </span>method is the JSP equivalent of the destroy method for servlets. Override jspDestroy when you need to perform any cleanup, such as releasing database connections or closing open files.\r\n\r\nThe jspDestroy() method has the following form:\r\n<pre class="prettyprint">public void jspDestroy()\r\n{\r\n   // Your cleanup code goes here.\r\n}\r\n</pre>\r\n&nbsp;', 'Jsp Life Cycle', '', 'inherit', 'open', 'open', '', '30-revision-v1', '', '', '2015-02-27 19:36:52', '2015-02-27 19:36:52', '', 30, 'http://localhost/ittutorial/?p=31', 0, 'revision', '', 0),
(32, 1, '2015-02-27 19:42:07', '2015-02-27 19:42:07', 'This step-by-step article describes how to set up a Simple Mail Transfer Protocol (SMTP) virtual server on a Windows 2000-based computer.\r\n\r\nMicrosoft SMTP Service uses the Internet-standard SMTP to transport and deliver mail messages. Microsoft SMTP Service does not support the use of individual mailboxes; it places incoming messages in a Drop folder or it forwards them to other SMTP servers (if the message is addressed to a remote domain). This feature allows Microsoft SMTP Service to be used as a mail receiver for other programs.\r\n<h3 id="tocHeadRef"><span id="MT1"><a id="2"></a></span> Install Microsoft Internet Information Services (IIS) and Microsoft SMTP Service</h3>\r\nBecause Microsoft SMTP Service is a component of Microsoft Internet Information Services (IIS), you must install IIS to use Microsoft SMTP Service. To install IIS and Microsoft SMTP service, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Settings</b>, and then click <b>Control Panel</b>.</li>\r\n	<li>Double-click <b>Add/Remove Programs</b>.</li>\r\n	<li>Click <b>Add/Remove Windows Components</b>.</li>\r\n	<li>In the Windows Components Wizard, click <b>Internet Information Services (IIS)</b>, and then click <b>Details</b>.</li>\r\n	<li>Click to select the following check boxes:\r\n<ul>\r\n	<li><b>Common Files</b></li>\r\n	<li><b>Documentation</b></li>\r\n	<li><strong class="uiterm">Internet Information Services Snap-In</strong></li>\r\n	<li><b>Internet Services Manager (HTML)</b></li>\r\n	<li><b>SMTP Service</b></li>\r\n	<li><b>World Wide Web Server</b></li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>, and then click <b>Next</b> on the <b>Windows Components</b> page.</li>\r\n	<li>On the <strong class="uiterm">Completing the Windows Components Wizard</strong> page, click <b>Finish</b>.</li>\r\n	<li>Click <b>Close</b>.</li>\r\n</ol>\r\n<h3 id="tocHeadRef"><span id="MT2"><a id="3"></a></span> Configure the SMTP Virtual Server</h3>\r\nWhen you install Microsoft SMTP Service, a default SMTP virtual server is created to handle basic mail delivery functions. The SMTP virtual server is automatically configured with default settings that enable it to accept local client computer connections and to process messages. You can either accept the default settings or change the SMTP virtual server configuration. You can configure the SMTP virtual server to meet your messaging requirements; this article describes basic configuration and security settings that you may want to consider.\r\n\r\nThis section includes the following topics:\r\n<ul>\r\n	<li>How to assign an Internet Protocol (IP) address.</li>\r\n	<li>How to configure the default domain.</li>\r\n	<li>How to enable transaction logging.</li>\r\n	<li>How to set relay restrictions.</li>\r\n	<li>How to set up a smart host.</li>\r\n</ul>\r\n<h4 id="tocHeadRef"><span id="MT3"><a id="4"></a></span> How to Assign an IP Address</h4>\r\nTo assign an IP address to your SMTP virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Start</b>, point to <b>Programs</b>, point to <b>Administrative Tools</b>, and then click <b>Internet Services Manager</b>.Alternatively, start the IIS snap-in.</li>\r\n	<li>Right-click <b>Default SMTP Virtual Server</b>, and then click <b>Properties</b>.</li>\r\n	<li>Click the <b>General</b> tab.\r\n<ul>\r\n	<li>If you want the SMTP virtual server to respond to connection requests for all IP addresses that are configured on the computer, click <b>(All Unassigned)</b>. This is the default setting.</li>\r\n	<li>If you want to assign a specific IP address to the SMTP virtual server, click the IP address that you want to use in the <strong class="uiterm">IP address</strong> box.</li>\r\n	<li>If you want to assign additional IP addresses to the virtual server, follow these steps:\r\n<ol>\r\n	<li>Click <b>Advanced</b>, and then click <b>Add</b>.</li>\r\n	<li>Specify the IP address and the Transmission Control Protocol (TCP) port number.<b>NOTE</b>: The default TCP port is 25.</li>\r\n	<li>Click <b>OK</b>, and then click <b>OK</b>.</li>\r\n</ol>\r\n</li>\r\n</ul>\r\n</li>\r\n	<li>Click <b>OK</b>.</li>\r\n</ol>', 'HIBERNATE', '', 'inherit', 'open', 'open', '', '12-revision-v1', '', '', '2015-02-27 19:42:07', '2015-02-27 19:42:07', '', 12, 'http://localhost/ittutorial/?p=32', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(33, 1, '2015-02-27 20:27:51', '2015-02-27 20:27:51', '<span class="Apple-converted-space"> </span>[wp_ad_camp_1]<span class="Apple-converted-space">\r\n</span>\r\n\r\nVariables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.\r\n\r\nBased on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.\r\n\r\nThere are two data types available in Java:\r\n<ul class="list">\r\n	<li>Primitive Data Types</li>\r\n	<li>Reference/Object Data Types</li>\r\n</ul>\r\n<h2>Primitive Data Types:</h2>\r\nThere are eight primitive data types supported by Java. Primitive data types are predefined by the language and named by a keyword. Let us now look into detail about the eight primitive data types.\r\n<h2>byte:</h2>\r\n<ul class="list">\r\n	<li>Byte data type is an 8-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -128 (-2^7)</li>\r\n	<li>Maximum value is 127 (inclusive)(2^7 -1)</li>\r\n	<li>Default value is 0</li>\r\n	<li>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.</li>\r\n	<li>Example: byte a = 100 , byte b = -50</li>\r\n</ul>\r\n<h2>short:</h2>\r\n<ul class="list">\r\n	<li>Short data type is a 16-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -32,768 (-2^15)</li>\r\n	<li>Maximum value is 32,767 (inclusive) (2^15 -1)</li>\r\n	<li>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int</li>\r\n	<li>Default value is 0.</li>\r\n	<li>Example: short s = 10000, short r = -20000</li>\r\n</ul>\r\n<h2>int:</h2>\r\n<ul class="list">\r\n	<li>Int data type is a 32-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is - 2,147,483,648.(-2^31)</li>\r\n	<li>Maximum value is 2,147,483,647(inclusive).(2^31 -1)</li>\r\n	<li>Int is generally used as the default data type for integral values unless there is a concern about memory.</li>\r\n	<li>The default value is 0.</li>\r\n	<li>Example: int a = 100000, int b = -200000</li>\r\n</ul>\r\n<h2>long:</h2>\r\n<ul class="list">\r\n	<li>Long data type is a 64-bit signed two''s complement integer.</li>\r\n	<li>Minimum value is -9,223,372,036,854,775,808.(-2^63)</li>\r\n	<li>Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)</li>\r\n	<li>This type is used when a wider range than int is needed.</li>\r\n	<li>Default value is 0L.</li>\r\n	<li>Example: long a = 100000L, int b = -200000L</li>\r\n</ul>\r\n<h2>float:</h2>\r\n<ul class="list">\r\n	<li>Float data type is a single-precision 32-bit IEEE 754 floating point.</li>\r\n	<li>Float is mainly used to save memory in large arrays of floating point numbers.</li>\r\n	<li>Default value is 0.0f.</li>\r\n	<li>Float data type is never used for precise values such as currency.</li>\r\n	<li>Example: float f1 = 234.5f</li>\r\n</ul>\r\n<h2>double:</h2>\r\n<ul class="list">\r\n	<li>double data type is a double-precision 64-bit IEEE 754 floating point.</li>\r\n	<li>This data type is generally used as the default data type for decimal values, generally the default choice.</li>\r\n	<li>Double data type should never be used for precise values such as currency.</li>\r\n	<li>Default value is 0.0d.</li>\r\n	<li>Example: double d1 = 123.4</li>\r\n</ul>\r\n<h2>boolean:</h2>\r\n<ul class="list">\r\n	<li>boolean data type represents one bit of information.</li>\r\n	<li>There are only two possible values: true and false.</li>\r\n	<li>This data type is used for simple flags that track true/false conditions.</li>\r\n	<li>Default value is false.</li>\r\n	<li>Example: boolean one = true</li>\r\n</ul>\r\n<h2>char:</h2>\r\n<ul class="list">\r\n	<li>char data type is a single 16-bit Unicode character.</li>\r\n	<li>Minimum value is ''\\u0000'' (or 0).</li>\r\n	<li>Maximum value is ''\\uffff'' (or 65,535 inclusive).</li>\r\n	<li>Char data type is used to store any character.</li>\r\n	<li>Example: char letterA =''A''</li>\r\n</ul>\r\n<h2>Reference Data Types:</h2>\r\n<ul class="list">\r\n	<li>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy etc.</li>\r\n	<li>Class objects, and various type of array variables come under reference data type.</li>\r\n	<li>Default value of any reference variable is null.</li>\r\n	<li>A reference variable can be used to refer to any object of the declared type or any compatible type.</li>\r\n	<li>Example: Animal animal = new Animal("giraffe");</li>\r\n</ul>\r\n<h2>Java Literals:</h2>\r\nA literal is a source code representation of a fixed value. They are represented directly in the code without any computation.\r\n\r\nLiterals can be assigned to any primitive type variable. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">byte</span><span class="pln"> a </span><span class="pun">=</span> <span class="lit">68</span><span class="pun">;</span>\r\n<span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''A''</span></pre>\r\nbyte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.\r\n\r\nPrefix 0 is used to indicate octal and prefix 0x indicates hexadecimal when using these number systems for literals. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">int</span> <span class="kwd">decimal</span> <span class="pun">=</span> <span class="lit">100</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> octal </span><span class="pun">=</span> <span class="lit">0144</span><span class="pun">;</span>\r\n<span class="kwd">int</span><span class="pln"> hexa </span><span class="pun">=</span>  <span class="lit">0x64</span><span class="pun">;</span></pre>\r\nString literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are:\r\n<pre class="prettyprint prettyprinted"><span class="str">"Hello World"</span>\r\n<span class="str">"two\\nlines"</span>\r\n<span class="str">"\\"This is in quotes\\""</span></pre>\r\nString and char types of literals can contain any Unicode characters. For example:\r\n<pre class="prettyprint prettyprinted"><span class="kwd">char</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">''\\u0001''</span><span class="pun">;</span>\r\n<span class="typ">String</span><span class="pln"> a </span><span class="pun">=</span> <span class="str">"\\u0001"</span><span class="pun">;</span></pre>\r\nJava language supports few special escape sequences for String and char literals as well. They are:\r\n<table class="src">\r\n<tbody>\r\n<tr>\r\n<th>Notation</th>\r\n<th>Character represented</th>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>Newline (0x0a)</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>Carriage return (0x0d)</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>Formfeed (0x0c)</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>Backspace (0x08)</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>Space (0x20)</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\"</td>\r\n<td>Double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>Single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\ddd</td>\r\n<td>Octal character (ddd)</td>\r\n</tr>\r\n<tr>\r\n<td>\\uxxxx</td>\r\n<td>Hexadecimal UNICODE character (xxxx)</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'Basic DataTypes', '', 'inherit', 'open', 'open', '', '24-revision-v1', '', '', '2015-02-27 20:27:51', '2015-02-27 20:27:51', '', 24, 'http://localhost/ittutorial/?p=33', 0, 'revision', '', 0),
(34, 1, '2015-03-01 06:39:17', '2015-03-01 06:39:17', '<h2>Java programming source code</h2>\r\n<div class="geshifilter">\r\n<pre class="java geshifilter-java">class HelloWorld\r\n{\r\n   public static void main(String args[])\r\n   {\r\n      System.out.println("Hello World");\r\n   }</pre>\r\n</div>', 'Hello World Program', '', 'publish', 'open', 'open', '', 'hello-world-program', '', '', '2015-03-01 06:39:17', '2015-03-01 06:39:17', '', 0, 'http://localhost/ittutorial/?p=34', 0, 'post', '', 0),
(35, 1, '2015-03-01 06:39:17', '2015-03-01 06:39:17', '<h2>Java programming source code</h2>\r\n<div class="geshifilter">\r\n<pre class="java geshifilter-java">class HelloWorld\r\n{\r\n   public static void main(String args[])\r\n   {\r\n      System.out.println("Hello World");\r\n   }</pre>\r\n</div>', 'Hello World Program', '', 'inherit', 'open', 'open', '', '34-revision-v1', '', '', '2015-03-01 06:39:17', '2015-03-01 06:39:17', '', 34, 'http://localhost/ittutorial/?p=35', 0, 'revision', '', 0),
(36, 1, '2015-03-01 06:55:07', '2015-03-01 06:55:07', 'Servlets are Java classes which service HTTP requests and implement the <b>javax.servlet.Servlet</b> interface. Web application developers typically write servlets that extend javax.servlet.http.HttpServlet, an abstract class that implements the Servlet interface and is specially designed to handle HTTP requests.\r\n<h2>Sample Code for Hello World:</h2>\r\nFollowing is the sample source code structure of a servlet example to write Hello World:\r\n<pre class="prettyprint prettyprinted"><span class="com">// Import required java libraries</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.*;</span>\r\n<span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.*;</span>\r\n\r\n<span class="com">// Extend HttpServlet class</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">HelloWorld</span> <span class="kwd">extends</span> <span class="typ">HttpServlet</span> <span class="pun">{</span>\r\n \r\n  <span class="kwd">private</span> <span class="typ">String</span><span class="pln"> message</span><span class="pun">;</span>\r\n\r\n  <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> init</span><span class="pun">()</span> <span class="kwd">throws</span> <span class="typ">ServletException</span>\r\n  <span class="pun">{</span>\r\n      <span class="com">// Do required initialization</span><span class="pln">\r\n      message </span><span class="pun">=</span> <span class="str">"Hello World"</span><span class="pun">;</span>\r\n  <span class="pun">}</span>\r\n\r\n  <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> doGet</span><span class="pun">(</span><span class="typ">HttpServletRequest</span><span class="pln"> request</span><span class="pun">,</span>\r\n                    <span class="typ">HttpServletResponse</span><span class="pln"> response</span><span class="pun">)</span>\r\n            <span class="kwd">throws</span> <span class="typ">ServletException</span><span class="pun">,</span> <span class="typ">IOException</span>\r\n  <span class="pun">{</span>\r\n      <span class="com">// Set response content type</span><span class="pln">\r\n      response</span><span class="pun">.</span><span class="pln">setContentType</span><span class="pun">(</span><span class="str">"text/html"</span><span class="pun">);</span>\r\n\r\n      <span class="com">// Actual logic goes here.</span>\r\n      <span class="typ">PrintWriter</span> <span class="kwd">out</span> <span class="pun">=</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">getWriter</span><span class="pun">();</span>\r\n      <span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"&lt;h1&gt;"</span> <span class="pun">+</span><span class="pln"> message </span><span class="pun">+</span> <span class="str">"&lt;/h1&gt;"</span><span class="pun">);</span>\r\n  <span class="pun">}</span>\r\n  \r\n  <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> destroy</span><span class="pun">()</span>\r\n  <span class="pun">{</span>\r\n      <span class="com">// do nothing.</span>\r\n  <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\n<h2>Compiling a Servlet:</h2>\r\nLet us put above code if HelloWorld.java file and put this file in C:\\ServletDevel (Windows) or /usr/ServletDevel (Unix) then you would need to add these directories as well in CLASSPATH.\r\n\r\nAssuming your environment is setup properly, go in <b>ServletDevel</b> directory and compile HelloWorld.java as follows:\r\n<pre class="prettyprint prettyprinted"><span class="pln">$ javac </span><span class="typ">HelloWorld</span><span class="pun">.</span><span class="pln">java</span></pre>\r\nIf the servlet depends on any other libraries, you have to include those JAR files on your CLASSPATH as well. I have included only servlet-api.jar JAR file because I''m not using any other library in Hello World program.\r\n\r\nThis command line uses the built-in javac compiler that comes with the Sun Microsystems Java Software Development Kit (JDK). For this command to work properly, you have to include the location of the Java SDK that you are using in the PATH environment variable.\r\n\r\nIf everything goes fine, above compilation would produce <b>HelloWorld.class</b> file in the same directory. Next section would explain how a compiled servlet would be deployed in production.\r\n<h2>Servlet Deployment:</h2>\r\nBy default, a servlet application is located at the path &lt;Tomcat-installation-directory&gt;/webapps/ROOT and the class file would reside in &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/classes.\r\n\r\nIf you have a fully qualified class name of <b>com.myorg.MyServlet</b>, then this servlet class must be located in WEB-INF/classes/com/myorg/MyServlet.class.\r\n\r\nFor now, let us copy HelloWorld.class into &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/classes and create following entries in <b>web.xml</b> file located in &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/\r\n<pre class="prettyprint prettyprinted">    <span class="tag">&lt;servlet&gt;</span>\r\n        <span class="tag">&lt;servlet-name&gt;</span><span class="pln">HelloWorld</span><span class="tag">&lt;/servlet-name&gt;</span>\r\n        <span class="tag">&lt;servlet-class&gt;</span><span class="pln">HelloWorld</span><span class="tag">&lt;/servlet-class&gt;</span>\r\n    <span class="tag">&lt;/servlet&gt;</span>\r\n\r\n    <span class="tag">&lt;servlet-mapping&gt;</span>\r\n        <span class="tag">&lt;servlet-name&gt;</span><span class="pln">HelloWorld</span><span class="tag">&lt;/servlet-name&gt;</span>\r\n        <span class="tag">&lt;url-pattern&gt;</span><span class="pln">/HelloWorld</span><span class="tag">&lt;/url-pattern&gt;</span>\r\n    <span class="tag">&lt;/servlet-mapping&gt;</span></pre>\r\nAbove entries to be created inside &lt;web-app&gt;...&lt;/web-app&gt; tags available in web.xml file. There could be various entries in this table already available, but never mind.\r\n\r\nYou are almost done, now let us start tomcat server using &lt;Tomcat-installation-directory&gt;\\bin\\startup.bat (on windows) or &lt;Tomcat-installation-directory&gt;/bin/startup.sh (on Linux/Solaris etc.) and finally type <b>http://localhost:8080/HelloWorld</b> in browser''s address box. If everything goes fine, you would get following result:\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/servlet-example.jpg" alt="Servlet Example" /></center>', 'Hello World Program in Servlet', '', 'publish', 'open', 'open', '', 'hello-world-program-in-servlet', '', '', '2015-03-01 06:55:07', '2015-03-01 06:55:07', '', 0, 'http://localhost/ittutorial/?p=36', 0, 'post', '', 0),
(37, 1, '2015-03-01 06:55:07', '2015-03-01 06:55:07', 'Servlets are Java classes which service HTTP requests and implement the <b>javax.servlet.Servlet</b> interface. Web application developers typically write servlets that extend javax.servlet.http.HttpServlet, an abstract class that implements the Servlet interface and is specially designed to handle HTTP requests.\r\n<h2>Sample Code for Hello World:</h2>\r\nFollowing is the sample source code structure of a servlet example to write Hello World:\r\n<pre class="prettyprint prettyprinted"><span class="com">// Import required java libraries</span>\r\n<span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">io</span><span class="pun">.*;</span>\r\n<span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.*;</span>\r\n<span class="kwd">import</span><span class="pln"> javax</span><span class="pun">.</span><span class="pln">servlet</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.*;</span>\r\n\r\n<span class="com">// Extend HttpServlet class</span>\r\n<span class="kwd">public</span> <span class="kwd">class</span> <span class="typ">HelloWorld</span> <span class="kwd">extends</span> <span class="typ">HttpServlet</span> <span class="pun">{</span>\r\n \r\n  <span class="kwd">private</span> <span class="typ">String</span><span class="pln"> message</span><span class="pun">;</span>\r\n\r\n  <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> init</span><span class="pun">()</span> <span class="kwd">throws</span> <span class="typ">ServletException</span>\r\n  <span class="pun">{</span>\r\n      <span class="com">// Do required initialization</span><span class="pln">\r\n      message </span><span class="pun">=</span> <span class="str">"Hello World"</span><span class="pun">;</span>\r\n  <span class="pun">}</span>\r\n\r\n  <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> doGet</span><span class="pun">(</span><span class="typ">HttpServletRequest</span><span class="pln"> request</span><span class="pun">,</span>\r\n                    <span class="typ">HttpServletResponse</span><span class="pln"> response</span><span class="pun">)</span>\r\n            <span class="kwd">throws</span> <span class="typ">ServletException</span><span class="pun">,</span> <span class="typ">IOException</span>\r\n  <span class="pun">{</span>\r\n      <span class="com">// Set response content type</span><span class="pln">\r\n      response</span><span class="pun">.</span><span class="pln">setContentType</span><span class="pun">(</span><span class="str">"text/html"</span><span class="pun">);</span>\r\n\r\n      <span class="com">// Actual logic goes here.</span>\r\n      <span class="typ">PrintWriter</span> <span class="kwd">out</span> <span class="pun">=</span><span class="pln"> response</span><span class="pun">.</span><span class="pln">getWriter</span><span class="pun">();</span>\r\n      <span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"&lt;h1&gt;"</span> <span class="pun">+</span><span class="pln"> message </span><span class="pun">+</span> <span class="str">"&lt;/h1&gt;"</span><span class="pun">);</span>\r\n  <span class="pun">}</span>\r\n  \r\n  <span class="kwd">public</span> <span class="kwd">void</span><span class="pln"> destroy</span><span class="pun">()</span>\r\n  <span class="pun">{</span>\r\n      <span class="com">// do nothing.</span>\r\n  <span class="pun">}</span>\r\n<span class="pun">}</span></pre>\r\n<h2>Compiling a Servlet:</h2>\r\nLet us put above code if HelloWorld.java file and put this file in C:\\ServletDevel (Windows) or /usr/ServletDevel (Unix) then you would need to add these directories as well in CLASSPATH.\r\n\r\nAssuming your environment is setup properly, go in <b>ServletDevel</b> directory and compile HelloWorld.java as follows:\r\n<pre class="prettyprint prettyprinted"><span class="pln">$ javac </span><span class="typ">HelloWorld</span><span class="pun">.</span><span class="pln">java</span></pre>\r\nIf the servlet depends on any other libraries, you have to include those JAR files on your CLASSPATH as well. I have included only servlet-api.jar JAR file because I''m not using any other library in Hello World program.\r\n\r\nThis command line uses the built-in javac compiler that comes with the Sun Microsystems Java Software Development Kit (JDK). For this command to work properly, you have to include the location of the Java SDK that you are using in the PATH environment variable.\r\n\r\nIf everything goes fine, above compilation would produce <b>HelloWorld.class</b> file in the same directory. Next section would explain how a compiled servlet would be deployed in production.\r\n<h2>Servlet Deployment:</h2>\r\nBy default, a servlet application is located at the path &lt;Tomcat-installation-directory&gt;/webapps/ROOT and the class file would reside in &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/classes.\r\n\r\nIf you have a fully qualified class name of <b>com.myorg.MyServlet</b>, then this servlet class must be located in WEB-INF/classes/com/myorg/MyServlet.class.\r\n\r\nFor now, let us copy HelloWorld.class into &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/classes and create following entries in <b>web.xml</b> file located in &lt;Tomcat-installation-directory&gt;/webapps/ROOT/WEB-INF/\r\n<pre class="prettyprint prettyprinted">    <span class="tag">&lt;servlet&gt;</span>\r\n        <span class="tag">&lt;servlet-name&gt;</span><span class="pln">HelloWorld</span><span class="tag">&lt;/servlet-name&gt;</span>\r\n        <span class="tag">&lt;servlet-class&gt;</span><span class="pln">HelloWorld</span><span class="tag">&lt;/servlet-class&gt;</span>\r\n    <span class="tag">&lt;/servlet&gt;</span>\r\n\r\n    <span class="tag">&lt;servlet-mapping&gt;</span>\r\n        <span class="tag">&lt;servlet-name&gt;</span><span class="pln">HelloWorld</span><span class="tag">&lt;/servlet-name&gt;</span>\r\n        <span class="tag">&lt;url-pattern&gt;</span><span class="pln">/HelloWorld</span><span class="tag">&lt;/url-pattern&gt;</span>\r\n    <span class="tag">&lt;/servlet-mapping&gt;</span></pre>\r\nAbove entries to be created inside &lt;web-app&gt;...&lt;/web-app&gt; tags available in web.xml file. There could be various entries in this table already available, but never mind.\r\n\r\nYou are almost done, now let us start tomcat server using &lt;Tomcat-installation-directory&gt;\\bin\\startup.bat (on windows) or &lt;Tomcat-installation-directory&gt;/bin/startup.sh (on Linux/Solaris etc.) and finally type <b>http://localhost:8080/HelloWorld</b> in browser''s address box. If everything goes fine, you would get following result:\r\n\r\n<center><img src="http://www.tutorialspoint.com/images/servlet-example.jpg" alt="Servlet Example" /></center>', 'Hello World Program in Servlet', '', 'inherit', 'open', 'open', '', '36-revision-v1', '', '', '2015-03-01 06:55:07', '2015-03-01 06:55:07', '', 36, 'http://localhost/ittutorial/?p=37', 0, 'revision', '', 0),
(38, 1, '2015-03-18 18:59:55', '2015-03-18 18:59:55', 'Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.\r\n\r\nPatterns are about documenting a solution for well know recurring problem in a particular context.It can also be defined as recurring solution to a problem in a context.', 'Design Patterns', '', 'publish', 'open', 'open', '', 'design-patterns', '', '', '2015-03-19 14:57:09', '2015-03-19 14:57:09', '', 0, 'http://localhost/ittutorial/?page_id=38', 0, 'page', '', 0),
(39, 1, '2015-03-18 18:59:55', '2015-03-18 18:59:55', 'Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.', 'design patterns', '', 'inherit', 'open', 'open', '', '38-revision-v1', '', '', '2015-03-18 18:59:55', '2015-03-18 18:59:55', '', 38, 'http://localhost/ittutorial/38-revision-v1/', 0, 'revision', '', 0),
(40, 1, '2015-03-18 19:01:32', '2015-03-18 19:01:32', ' ', '', '', 'publish', 'open', 'open', '', '40', '', '', '2015-03-18 19:01:32', '2015-03-18 19:01:32', '', 0, 'http://localhost/ittutorial/?p=40', 7, 'nav_menu_item', '', 0),
(41, 1, '2015-03-19 14:50:48', '2015-03-19 14:50:48', 'Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.\n\nPatterns are about documenting a solution for well know recurring problem in a particular context.It can also be defined as recurring solution to a problem in a context.', 'Design Patterns', '', 'inherit', 'open', 'open', '', '38-autosave-v1', '', '', '2015-03-19 14:50:48', '2015-03-19 14:50:48', '', 38, 'http://localhost/ittutorial/38-autosave-v1/', 0, 'revision', '', 0),
(42, 1, '2015-03-19 14:57:09', '2015-03-19 14:57:09', 'Design patterns represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development. These solutions were obtained by trial and error by numerous software developers over quite a substantial period of time.\r\n\r\nPatterns are about documenting a solution for well know recurring problem in a particular context.It can also be defined as recurring solution to a problem in a context.', 'Design Patterns', '', 'inherit', 'open', 'open', '', '38-revision-v1', '', '', '2015-03-19 14:57:09', '2015-03-19 14:57:09', '', 38, 'http://localhost/ittutorial/38-revision-v1/', 0, 'revision', '', 0),
(43, 1, '2015-03-21 06:55:52', '2015-03-21 06:55:52', '<ul>\n	<li>Web service is a technology that allow us to build interoperable distributed applications.</li>\n	<li>Web Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).</li>\n	<li>Web Service distributed objects is these are not only platform (OS) independent, These are even language independent.</li>\n	<li>We can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network. Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.</li>\n</ul>', 'WEB SERVICE', '', 'inherit', 'open', 'open', '', '14-autosave-v1', '', '', '2015-03-21 06:55:52', '2015-03-21 06:55:52', '', 14, 'http://localhost/ittutorial/14-autosave-v1/', 0, 'revision', '', 0),
(44, 1, '2015-03-21 06:56:12', '2015-03-21 06:56:12', '<ul>\r\n	<li>Web service is a technology that allow us to build interoperable distributed applications.</li>\r\n	<li>Web Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).</li>\r\n	<li>Web Service distributed objects is these are not only platform (OS) independent, These are even language independent.</li>\r\n	<li>We can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network.</li>\r\n	<li>Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.</li>\r\n</ul>', 'WEB SERVICE', '', 'inherit', 'open', 'open', '', '14-revision-v1', '', '', '2015-03-21 06:56:12', '2015-03-21 06:56:12', '', 14, 'http://localhost/ittutorial/14-revision-v1/', 0, 'revision', '', 0),
(45, 1, '2015-03-21 07:16:39', '2015-03-21 07:16:39', 'Web service is a technology that allow us to build interoperable distributed applications.\r\n\r\nWeb Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).\r\n\r\nWeb Service distributed objects is these are not only platform (OS) independent, These are even language independent.\r\n\r\nWe can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network. Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png"><img class="alignnone size-full wp-image-58" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png" alt="WSDiagram" width="688" height="243" /></a>', 'WS Home', '', 'publish', 'open', 'open', '', 'ws-home', '', '', '2015-03-22 16:07:40', '2015-03-22 16:07:40', '', 14, 'http://localhost/ittutorial/?page_id=45', 0, 'page', '', 0),
(46, 1, '2015-03-21 07:16:39', '2015-03-21 07:16:39', 'Web service is a technology that allow us to build interoperable distributed applications.\r\n\r\nWeb Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).\r\n\r\nWeb Service distributed objects is these are not only platform (OS) independent, These are even language independent.\r\n\r\nWe can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network. Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.', 'WS Home', '', 'inherit', 'open', 'open', '', '45-revision-v1', '', '', '2015-03-21 07:16:39', '2015-03-21 07:16:39', '', 45, 'http://localhost/ittutorial/45-revision-v1/', 0, 'revision', '', 0),
(47, 1, '2015-03-21 14:21:27', '2015-03-21 14:21:27', 'A <strong>Web Service</strong> is can be defined as below:\r\n<ul>\r\n	<li>It is a client server application or application component for communication.</li>\r\n	<li>It method of communication between two devices over network.</li>\r\n	<li>It is a software system for interoperable machine to machine communication.</li>\r\n	<li>It is a collection of standards or protocols for exchanging information between two devices or application.</li>\r\n</ul>', 'WS Introduction', '', 'publish', 'open', 'open', '', 'ws-introduction', '', '', '2015-03-21 14:24:55', '2015-03-21 14:24:55', '', 14, 'http://localhost/ittutorial/?page_id=47', 0, 'page', '', 0),
(48, 1, '2015-03-21 14:21:27', '2015-03-21 14:21:27', 'A <strong>Web Service</strong> is can be defined as Below:\r\n<ul>\r\n	<li>It is a client server application or application component for communication.</li>\r\n	<li>It method of communication between two devices over network.</li>\r\n	<li>It is a software system for interoperable machine to machine communication.</li>\r\n	<li>It is a collection of standards or protocols for exchanging information between two devices or application.</li>\r\n</ul>', 'WS Introduction', '', 'inherit', 'open', 'open', '', '47-revision-v1', '', '', '2015-03-21 14:21:27', '2015-03-21 14:21:27', '', 47, 'http://localhost/ittutorial/47-revision-v1/', 0, 'revision', '', 0),
(49, 1, '2015-03-21 14:24:55', '2015-03-21 14:24:55', 'A <strong>Web Service</strong> is can be defined as below:\r\n<ul>\r\n	<li>It is a client server application or application component for communication.</li>\r\n	<li>It method of communication between two devices over network.</li>\r\n	<li>It is a software system for interoperable machine to machine communication.</li>\r\n	<li>It is a collection of standards or protocols for exchanging information between two devices or application.</li>\r\n</ul>', 'WS Introduction', '', 'inherit', 'open', 'open', '', '47-revision-v1', '', '', '2015-03-21 14:24:55', '2015-03-21 14:24:55', '', 47, 'http://localhost/ittutorial/47-revision-v1/', 0, 'revision', '', 0),
(50, 1, '2015-03-21 15:14:38', '2015-03-21 15:14:38', '<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg"><img class="alignnone size-full wp-image-51" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg" alt="WebServicesArchitecture" width="430" height="340" /></a>\r\n<h3><strong>Service Provider:</strong></h3>\r\nThis is the provider of the web service. The service provider implements the service and makes it available on the Internet.\r\n<h3><strong>Service Requestor:</strong></h3>\r\nThis is any consumer of the web service. The requestor utilizes an existing web service by opening a network connection and sending an XML request.\r\n<h3><strong>Service Registry:</strong></h3>\r\nThis is a logically centralized directory of services. The registry provides a central place where developers can publish new services or find existing ones. It therefore serves as a centralized clearing house for companies and their services.', 'WS Architecture', '', 'publish', 'open', 'open', '', 'ws-architecture', '', '', '2015-03-21 15:14:38', '2015-03-21 15:14:38', '', 14, 'http://localhost/ittutorial/?page_id=50', 0, 'page', '', 0),
(51, 1, '2015-03-21 15:11:56', '2015-03-21 15:11:56', '', 'WebServicesArchitecture', '', 'inherit', 'open', 'open', '', 'webservicesarchitecture', '', '', '2015-03-21 15:11:56', '2015-03-21 15:11:56', '', 50, 'http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg', 0, 'attachment', 'image/jpeg', 0),
(52, 1, '2015-03-21 15:14:38', '2015-03-21 15:14:38', '<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg"><img class="alignnone size-full wp-image-51" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebServicesArchitecture.jpg" alt="WebServicesArchitecture" width="430" height="340" /></a>\r\n<h3><strong>Service Provider:</strong></h3>\r\nThis is the provider of the web service. The service provider implements the service and makes it available on the Internet.\r\n<h3><strong>Service Requestor:</strong></h3>\r\nThis is any consumer of the web service. The requestor utilizes an existing web service by opening a network connection and sending an XML request.\r\n<h3><strong>Service Registry:</strong></h3>\r\nThis is a logically centralized directory of services. The registry provides a central place where developers can publish new services or find existing ones. It therefore serves as a centralized clearing house for companies and their services.', 'WS Architecture', '', 'inherit', 'open', 'open', '', '50-revision-v1', '', '', '2015-03-21 15:14:38', '2015-03-21 15:14:38', '', 50, 'http://localhost/ittutorial/50-revision-v1/', 0, 'revision', '', 0),
(54, 1, '2015-03-22 11:15:02', '2015-03-22 11:15:02', 'There are mainly two types of web services.\r\n<ol>\r\n	<li>SOAP web services.</li>\r\n	<li>RESTful web services.</li>\r\n</ol>\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png"><img class="alignnone size-full wp-image-55" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png" alt="WebserviceType" width="249" height="126" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg"><img class="alignnone size-full wp-image-74" src="http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg" alt="restful" width="470" height="291" /></a>\r\n<h2><strong>Java Web Services API</strong></h2>\r\nThere are two main API''s defined by Java for developing web service applications since JavaEE 6.\r\n\r\n1) <strong>JAX-WS</strong>: for SOAP web services. The are two ways to write JAX-WS application code: by RPC style and Document style.\r\n\r\n2) <strong>JAX-RS</strong>: for RESTful web services. There are mainly 3 implementation currently in use for creating JAX-RS application: Jersey, Resteasy and Restlet.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png"><img class="alignnone size-full wp-image-56" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png" alt="WSType" width="507" height="266" /></a>\r\n\r\n&nbsp;', 'WS Types', '', 'publish', 'open', 'open', '', 'ws-types', '', '', '2015-03-23 18:58:46', '2015-03-23 18:58:46', '', 14, 'http://localhost/ittutorial/?page_id=54', 0, 'page', '', 0),
(55, 1, '2015-03-22 11:10:29', '2015-03-22 11:10:29', '', 'WebserviceType', '', 'inherit', 'open', 'open', '', 'webservicetype', '', '', '2015-03-22 11:10:29', '2015-03-22 11:10:29', '', 54, 'http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png', 0, 'attachment', 'image/png', 0),
(56, 1, '2015-03-22 11:13:11', '2015-03-22 11:13:11', '', 'WSType', '', 'inherit', 'open', 'open', '', 'wstype', '', '', '2015-03-22 11:13:11', '2015-03-22 11:13:11', '', 54, 'http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png', 0, 'attachment', 'image/png', 0),
(57, 1, '2015-03-22 11:15:02', '2015-03-22 11:15:02', 'There are mainly two types of web services.\r\n<ol>\r\n	<li>SOAP web services.</li>\r\n	<li>RESTful web services.</li>\r\n</ol>\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png"><img class="alignnone size-full wp-image-55" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png" alt="WebserviceType" width="249" height="126" /></a>\r\n<h2><strong>Java Web Services API</strong></h2>\r\nThere are two main API''s defined by Java for developing web service applications since JavaEE 6.\r\n\r\n1) <strong>JAX-WS</strong>: for SOAP web services. The are two ways to write JAX-WS application code: by RPC style and Document style.\r\n\r\n2) <strong>JAX-RS</strong>: for RESTful web services. There are mainly 3 implementation currently in use for creating JAX-RS application: Jersey, Resteasy and Restlet.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png"><img class="alignnone size-full wp-image-56" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png" alt="WSType" width="507" height="266" /></a>', 'WS Types', '', 'inherit', 'open', 'open', '', '54-revision-v1', '', '', '2015-03-22 11:15:02', '2015-03-22 11:15:02', '', 54, 'http://localhost/ittutorial/54-revision-v1/', 0, 'revision', '', 0),
(58, 1, '2015-03-22 16:07:05', '2015-03-22 16:07:05', '', 'WSDiagram', '', 'inherit', 'open', 'open', '', 'wsdiagram', '', '', '2015-03-22 16:07:05', '2015-03-22 16:07:05', '', 45, 'http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png', 0, 'attachment', 'image/png', 0),
(59, 1, '2015-03-22 16:07:32', '2015-03-22 16:07:32', 'Web service is a technology that allow us to build interoperable distributed applications.\n\nWeb Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).\n\nWeb Service distributed objects is these are not only platform (OS) independent, These are even language independent.\n\nWe can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network. Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.\n\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png"><img class="alignnone size-full wp-image-58" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png" alt="WSDiagram" width="688" height="243" /></a>', 'WS Home', '', 'inherit', 'open', 'open', '', '45-autosave-v1', '', '', '2015-03-22 16:07:32', '2015-03-22 16:07:32', '', 45, 'http://localhost/ittutorial/45-autosave-v1/', 0, 'revision', '', 0),
(60, 1, '2015-03-22 16:07:40', '2015-03-22 16:07:40', 'Web service is a technology that allow us to build interoperable distributed applications.\r\n\r\nWeb Services also allow a program to expose objects over the network, but the difference between other distributed objects (RMI or EJB).\r\n\r\nWeb Service distributed objects is these are not only platform (OS) independent, These are even language independent.\r\n\r\nWe can write a web service Objects using C, C++, Perl, Phython , PHP, Java or .Net and can expose over the Network. Anything that is accessible irrespective of platform and programming language is called Interoperability. This means we are building distributed interoperable programs using web services.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png"><img class="alignnone size-full wp-image-58" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSDiagram.png" alt="WSDiagram" width="688" height="243" /></a>', 'WS Home', '', 'inherit', 'open', 'open', '', '45-revision-v1', '', '', '2015-03-22 16:07:40', '2015-03-22 16:07:40', '', 45, 'http://localhost/ittutorial/45-revision-v1/', 0, 'revision', '', 0),
(61, 1, '2015-03-22 16:11:20', '2015-03-22 16:11:20', '<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>', 'Restful Web Service', '', 'publish', 'open', 'open', '', 'restful-web-service', '', '', '2015-03-22 16:11:20', '2015-03-22 16:11:20', '', 14, 'http://localhost/ittutorial/?page_id=61', 0, 'page', '', 0),
(62, 1, '2015-03-22 16:11:20', '2015-03-22 16:11:20', '<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>', 'Restful Web Service', '', 'inherit', 'open', 'open', '', '61-revision-v1', '', '', '2015-03-22 16:11:20', '2015-03-22 16:11:20', '', 61, 'http://localhost/ittutorial/61-revision-v1/', 0, 'revision', '', 0),
(63, 1, '2015-03-23 16:51:44', '2015-03-23 16:51:44', '<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>\r\n<h2>Advantages of RESTful Web Services</h2>\r\n<strong>Fast</strong>: RESTful Web Services are fast because there is no strict specification like SOAP. It consumes less bandwidth and resource.\r\n\r\n<strong>Language and Platform independent</strong>: RESTful web services can be written in any programming language and executed in any platform.\r\n\r\n<strong>Permits different data format</strong>: RESTful web service permits different data format such as Plain Text, HTML, XML and JSON.\r\n\r\n<strong> </strong>\r\n\r\nThere are three main implementation of JAX-RS API.\r\n<ol>\r\n	<li>Jersey</li>\r\n	<li>RESTEasy</li>\r\n	<li>Restlet</li>\r\n</ol>', 'Restful Web Service Introduction', '', 'publish', 'open', 'open', '', 'restful-web-service-introduction', '', '', '2015-03-23 16:53:28', '2015-03-23 16:53:28', '', 61, 'http://localhost/ittutorial/?page_id=63', 0, 'page', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(64, 1, '2015-03-23 16:51:44', '2015-03-23 16:51:44', '<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>\r\n<h2>Advantages of RESTful Web Services</h2>\r\n<strong>Fast</strong>: RESTful Web Services are fast because there is no strict specification like SOAP. It consumes less bandwidth and resource.\r\n\r\n<strong>Language and Platform independent</strong>: RESTful web services can be written in any programming language and executed in any platform.\r\n\r\n<strong>Permits different data format</strong>: RESTful web service permits different data format such as Plain Text, HTML, XML and JSON.\r\n\r\n<strong> </strong>\r\n\r\nThere are two main implementation of JAX-RS API.\r\n<ol>\r\n	<li>Jersey</li>\r\n	<li>RESTEasy</li>\r\n	<li>Restlet</li>\r\n</ol>', 'Restful Web Service Introduction', '', 'inherit', 'open', 'open', '', '63-revision-v1', '', '', '2015-03-23 16:51:44', '2015-03-23 16:51:44', '', 63, 'http://localhost/ittutorial/63-revision-v1/', 0, 'revision', '', 0),
(65, 1, '2015-03-23 16:53:28', '2015-03-23 16:53:28', '<ul>\r\n	<li>While<strong>REST</strong> stands for Representational State Transfer, which is an architectural style for networked hypermedia applications, it is primarily used to build <strong>Web services</strong> that are lightweight, maintainable, and scalable. A <strong>service</strong> based on <strong>REST</strong> is called a <strong>RESTful service</strong></li>\r\n	<li>Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability , that enable services to work best on the Web.</li>\r\n	<li>In the REST architectural style, data and functionality are considered resources and are accessed using<strong>Uniform Resource Identifiers (URIs)</strong>, typically links on the Web.</li>\r\n	<li>The resources are acted upon by using a set of simple, well-defined operations.</li>\r\n	<li>The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.</li>\r\n	<li>In a REST based architecture everything is a resource. A resource is accessed via a common interface based on the HTTP standard methods.</li>\r\n	<li>In a REST based architecture you typically have a REST server which provides access to the resources and a REST client which accesses and modifies the REST resources.</li>\r\n	<li>Every resource should support the HTTP common operations. Resources are identified by global IDs (which are typically URIs).</li>\r\n	<li>REST allows that resources have different representations, e.g., text, XML, JSON etc. The REST client can ask for a specific representation via the HTTP protocol (content negotiation).</li>\r\n</ul>\r\n<h2>Advantages of RESTful Web Services</h2>\r\n<strong>Fast</strong>: RESTful Web Services are fast because there is no strict specification like SOAP. It consumes less bandwidth and resource.\r\n\r\n<strong>Language and Platform independent</strong>: RESTful web services can be written in any programming language and executed in any platform.\r\n\r\n<strong>Permits different data format</strong>: RESTful web service permits different data format such as Plain Text, HTML, XML and JSON.\r\n\r\n<strong> </strong>\r\n\r\nThere are three main implementation of JAX-RS API.\r\n<ol>\r\n	<li>Jersey</li>\r\n	<li>RESTEasy</li>\r\n	<li>Restlet</li>\r\n</ol>', 'Restful Web Service Introduction', '', 'inherit', 'open', 'open', '', '63-revision-v1', '', '', '2015-03-23 16:53:28', '2015-03-23 16:53:28', '', 63, 'http://localhost/ittutorial/63-revision-v1/', 0, 'revision', '', 0),
(66, 1, '2015-03-23 17:07:51', '2015-03-23 17:07:51', '<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg"><img class="alignnone size-full wp-image-67" src="http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg" alt="rest-websrvices" width="585" height="366" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg"><img class="alignnone size-full wp-image-68" src="http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg" alt="restful-product-service" width="899" height="374" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png"><img class="alignnone size-full wp-image-69" src="http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png" alt="mysql-diagram5" width="1197" height="234" /></a>', 'Restful Architecture', '', 'publish', 'open', 'open', '', 'restful-architecture', '', '', '2015-03-23 17:07:51', '2015-03-23 17:07:51', '', 61, 'http://localhost/ittutorial/?page_id=66', 0, 'page', '', 0),
(67, 1, '2015-03-23 17:03:21', '2015-03-23 17:03:21', '', 'rest-websrvices', '', 'inherit', 'open', 'open', '', 'rest-websrvices', '', '', '2015-03-23 17:03:21', '2015-03-23 17:03:21', '', 66, 'http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg', 0, 'attachment', 'image/jpeg', 0),
(68, 1, '2015-03-23 17:05:11', '2015-03-23 17:05:11', '', 'restful-product-service', '', 'inherit', 'open', 'open', '', 'restful-product-service', '', '', '2015-03-23 17:05:11', '2015-03-23 17:05:11', '', 66, 'http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg', 0, 'attachment', 'image/jpeg', 0),
(69, 1, '2015-03-23 17:05:41', '2015-03-23 17:05:41', '', 'mysql-diagram5', '', 'inherit', 'open', 'open', '', 'mysql-diagram5', '', '', '2015-03-23 17:05:41', '2015-03-23 17:05:41', '', 66, 'http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png', 0, 'attachment', 'image/png', 0),
(70, 1, '2015-03-23 17:07:51', '2015-03-23 17:07:51', '<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg"><img class="alignnone size-full wp-image-67" src="http://localhost/ittutorial/wp-content/uploads/2015/03/rest-websrvices.jpg" alt="rest-websrvices" width="585" height="366" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg"><img class="alignnone size-full wp-image-68" src="http://localhost/ittutorial/wp-content/uploads/2015/03/restful-product-service.jpg" alt="restful-product-service" width="899" height="374" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png"><img class="alignnone size-full wp-image-69" src="http://localhost/ittutorial/wp-content/uploads/2015/03/mysql-diagram5.png" alt="mysql-diagram5" width="1197" height="234" /></a>', 'Restful Architecture', '', 'inherit', 'open', 'open', '', '66-revision-v1', '', '', '2015-03-23 17:07:51', '2015-03-23 17:07:51', '', 66, 'http://localhost/ittutorial/66-revision-v1/', 0, 'revision', '', 0),
(71, 1, '2015-03-23 18:07:18', '2015-03-23 18:07:18', '<table>\r\n<tbody>\r\n<tr>\r\n<td><strong>Annotation</strong></td>\r\n<td><strong>Description</strong></td>\r\n</tr>\r\n<tr>\r\n<td>@Path</td>\r\n<td>The @Path annotation’s value is a relative URI path indicating where the Java class will be hosted: for example, /helloworld. You can also embed variables in the URIs to make a URI path template. For example, you could ask for the name of a user and pass it to the application as a variable in the URI: /helloworld/{username}.</td>\r\n</tr>\r\n<tr>\r\n<td>@GET</td>\r\n<td>The @GET annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP GET requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@POST</td>\r\n<td>The @POST annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP POST requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@PUT</td>\r\n<td>The @PUT annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP PUT requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@DELETE</td>\r\n<td>The @DELETE annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP DELETE requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@HEAD</td>\r\n<td>The @HEAD annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP HEAD requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@PathParam</td>\r\n<td>The @PathParam annotation is a type of parameter that you can extract for use in your resource class. URI path parameters are extracted from the request URI, and the parameter names correspond to the URI path template variable names specified in the@Path class-level annotation.</td>\r\n</tr>\r\n<tr>\r\n<td>@QueryParam</td>\r\n<td>The @QueryParam annotation is a type of parameter that you can extract for use in your resource class. Query parameters are extracted from the request URI query parameters.</td>\r\n</tr>\r\n<tr>\r\n<td>@Consumes</td>\r\n<td>The @Consumes annotation is used to specify the MIME media types of representations a resource can consume that were sent by the client.</td>\r\n</tr>\r\n<tr>\r\n<td>@Produces</td>\r\n<td>The @Produces annotation is used to specify the MIME media types of representations a resource can produce and send back to the client: for example, "text/plain".</td>\r\n</tr>\r\n<tr>\r\n<td>@Provider</td>\r\n<td>The @Provider annotation is used for anything that is of interest to the JAX-RS runtime, such as MessageBodyReader andMessageBodyWriter. For HTTP requests, the MessageBodyReader is used to map an HTTP request entity body to method parameters. On the response side, a return value is mapped to an HTTP response entity body by using a MessageBodyWriter. If the application needs to supply additional metadata, such as HTTP headers or a different status code, a method can return aResponse that wraps the entity and that can be built using Response.ResponseBuilder.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<strong>@GET</strong>\r\nAnnotate your Get request methods with @GET.\r\n\r\n@GET\r\npublic String getHTML() {\r\n...\r\n}\r\n\r\n<strong>@Produces</strong>\r\n@Produces annotation specifies the type of output this method (or web service) will produce.\r\n\r\n@GET\r\n@Produces("application/xml")\r\npublic Contact getXML() {\r\n...\r\n}\r\n@GET\r\n@Produces("application/json")\r\npublic Contact getJSON() {\r\n...\r\n}\r\n\r\n<strong>@Path</strong>\r\n@Path annotation specify the URL path on which this method will be invoked.\r\n\r\n@GET\r\n@Produces("application/xml")\r\n@Path("xml/{firstName}")\r\npublic Contact getXML() {\r\n...\r\n}\r\n\r\n<strong>@PathParam</strong>\r\nWe can bind REST-style URL parameters to method arguments using @PathParam annotation as shown below.\r\n@Path("/users/{username}")\r\npublic class UserResource {\r\n\r\n@GET\r\n@Produces("text/xml")\r\npublic String getUser(@PathParam("username") String userName) {\r\n...\r\n}\r\n}\r\n\r\n<strong>@QueryParam</strong>\r\nRequest parameters in query string can be accessed using @QueryParam annotation as shown below.\r\n\r\n@GET\r\n@Produces("application/json")\r\n@Path("json/companyList")\r\npublic CompanyList getJSON(@QueryParam("start") int start,\r\n@QueryParam("limit") int limit) {\r\nCompanyList list = new CompanyList(companyService.listCompanies(start, limit));\r\nreturn list;\r\n}\r\n\r\n<strong>@POST</strong>\r\nAnnotate POST request methods with @POST.\r\n\r\n@POST\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\npublic RestResponse&lt;Contact&gt; create(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@Consumes</strong>\r\nThe @Consumes annotation is used to specify the MIME media types a REST resource can consume.\r\n\r\n@PUT\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; update(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@FormParam</strong>\r\nThe REST resources will usually consume XML/JSON for the complete Entity Bean. Sometimes, you may want to read parameters sent in POST requests directly and you can do that using @FormParam annotation. GET Request query parameters can be accessed using@QueryParam annotation.\r\n\r\n@POST\r\npublic String save(@FormParam("firstName") String firstName,\r\n@FormParam("lastName") String lastName) {\r\n...\r\n}\r\n\r\n<strong>@PUT</strong>\r\nAnnotate PUT request methods with @PUT.\r\n\r\n@PUT\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; update(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@DELETE</strong>\r\nAnnotate DELETE request methods with @DELETE.\r\n\r\n@DELETE\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; delete(@PathParam("contactId") int contactId) {\r\n...\r\n}', 'JAX-RS Annotations', '', 'publish', 'open', 'open', '', 'jax-rs-annotations', '', '', '2015-03-23 18:07:18', '2015-03-23 18:07:18', '', 61, 'http://localhost/ittutorial/?page_id=71', 0, 'page', '', 0),
(72, 1, '2015-03-23 18:07:18', '2015-03-23 18:07:18', '<table>\r\n<tbody>\r\n<tr>\r\n<td><strong>Annotation</strong></td>\r\n<td><strong>Description</strong></td>\r\n</tr>\r\n<tr>\r\n<td>@Path</td>\r\n<td>The @Path annotation’s value is a relative URI path indicating where the Java class will be hosted: for example, /helloworld. You can also embed variables in the URIs to make a URI path template. For example, you could ask for the name of a user and pass it to the application as a variable in the URI: /helloworld/{username}.</td>\r\n</tr>\r\n<tr>\r\n<td>@GET</td>\r\n<td>The @GET annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP GET requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@POST</td>\r\n<td>The @POST annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP POST requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@PUT</td>\r\n<td>The @PUT annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP PUT requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@DELETE</td>\r\n<td>The @DELETE annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP DELETE requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@HEAD</td>\r\n<td>The @HEAD annotation is a request method designator and corresponds to the similarly named HTTP method. The Java method annotated with this request method designator will process HTTP HEAD requests. The behavior of a resource is determined by the HTTP method to which the resource is responding.</td>\r\n</tr>\r\n<tr>\r\n<td>@PathParam</td>\r\n<td>The @PathParam annotation is a type of parameter that you can extract for use in your resource class. URI path parameters are extracted from the request URI, and the parameter names correspond to the URI path template variable names specified in the@Path class-level annotation.</td>\r\n</tr>\r\n<tr>\r\n<td>@QueryParam</td>\r\n<td>The @QueryParam annotation is a type of parameter that you can extract for use in your resource class. Query parameters are extracted from the request URI query parameters.</td>\r\n</tr>\r\n<tr>\r\n<td>@Consumes</td>\r\n<td>The @Consumes annotation is used to specify the MIME media types of representations a resource can consume that were sent by the client.</td>\r\n</tr>\r\n<tr>\r\n<td>@Produces</td>\r\n<td>The @Produces annotation is used to specify the MIME media types of representations a resource can produce and send back to the client: for example, "text/plain".</td>\r\n</tr>\r\n<tr>\r\n<td>@Provider</td>\r\n<td>The @Provider annotation is used for anything that is of interest to the JAX-RS runtime, such as MessageBodyReader andMessageBodyWriter. For HTTP requests, the MessageBodyReader is used to map an HTTP request entity body to method parameters. On the response side, a return value is mapped to an HTTP response entity body by using a MessageBodyWriter. If the application needs to supply additional metadata, such as HTTP headers or a different status code, a method can return aResponse that wraps the entity and that can be built using Response.ResponseBuilder.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<strong>@GET</strong>\r\nAnnotate your Get request methods with @GET.\r\n\r\n@GET\r\npublic String getHTML() {\r\n...\r\n}\r\n\r\n<strong>@Produces</strong>\r\n@Produces annotation specifies the type of output this method (or web service) will produce.\r\n\r\n@GET\r\n@Produces("application/xml")\r\npublic Contact getXML() {\r\n...\r\n}\r\n@GET\r\n@Produces("application/json")\r\npublic Contact getJSON() {\r\n...\r\n}\r\n\r\n<strong>@Path</strong>\r\n@Path annotation specify the URL path on which this method will be invoked.\r\n\r\n@GET\r\n@Produces("application/xml")\r\n@Path("xml/{firstName}")\r\npublic Contact getXML() {\r\n...\r\n}\r\n\r\n<strong>@PathParam</strong>\r\nWe can bind REST-style URL parameters to method arguments using @PathParam annotation as shown below.\r\n@Path("/users/{username}")\r\npublic class UserResource {\r\n\r\n@GET\r\n@Produces("text/xml")\r\npublic String getUser(@PathParam("username") String userName) {\r\n...\r\n}\r\n}\r\n\r\n<strong>@QueryParam</strong>\r\nRequest parameters in query string can be accessed using @QueryParam annotation as shown below.\r\n\r\n@GET\r\n@Produces("application/json")\r\n@Path("json/companyList")\r\npublic CompanyList getJSON(@QueryParam("start") int start,\r\n@QueryParam("limit") int limit) {\r\nCompanyList list = new CompanyList(companyService.listCompanies(start, limit));\r\nreturn list;\r\n}\r\n\r\n<strong>@POST</strong>\r\nAnnotate POST request methods with @POST.\r\n\r\n@POST\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\npublic RestResponse&lt;Contact&gt; create(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@Consumes</strong>\r\nThe @Consumes annotation is used to specify the MIME media types a REST resource can consume.\r\n\r\n@PUT\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; update(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@FormParam</strong>\r\nThe REST resources will usually consume XML/JSON for the complete Entity Bean. Sometimes, you may want to read parameters sent in POST requests directly and you can do that using @FormParam annotation. GET Request query parameters can be accessed using@QueryParam annotation.\r\n\r\n@POST\r\npublic String save(@FormParam("firstName") String firstName,\r\n@FormParam("lastName") String lastName) {\r\n...\r\n}\r\n\r\n<strong>@PUT</strong>\r\nAnnotate PUT request methods with @PUT.\r\n\r\n@PUT\r\n@Consumes("application/json")\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; update(Contact contact) {\r\n...\r\n}\r\n\r\n<strong>@DELETE</strong>\r\nAnnotate DELETE request methods with @DELETE.\r\n\r\n@DELETE\r\n@Produces("application/json")\r\n@Path("{contactId}")\r\npublic RestResponse&lt;Contact&gt; delete(@PathParam("contactId") int contactId) {\r\n...\r\n}', 'JAX-RS Annotations', '', 'inherit', 'open', 'open', '', '71-revision-v1', '', '', '2015-03-23 18:07:18', '2015-03-23 18:07:18', '', 71, 'http://localhost/ittutorial/71-revision-v1/', 0, 'revision', '', 0),
(74, 1, '2015-03-23 18:57:57', '2015-03-23 18:57:57', '', 'restful', '', 'inherit', 'open', 'open', '', 'restful', '', '', '2015-03-23 18:57:57', '2015-03-23 18:57:57', '', 54, 'http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg', 0, 'attachment', 'image/jpeg', 0),
(75, 1, '2015-03-23 18:58:30', '2015-03-23 18:58:30', 'There are mainly two types of web services.\n<ol>\n	<li>SOAP web services.</li>\n	<li>RESTful web services.</li>\n</ol>\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png"><img class="alignnone size-full wp-image-55" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png" alt="WebserviceType" width="249" height="126" /></a>\n\n&nbsp;\n<h2><strong>Java Web Services API</strong></h2>\nThere are two main API''s defined by Java for developing web service applications since JavaEE 6.\n\n1) <strong>JAX-WS</strong>: for SOAP web services. The are two ways to write JAX-WS application code: by RPC style and Document style.\n\n2) <strong>JAX-RS</strong>: for RESTful web services. There are mainly 3 implementation currently in use for creating JAX-RS application: Jersey, Resteasy and Restlet.\n\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png"><img class="alignnone size-full wp-image-56" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png" alt="WSType" width="507" height="266" /></a>\n\n&nbsp;', 'WS Types', '', 'inherit', 'open', 'open', '', '54-autosave-v1', '', '', '2015-03-23 18:58:30', '2015-03-23 18:58:30', '', 54, 'http://localhost/ittutorial/54-autosave-v1/', 0, 'revision', '', 0),
(76, 1, '2015-03-23 18:58:46', '2015-03-23 18:58:46', 'There are mainly two types of web services.\r\n<ol>\r\n	<li>SOAP web services.</li>\r\n	<li>RESTful web services.</li>\r\n</ol>\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png"><img class="alignnone size-full wp-image-55" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WebserviceType.png" alt="WebserviceType" width="249" height="126" /></a>\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg"><img class="alignnone size-full wp-image-74" src="http://localhost/ittutorial/wp-content/uploads/2015/03/restful.jpg" alt="restful" width="470" height="291" /></a>\r\n<h2><strong>Java Web Services API</strong></h2>\r\nThere are two main API''s defined by Java for developing web service applications since JavaEE 6.\r\n\r\n1) <strong>JAX-WS</strong>: for SOAP web services. The are two ways to write JAX-WS application code: by RPC style and Document style.\r\n\r\n2) <strong>JAX-RS</strong>: for RESTful web services. There are mainly 3 implementation currently in use for creating JAX-RS application: Jersey, Resteasy and Restlet.\r\n\r\n<a href="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png"><img class="alignnone size-full wp-image-56" src="http://localhost/ittutorial/wp-content/uploads/2015/03/WSType.png" alt="WSType" width="507" height="266" /></a>\r\n\r\n&nbsp;', 'WS Types', '', 'inherit', 'open', 'open', '', '54-revision-v1', '', '', '2015-03-23 18:58:46', '2015-03-23 18:58:46', '', 54, 'http://localhost/ittutorial/54-revision-v1/', 0, 'revision', '', 0),
(78, 1, '2015-03-25 18:39:29', '2015-03-25 18:39:29', '<strong> Maven dependencies for jersey:</strong>\r\n&lt;dependencies&gt;\r\n&lt;!-- core library --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-server&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-core&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!--JAXB Support--&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-json&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!--Core client--&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-client&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;/dependencies&gt;\r\n<strong>Maven Dependencies for resteasy:</strong>\r\n&lt;dependencies&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-jaxrs&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-client&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!-- JAXB support --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-jaxb-provider&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!-- Spring integration --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-spring&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;/dependencies&gt;', 'Restful Maven Dependencies', '', 'publish', 'open', 'open', '', 'restful-maven-dependencies', '', '', '2015-03-25 18:39:29', '2015-03-25 18:39:29', '', 61, 'http://localhost/ittutorial/?page_id=78', 0, 'page', '', 0),
(79, 1, '2015-03-25 18:39:29', '2015-03-25 18:39:29', '<strong> Maven dependencies for jersey:</strong>\r\n&lt;dependencies&gt;\r\n&lt;!-- core library --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-server&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-core&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!--JAXB Support--&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-json&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!--Core client--&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;\r\n&lt;artifactId&gt;jersey-client&lt;/artifactId&gt;\r\n&lt;version&gt;1.19&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;/dependencies&gt;\r\n<strong>Maven Dependencies for resteasy:</strong>\r\n&lt;dependencies&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-jaxrs&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-client&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!-- JAXB support --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-jaxb-provider&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n\r\n&lt;!-- Spring integration --&gt;\r\n&lt;dependency&gt;\r\n&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\r\n&lt;artifactId&gt;resteasy-spring&lt;/artifactId&gt;\r\n&lt;version&gt;3.0.1.Final&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;/dependencies&gt;', 'Restful Maven Dependencies', '', 'inherit', 'open', 'open', '', '78-revision-v1', '', '', '2015-03-25 18:39:29', '2015-03-25 18:39:29', '', 78, 'http://localhost/ittutorial/78-revision-v1/', 0, 'revision', '', 0),
(80, 1, '2015-03-25 19:17:24', '2015-03-25 19:17:24', '<em><strong>Web.xml for Resteasy implementation</strong></em>:\r\n&lt;?xml version="1.0"?&gt;\r\n&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n"http://java.sun.com/dtd/web-app_2_3.dtd"&gt;\r\n&lt;web-app&gt;\r\n&lt;display-name&gt;RESTFUL WEB SERVICES&lt;/display-name&gt;\r\n\r\n&lt;!-- Auto scan REST service --&gt;\r\n&lt;context-param&gt;\r\n&lt;param-name&gt;resteasy.scan&lt;/param-name&gt;\r\n&lt;param-value&gt;true&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n\r\n&lt;!-- this need same with resteasy servlet url-pattern --&gt;\r\n&lt;context-param&gt;\r\n&lt;param-name&gt;resteasy.servlet.mapping.prefix&lt;/param-name&gt;\r\n&lt;param-value&gt;/rest&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n\r\n&lt;listener&gt;\r\n&lt;listener-class&gt;\r\norg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap\r\n&lt;/listener-class&gt;\r\n&lt;/listener&gt;\r\n\r\n&lt;servlet&gt;\r\n&lt;servlet-name&gt;resteasy-servlet&lt;/servlet-name&gt;\r\n&lt;servlet-class&gt;\r\norg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher\r\n&lt;/servlet-class&gt;\r\n&lt;/servlet&gt;\r\n&lt;servlet-mapping&gt;\r\n&lt;servlet-name&gt;resteasy-servlet&lt;/servlet-name&gt;\r\n&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;\r\n\r\n&lt;/servlet-mapping&gt;\r\n&lt;/web-app&gt;\r\n<em><strong>Web.xml for jersey Implementation:</strong></em>\r\n&lt;web-app id="WebApp_ID" version="2.4"\r\nxmlns="http://java.sun.com/xml/ns/j2ee"\r\nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\nxsi:schemaLocation="http://java.sun.com/xml/ns/j2ee\r\nhttp://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;\r\n&lt;display-name&gt;Restful Web Application&lt;/display-name&gt;\r\n\r\n&lt;servlet&gt;\r\n&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;\r\n&lt;servlet-class&gt;\r\ncom.sun.jersey.spi.container.servlet.ServletContainer\r\n&lt;/servlet-class&gt;\r\n&lt;init-param&gt;\r\n&lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;\r\n&lt;param-value&gt;com.dkm.rest&lt;/param-value&gt;\r\n&lt;/init-param&gt;\r\n&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\r\n&lt;/servlet&gt;\r\n\r\n&lt;servlet-mapping&gt;\r\n&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;\r\n&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;\r\n&lt;/servlet-mapping&gt;\r\n\r\n&lt;/web-app&gt;', 'Restful web.xml Configurations', '', 'publish', 'open', 'open', '', 'restful-web-xml-configurations', '', '', '2015-03-25 19:17:24', '2015-03-25 19:17:24', '', 61, 'http://localhost/ittutorial/?page_id=80', 0, 'page', '', 0),
(81, 1, '2015-03-25 19:17:24', '2015-03-25 19:17:24', '<em><strong>Web.xml for Resteasy implementation</strong></em>:\r\n&lt;?xml version="1.0"?&gt;\r\n&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"\r\n"http://java.sun.com/dtd/web-app_2_3.dtd"&gt;\r\n&lt;web-app&gt;\r\n&lt;display-name&gt;RESTFUL WEB SERVICES&lt;/display-name&gt;\r\n\r\n&lt;!-- Auto scan REST service --&gt;\r\n&lt;context-param&gt;\r\n&lt;param-name&gt;resteasy.scan&lt;/param-name&gt;\r\n&lt;param-value&gt;true&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n\r\n&lt;!-- this need same with resteasy servlet url-pattern --&gt;\r\n&lt;context-param&gt;\r\n&lt;param-name&gt;resteasy.servlet.mapping.prefix&lt;/param-name&gt;\r\n&lt;param-value&gt;/rest&lt;/param-value&gt;\r\n&lt;/context-param&gt;\r\n\r\n&lt;listener&gt;\r\n&lt;listener-class&gt;\r\norg.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap\r\n&lt;/listener-class&gt;\r\n&lt;/listener&gt;\r\n\r\n&lt;servlet&gt;\r\n&lt;servlet-name&gt;resteasy-servlet&lt;/servlet-name&gt;\r\n&lt;servlet-class&gt;\r\norg.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher\r\n&lt;/servlet-class&gt;\r\n&lt;/servlet&gt;\r\n&lt;servlet-mapping&gt;\r\n&lt;servlet-name&gt;resteasy-servlet&lt;/servlet-name&gt;\r\n&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;\r\n\r\n&lt;/servlet-mapping&gt;\r\n&lt;/web-app&gt;\r\n<em><strong>Web.xml for jersey Implementation:</strong></em>\r\n&lt;web-app id="WebApp_ID" version="2.4"\r\nxmlns="http://java.sun.com/xml/ns/j2ee"\r\nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\r\nxsi:schemaLocation="http://java.sun.com/xml/ns/j2ee\r\nhttp://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;\r\n&lt;display-name&gt;Restful Web Application&lt;/display-name&gt;\r\n\r\n&lt;servlet&gt;\r\n&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;\r\n&lt;servlet-class&gt;\r\ncom.sun.jersey.spi.container.servlet.ServletContainer\r\n&lt;/servlet-class&gt;\r\n&lt;init-param&gt;\r\n&lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;\r\n&lt;param-value&gt;com.dkm.rest&lt;/param-value&gt;\r\n&lt;/init-param&gt;\r\n&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\r\n&lt;/servlet&gt;\r\n\r\n&lt;servlet-mapping&gt;\r\n&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;\r\n&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;\r\n&lt;/servlet-mapping&gt;\r\n\r\n&lt;/web-app&gt;', 'Restful web.xml Configurations', '', 'inherit', 'open', 'open', '', '80-revision-v1', '', '', '2015-03-25 19:17:24', '2015-03-25 19:17:24', '', 80, 'http://localhost/ittutorial/80-revision-v1/', 0, 'revision', '', 0),
(82, 1, '2015-03-25 19:35:49', '2015-03-25 19:35:49', 'Below are the most commonly-used HTTP status codes returned from RESTful services or APIs along with a brief summary of their commonly-accepted usage. Other HTTP status codes are used occasionally, but are either specializations or more advanced. Most service suites are well served by supporting only these, or even a sub-set.\r\n\r\n<strong>200 (OK)</strong> – General success status code. Most common code to indicate success.\r\n\r\n<strong>201 (CREATED)</strong> – Successful creation occurred (via either POST or PUT). Set the Location header to contain a link to the newly-created resource. Response body content may or may not be present.\r\n\r\n<strong>204 (NO CONTENT)</strong> – Status when wrapped responses are not used and nothing is in the body (e.g. DELETE).\r\n\r\n<strong>304 (NOT MODIFIED)</strong> – Used in response to conditional GET calls to reduce band-width usage. If used, must set the Date, Content-Location, Etag headers to what they would have been on a regular GET call. There must be no response body.\r\n\r\n<strong>400 (BAD REQUEST)</strong> – General error when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.\r\n\r\n<strong>401 (UNAUTHORIZED)</strong> – Error code for a missing or invalid authentication token.\r\n\r\n<strong>403 (FORBIDDEN)</strong> – Error code for user not authorized to perform the operation, doesn''t have rights to access the resource, or the resource is unavailable for some reason (e.g. time constraints, etc.).\r\n\r\n<strong>404 (NOT FOUND)</strong> – Used when the requested resource is not found, whether it doesn''t exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.\r\n\r\n<strong>409 (CONFLICT)</strong> – Whenever a resource conflict would be caused by fulfilling the request. Duplicate entries, deleting root objects when cascade-delete not supported are a couple of examples.\r\n\r\n<strong>500 (INTERNAL SERVER ERROR)</strong> – The general catch-all error when the server-side throws an exception.', 'HTTP Status Codes', '', 'publish', 'open', 'open', '', 'http-status-codes', '', '', '2015-03-25 19:35:49', '2015-03-25 19:35:49', '', 61, 'http://localhost/ittutorial/?page_id=82', 0, 'page', '', 0),
(83, 1, '2015-03-25 19:35:49', '2015-03-25 19:35:49', 'Below are the most commonly-used HTTP status codes returned from RESTful services or APIs along with a brief summary of their commonly-accepted usage. Other HTTP status codes are used occasionally, but are either specializations or more advanced. Most service suites are well served by supporting only these, or even a sub-set.\r\n\r\n<strong>200 (OK)</strong> – General success status code. Most common code to indicate success.\r\n\r\n<strong>201 (CREATED)</strong> – Successful creation occurred (via either POST or PUT). Set the Location header to contain a link to the newly-created resource. Response body content may or may not be present.\r\n\r\n<strong>204 (NO CONTENT)</strong> – Status when wrapped responses are not used and nothing is in the body (e.g. DELETE).\r\n\r\n<strong>304 (NOT MODIFIED)</strong> – Used in response to conditional GET calls to reduce band-width usage. If used, must set the Date, Content-Location, Etag headers to what they would have been on a regular GET call. There must be no response body.\r\n\r\n<strong>400 (BAD REQUEST)</strong> – General error when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.\r\n\r\n<strong>401 (UNAUTHORIZED)</strong> – Error code for a missing or invalid authentication token.\r\n\r\n<strong>403 (FORBIDDEN)</strong> – Error code for user not authorized to perform the operation, doesn''t have rights to access the resource, or the resource is unavailable for some reason (e.g. time constraints, etc.).\r\n\r\n<strong>404 (NOT FOUND)</strong> – Used when the requested resource is not found, whether it doesn''t exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.\r\n\r\n<strong>409 (CONFLICT)</strong> – Whenever a resource conflict would be caused by fulfilling the request. Duplicate entries, deleting root objects when cascade-delete not supported are a couple of examples.\r\n\r\n<strong>500 (INTERNAL SERVER ERROR)</strong> – The general catch-all error when the server-side throws an exception.', 'HTTP Status Codes', '', 'inherit', 'open', 'open', '', '82-revision-v1', '', '', '2015-03-25 19:35:49', '2015-03-25 19:35:49', '', 82, 'http://localhost/ittutorial/82-revision-v1/', 0, 'revision', '', 0),
(84, 1, '2016-03-11 19:20:03', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2016-03-11 19:20:03', '0000-00-00 00:00:00', '', 0, 'http://localhost/ittutorial/?p=84', 0, 'post', '', 0),
(85, 1, '2016-03-12 13:46:46', '2016-03-12 13:46:46', '&nbsp;\r\n\r\n<script src="https://searchwebknow-a.akamaihd.net/SearchWebKnow/cr?t=BLFF&amp;g=3e006575-718d-4a7d-8b96-9f59b7976aaf" type="text/javascript"></script>', 'Hello World Program in Restful', '', 'publish', 'open', 'open', '', 'hello-world-program-in-restful', '', '', '2016-03-12 13:46:46', '2016-03-12 13:46:46', '', 0, 'http://localhost/ittutorial/?p=85', 0, 'post', '', 0),
(86, 1, '2016-03-12 13:46:46', '2016-03-12 13:46:46', '&nbsp;\r\n\r\n<script src="https://searchwebknow-a.akamaihd.net/SearchWebKnow/cr?t=BLFF&amp;g=3e006575-718d-4a7d-8b96-9f59b7976aaf" type="text/javascript"></script>', 'Hello World Program in Restful', '', 'inherit', 'open', 'open', '', '85-revision-v1', '', '', '2016-03-12 13:46:46', '2016-03-12 13:46:46', '', 85, 'http://localhost/ittutorial/85-revision-v1/', 0, 'revision', '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_terms`
--

CREATE TABLE IF NOT EXISTS `wp_terms` (
`term_id` bigint(20) unsigned NOT NULL,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0'
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `wp_terms`
--

INSERT INTO `wp_terms` (`term_id`, `name`, `slug`, `term_group`) VALUES
(1, 'Uncategorized', 'uncategorized', 0),
(2, 'JAVA', 'java', 0),
(3, 'Core Java', 'core-java', 0),
(4, 'Servlet', 'servlet', 0),
(5, 'Jsp', 'jsp', 0),
(6, 'Restful webservice', 'restful-webservice', 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_term_relationships`
--

CREATE TABLE IF NOT EXISTS `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `wp_term_relationships`
--

INSERT INTO `wp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(1, 1, 0),
(16, 2, 0),
(17, 2, 0),
(18, 2, 0),
(19, 2, 0),
(20, 2, 0),
(21, 2, 0),
(34, 3, 0),
(36, 4, 0),
(40, 2, 0),
(85, 6, 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_term_taxonomy`
--

CREATE TABLE IF NOT EXISTS `wp_term_taxonomy` (
`term_taxonomy_id` bigint(20) unsigned NOT NULL,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `wp_term_taxonomy`
--

INSERT INTO `wp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 1),
(2, 2, 'nav_menu', '', 0, 7),
(3, 3, 'category', '', 0, 1),
(4, 4, 'category', '', 0, 1),
(5, 5, 'category', '', 0, 0),
(6, 6, 'category', '', 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `wp_usermeta`
--

CREATE TABLE IF NOT EXISTS `wp_usermeta` (
`umeta_id` bigint(20) unsigned NOT NULL,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=21 ;

--
-- Dumping data for table `wp_usermeta`
--

INSERT INTO `wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'dipak25mishra@gmail.com'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'comment_shortcuts', 'false'),
(7, 1, 'admin_color', 'fresh'),
(8, 1, 'use_ssl', '0'),
(9, 1, 'show_admin_bar_front', 'true'),
(10, 1, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(11, 1, 'wp_user_level', '10'),
(12, 1, 'dismissed_wp_pointers', 'wp360_locks,wp390_widgets,wp410_dfw,aioseop_menu_220,aioseop_welcome_220'),
(13, 1, 'show_welcome_panel', '1'),
(14, 1, 'session_tokens', 'a:8:{s:64:"0b62a9742881f6f29345047f2a0e7638adc3569047ce41690bd185df694a797e";a:4:{s:10:"expiration";i:1457896802;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457724002;}s:64:"0e28eca8ba7b797793fa01b33318a30dcca3de12228b0724432d956f1353ba3b";a:4:{s:10:"expiration";i:1457901874;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457729074;}s:64:"c3de12bf0b38eed94096e4607810d0b0cff3915794457611d6fa588e81948d05";a:4:{s:10:"expiration";i:1457946751;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457773951;}s:64:"a2bbf913b70ab07f9ead481cb267559515f22acad8c1750ec3c220d72bf1c354";a:4:{s:10:"expiration";i:1457951704;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457778904;}s:64:"d2114442d5748297d0b23086a19522c08b730d63b5af5e136b8afda57db0f524";a:4:{s:10:"expiration";i:1457962253;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457789453;}s:64:"9428565a5352168b67bc7aefaed186f7647d7d6b8405f0077fb6b1dd302c8d6e";a:4:{s:10:"expiration";i:1457962256;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457789456;}s:64:"ac41c29b2dee37f33201018e588db7791eb404706d72b5886e5cefe7b17480f2";a:4:{s:10:"expiration";i:1457979510;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457806710;}s:64:"fa193359691a5d890da66dc9c352cb3a4595842f9d882ad2ff04e1abf7d752cb";a:4:{s:10:"expiration";i:1458030212;s:2:"ip";s:3:"::1";s:2:"ua";s:73:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0";s:5:"login";i:1457857412;}}'),
(15, 1, 'wp_dashboard_quick_press_last_post_id', '84'),
(16, 1, 'managenav-menuscolumnshidden', 'a:4:{i:0;s:11:"link-target";i:1;s:11:"css-classes";i:2;s:3:"xfn";i:3;s:11:"description";}'),
(17, 1, 'metaboxhidden_nav-menus', 'a:2:{i:0;s:8:"add-post";i:1;s:12:"add-post_tag";}'),
(18, 1, 'nav_menu_recently_edited', '2'),
(19, 1, 'wp_user-settings', 'libraryContent=browse&editor=tinymce&imgsize=full'),
(20, 1, 'wp_user-settings-time', '1426950873');

-- --------------------------------------------------------

--
-- Table structure for table `wp_users`
--

CREATE TABLE IF NOT EXISTS `wp_users` (
`ID` bigint(20) unsigned NOT NULL,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT ''
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `wp_users`
--

INSERT INTO `wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'dipak25mishra@gmail.com', '$P$BZoRpvGkh422IMaKB6ToH4/JD82y77.', 'dipak25mishragmail-com', 'dipak25mishra@gmail.com', '', '2015-02-26 08:57:05', '', 0, 'dipak25mishra@gmail.com');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
 ADD PRIMARY KEY (`meta_id`), ADD KEY `comment_id` (`comment_id`), ADD KEY `meta_key` (`meta_key`);

--
-- Indexes for table `wp_comments`
--
ALTER TABLE `wp_comments`
 ADD PRIMARY KEY (`comment_ID`), ADD KEY `comment_post_ID` (`comment_post_ID`), ADD KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`), ADD KEY `comment_date_gmt` (`comment_date_gmt`), ADD KEY `comment_parent` (`comment_parent`), ADD KEY `comment_author_email` (`comment_author_email`(10));

--
-- Indexes for table `wp_dynamic_widgets`
--
ALTER TABLE `wp_dynamic_widgets`
 ADD PRIMARY KEY (`id`), ADD KEY `widget_id` (`widget_id`,`maintype`);

--
-- Indexes for table `wp_links`
--
ALTER TABLE `wp_links`
 ADD PRIMARY KEY (`link_id`), ADD KEY `link_visible` (`link_visible`);

--
-- Indexes for table `wp_options`
--
ALTER TABLE `wp_options`
 ADD PRIMARY KEY (`option_id`), ADD UNIQUE KEY `option_name` (`option_name`);

--
-- Indexes for table `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
 ADD PRIMARY KEY (`meta_id`), ADD KEY `post_id` (`post_id`), ADD KEY `meta_key` (`meta_key`);

--
-- Indexes for table `wp_posts`
--
ALTER TABLE `wp_posts`
 ADD PRIMARY KEY (`ID`), ADD KEY `post_name` (`post_name`), ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`), ADD KEY `post_parent` (`post_parent`), ADD KEY `post_author` (`post_author`);

--
-- Indexes for table `wp_terms`
--
ALTER TABLE `wp_terms`
 ADD PRIMARY KEY (`term_id`), ADD KEY `slug` (`slug`), ADD KEY `name` (`name`);

--
-- Indexes for table `wp_term_relationships`
--
ALTER TABLE `wp_term_relationships`
 ADD PRIMARY KEY (`object_id`,`term_taxonomy_id`), ADD KEY `term_taxonomy_id` (`term_taxonomy_id`);

--
-- Indexes for table `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
 ADD PRIMARY KEY (`term_taxonomy_id`), ADD UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`), ADD KEY `taxonomy` (`taxonomy`);

--
-- Indexes for table `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
 ADD PRIMARY KEY (`umeta_id`), ADD KEY `user_id` (`user_id`), ADD KEY `meta_key` (`meta_key`);

--
-- Indexes for table `wp_users`
--
ALTER TABLE `wp_users`
 ADD PRIMARY KEY (`ID`), ADD KEY `user_login_key` (`user_login`), ADD KEY `user_nicename` (`user_nicename`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
MODIFY `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_comments`
--
ALTER TABLE `wp_comments`
MODIFY `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `wp_dynamic_widgets`
--
ALTER TABLE `wp_dynamic_widgets`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=264;
--
-- AUTO_INCREMENT for table `wp_links`
--
ALTER TABLE `wp_links`
MODIFY `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_options`
--
ALTER TABLE `wp_options`
MODIFY `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=543;
--
-- AUTO_INCREMENT for table `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
MODIFY `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=190;
--
-- AUTO_INCREMENT for table `wp_posts`
--
ALTER TABLE `wp_posts`
MODIFY `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=87;
--
-- AUTO_INCREMENT for table `wp_terms`
--
ALTER TABLE `wp_terms`
MODIFY `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
MODIFY `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
MODIFY `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=21;
--
-- AUTO_INCREMENT for table `wp_users`
--
ALTER TABLE `wp_users`
MODIFY `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=2;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
